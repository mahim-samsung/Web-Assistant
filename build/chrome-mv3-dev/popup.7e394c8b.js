(function(define){var __define; typeof define === "function" && (__define=define,define=null);
// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"cQRzy":[function(require,module,exports) {
var global = arguments[3];
var W = Object.create;
var k = Object.defineProperty;
var V = Object.getOwnPropertyDescriptor;
var G = Object.getOwnPropertyNames;
var X = Object.getPrototypeOf, J = Object.prototype.hasOwnProperty;
var q = (e, t, o, r)=>{
    if (t && typeof t == "object" || typeof t == "function") for (let s of G(t))!J.call(e, s) && s !== o && k(e, s, {
        get: ()=>t[s],
        enumerable: !(r = V(t, s)) || r.enumerable
    });
    return e;
};
var z = (e, t, o)=>(o = e != null ? W(X(e)) : {}, q(t || !e || !e.__esModule ? k(o, "default", {
        value: e,
        enumerable: !0
    }) : o, e));
var _ = typeof globalThis.process < "u" ? globalThis.process.argv : [];
var D = ()=>typeof globalThis.process < "u" ? globalThis.process.env : {};
var K = new Set(_), T = (e)=>K.has(e), ue = _.filter((e)=>e.startsWith("--") && e.includes("=")).map((e)=>e.split("=")).reduce((e, [t, o])=>(e[t] = o, e), {});
var de = T("--dry-run"), A = ()=>T("--verbose") || D().VERBOSE === "true", fe = A();
var E = (e = "", ...t)=>console.log(e.padEnd(9), "|", ...t);
var w = (...e)=>console.error("\uD83D\uDD34 ERROR".padEnd(9), "|", ...e), L = (...e)=>E("\uD83D\uDD35 INFO", ...e), x = (...e)=>E("\uD83D\uDFE0 WARN", ...e), Q = 0, p = (...e)=>A() && E(`\u{1F7E1} ${Q++}`, ...e);
var c = {
    "isContentScript": false,
    "isBackground": false,
    "isReact": false,
    "runtimes": [
        "page-runtime"
    ],
    "host": "localhost",
    "port": 60492,
    "entryFilePath": "/Users/mahbubislammahim/Desktop/Development/Webpilot/.plasmo/static/popup.ts",
    "bundleId": "8e90d8397e394c8b",
    "envHash": "e792fbbdaa78ee84",
    "verbose": "false",
    "secure": false,
    "serverPort": 60491
};
module.bundle.HMR_BUNDLE_ID = c.bundleId;
globalThis.process = {
    argv: [],
    env: {
        VERBOSE: c.verbose
    }
};
var Y = module.bundle.Module;
function Z(e) {
    Y.call(this, e), this.hot = {
        data: module.bundle.hotData[e],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(t) {
            this._acceptCallbacks.push(t || function() {});
        },
        dispose: function(t) {
            this._disposeCallbacks.push(t);
        }
    }, module.bundle.hotData[e] = void 0;
}
module.bundle.Module = Z;
module.bundle.hotData = {};
var d = globalThis.browser || globalThis.chrome || null;
async function m(e = !1) {
    e ? (p("Triggering full reload"), d.runtime.sendMessage({
        __plasmo_full_reload__: !0
    })) : globalThis.location?.reload?.();
}
function h() {
    return !c.host || c.host === "0.0.0.0" ? location.protocol.indexOf("http") === 0 ? location.hostname : "localhost" : c.host;
}
function f() {
    return c.port || location.port;
}
var S = "__plasmo_runtime_page_";
var i = {
    checkedAssets: {},
    assetsToDispose: [],
    assetsToAccept: []
}, C = ()=>{
    i.checkedAssets = {}, i.assetsToDispose = [], i.assetsToAccept = [];
};
function u(e, t) {
    let { modules: o  } = e;
    if (!o) return [];
    let r = [], s, n, a;
    for(s in o)for(n in o[s][1])a = o[s][1][n], (a === t || Array.isArray(a) && a[a.length - 1] === t) && r.push([
        e,
        s
    ]);
    return e.parent && (r = r.concat(u(e.parent, t))), r;
}
function R(e, t, o) {
    if (B(e, t, o)) return !0;
    let r = u(module.bundle.root, t), s = !1;
    for(; r.length > 0;){
        let [n, a] = r.shift();
        if (B(n, a, null)) s = !0;
        else {
            let y = u(module.bundle.root, a);
            if (y.length === 0) {
                s = !1;
                break;
            }
            r.push(...y);
        }
    }
    return s;
}
function B(e, t, o) {
    let { modules: r  } = e;
    if (!r) return !1;
    if (o && !o[e.HMR_BUNDLE_ID]) return e.parent ? R(e.parent, t, o) : !0;
    if (i.checkedAssets[t]) return !0;
    i.checkedAssets[t] = !0;
    let s = e.cache[t];
    return i.assetsToDispose.push([
        e,
        t
    ]), !s || s.hot && s.hot._acceptCallbacks.length ? (i.assetsToAccept.push([
        e,
        t
    ]), !0) : !1;
}
function M(e, t) {
    let { modules: o  } = e;
    return o ? !!o[t] : !1;
}
function ee(e) {
    if (e.type === "js" && typeof document < "u") return new Promise((t, o)=>{
        let r = document.createElement("script");
        r.src = `${e.url}?t=${Date.now()}`, e.outputFormat === "esmodule" && (r.type = "module"), r.addEventListener("load", ()=>t(r)), r.addEventListener("error", ()=>o(new Error(`Failed to download asset: ${e.id}`))), document.head?.appendChild(r);
    });
}
var P = !1;
try {
    (0, eval)('throw new Error("test"); //# sourceURL=test.js');
} catch (e) {
    P = e.stack.includes("test.js");
}
async function O(e) {
    global.parcelHotUpdate = Object.create(null), e.forEach((o)=>{
        o.url = d.runtime.getURL("/__plasmo_hmr_proxy__?url=" + encodeURIComponent(`${o.url}?t=${Date.now()}`));
    });
    let t = await Promise.all(P ? [] : e.map(ee));
    try {
        e.forEach(function(o) {
            $(module.bundle.root, o);
        });
    } finally{
        delete global.parcelHotUpdate, t && t.forEach((o)=>{
            o && document.head?.removeChild(o);
        });
    }
}
function te(e) {
    let t = e.cloneNode();
    t.onload = function() {
        e.parentNode !== null && e.parentNode.removeChild(e);
    }, t.setAttribute("href", e.getAttribute("href").split("?")[0] + "?" + Date.now()), e.parentNode.insertBefore(t, e.nextSibling);
}
var b = null;
function oe() {
    b || (b = setTimeout(function() {
        let e = document.querySelectorAll('link[rel="stylesheet"]');
        for(var t = 0; t < e.length; t++){
            let o = e[t].getAttribute("href"), r = h(), s = r === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + f()).test(o) : o.indexOf(r + ":" + f());
            /^https?:\/\//i.test(o) && o.indexOf(location.origin) !== 0 && !s || te(e[t]);
        }
        b = null;
    }, 47));
}
function $(e, t) {
    let { modules: o  } = e;
    if (o) {
        if (t.type === "css") oe();
        else if (t.type === "js") {
            let r = t.depsByBundle[e.HMR_BUNDLE_ID];
            if (r) {
                if (o[t.id]) {
                    let n = o[t.id][1];
                    for(let a in n)if (!r[a] || r[a] !== n[a]) {
                        let l = n[a];
                        u(module.bundle.root, l).length === 1 && v(module.bundle.root, l);
                    }
                }
                P && (0, eval)(t.output);
                let s = global.parcelHotUpdate[t.id];
                o[t.id] = [
                    s,
                    r
                ];
            } else e.parent && $(e.parent, t);
        }
    }
}
function v(e, t) {
    let o = e.modules;
    if (o) {
        if (o[t]) {
            let r = o[t][1], s = [];
            for(let n in r)u(module.bundle.root, r[n]).length === 1 && s.push(r[n]);
            delete o[t], delete e.cache[t], s.forEach((n)=>{
                v(module.bundle.root, n);
            });
        } else e.parent && v(e.parent, t);
    }
}
function H(e, t) {
    let o = e.cache[t];
    e.hotData[t] = {}, o && o.hot && (o.hot.data = e.hotData[t]), o && o.hot && o.hot._disposeCallbacks.length && o.hot._disposeCallbacks.forEach(function(r) {
        r(e.hotData[t]);
    }), delete e.cache[t];
}
function j(e, t) {
    e(t);
    let o = e.cache[t];
    if (o && o.hot && o.hot._acceptCallbacks.length) {
        let r = u(module.bundle.root, t);
        o.hot._acceptCallbacks.forEach(function(s) {
            let n = s(()=>r);
            n && n.length && (n.forEach(([a, l])=>{
                H(a, l);
            }), i.assetsToAccept.push.apply(i.assetsToAccept, n));
        });
    }
}
function re(e = f()) {
    let t = h();
    return `${c.secure || location.protocol === "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(t) ? "wss" : "ws"}://${t}:${e}/`;
}
function se(e) {
    typeof e.message == "string" && w("[plasmo/parcel-runtime]: " + e.message);
}
function I(e) {
    if (typeof globalThis.WebSocket > "u") return;
    let t = new WebSocket(re());
    return t.addEventListener("message", async function(o) {
        let r = JSON.parse(o.data);
        if (r.type === "update" && await e(r.assets), r.type === "error") for (let s of r.diagnostics.ansi){
            let n = s.codeframe || s.stack;
            x("[plasmo/parcel-runtime]: " + s.message + `
` + n + `

` + s.hints.join(`
`));
        }
    }), t.addEventListener("error", se), t.addEventListener("open", ()=>{
        L(`[plasmo/parcel-runtime]: Connected to HMR server for ${c.entryFilePath}`);
    }), t.addEventListener("close", ()=>{
        x(`[plasmo/parcel-runtime]: Connection to the HMR server is closed for ${c.entryFilePath}`);
    }), t;
}
var N = z(require("68aae0a3ed7a818f"));
async function U() {
    N.default.injectIntoGlobalHook(window), window.$RefreshReg$ = function() {}, window.$RefreshSig$ = function() {
        return function(e) {
            return e;
        };
    };
}
var ne = `${S}${module.id}__`, g, F = module.bundle.parent;
if (!F || !F.isParcelRequire) {
    try {
        g = d?.runtime.connect({
            name: ne
        }), g.onDisconnect.addListener(()=>{
            m();
        }), c.isReact || g.onMessage.addListener(()=>{
            m();
        });
    } catch (e) {
        p(e);
    }
    I(async (e)=>{
        if (p("Page runtime - On HMR Update"), c.isReact) {
            C();
            let t = e.filter((r)=>r.envHash === c.envHash);
            if (t.some((r)=>r.type === "css" || r.type === "js" && R(module.bundle.root, r.id, r.depsByBundle))) try {
                await O(t);
                let r = {};
                for (let [n, a] of i.assetsToDispose)r[a] || (H(n, a), r[a] = !0);
                let s = {};
                for(let n = 0; n < i.assetsToAccept.length; n++){
                    let [a, l] = i.assetsToAccept[n];
                    s[l] || (j(a, l), s[l] = !0);
                }
            } catch (r) {
                c.verbose === "true" && (console.trace(r), alert(JSON.stringify(r))), await m(!0);
            }
        } else {
            let t = e.filter((o)=>o.envHash === c.envHash).some((o)=>M(module.bundle, o.id));
            p("Page runtime -", {
                sourceChanged: t
            }), t && g.postMessage({
                __plasmo_page_changed__: !0
            });
        }
    });
}
c.isReact && (p("Injecting react refresh"), U());

},{"68aae0a3ed7a818f":"iZhE1"}],"iZhE1":[function(require,module,exports) {
var oe = Object.create;
var H = Object.defineProperty;
var ae = Object.getOwnPropertyDescriptor;
var ue = Object.getOwnPropertyNames;
var se = Object.getPrototypeOf, le = Object.prototype.hasOwnProperty;
var z = (o, f)=>()=>(f || o((f = {
            exports: {}
        }).exports, f), f.exports), ce = (o, f)=>{
    for(var s in f)H(o, s, {
        get: f[s],
        enumerable: !0
    });
}, D = (o, f, s, y)=>{
    if (f && typeof f == "object" || typeof f == "function") for (let m of ue(f))!le.call(o, m) && m !== s && H(o, m, {
        get: ()=>f[m],
        enumerable: !(y = ae(f, m)) || y.enumerable
    });
    return o;
}, S = (o, f, s)=>(D(o, f, "default"), s && D(s, f, "default")), G = (o, f, s)=>(s = o != null ? oe(se(o)) : {}, D(f || !o || !o.__esModule ? H(s, "default", {
        value: o,
        enumerable: !0
    }) : s, o)), de = (o)=>D(H({}, "__esModule", {
        value: !0
    }), o);
var N = z((h)=>{
    "use strict";
    (function() {
        "use strict";
        var o = Symbol.for("react.forward_ref"), f = Symbol.for("react.memo"), s = typeof WeakMap == "function" ? WeakMap : Map, y = new Map, m = new s, b = new s, j = new s, E = [], C = new Map, O = new Map, p = new Set, _ = new Set, F = typeof WeakMap == "function" ? new WeakMap : null, T = !1;
        function B(e) {
            if (e.fullKey !== null) return e.fullKey;
            var r = e.ownKey, n;
            try {
                n = e.getCustomHooks();
            } catch (i) {
                return e.forceReset = !0, e.fullKey = r, r;
            }
            for(var t = 0; t < n.length; t++){
                var l = n[t];
                if (typeof l != "function") return e.forceReset = !0, e.fullKey = r, r;
                var d = b.get(l);
                if (d !== void 0) {
                    var a = B(d);
                    d.forceReset && (e.forceReset = !0), r += `
---
` + a;
                }
            }
            return e.fullKey = r, r;
        }
        function q(e, r) {
            var n = b.get(e), t = b.get(r);
            return n === void 0 && t === void 0 ? !0 : !(n === void 0 || t === void 0 || B(n) !== B(t) || t.forceReset);
        }
        function $(e) {
            return e.prototype && e.prototype.isReactComponent;
        }
        function k(e, r) {
            return $(e) || $(r) ? !1 : !!q(e, r);
        }
        function Y(e) {
            return j.get(e);
        }
        function Z(e) {
            var r = new Map;
            return e.forEach(function(n, t) {
                r.set(t, n);
            }), r;
        }
        function W(e) {
            var r = new Set;
            return e.forEach(function(n) {
                r.add(n);
            }), r;
        }
        function M(e, r) {
            try {
                return e[r];
            } catch (n) {
                return;
            }
        }
        function J() {
            if (E.length === 0 || T) return null;
            T = !0;
            try {
                var e = new Set, r = new Set, n = E;
                E = [], n.forEach(function(u) {
                    var c = u[0], v = u[1], R = c.current;
                    j.set(R, c), j.set(v, c), c.current = v, k(R, v) ? r.add(c) : e.add(c);
                });
                var t = {
                    updatedFamilies: r,
                    staleFamilies: e
                };
                C.forEach(function(u) {
                    u.setRefreshHandler(Y);
                });
                var l = !1, d = null, a = W(_), i = W(p), g = Z(O);
                if (a.forEach(function(u) {
                    var c = g.get(u);
                    if (c === void 0) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                    if (_.has(u), F !== null && F.has(u)) {
                        var v = F.get(u);
                        try {
                            c.scheduleRoot(u, v);
                        } catch (R) {
                            l || (l = !0, d = R);
                        }
                    }
                }), i.forEach(function(u) {
                    var c = g.get(u);
                    if (c === void 0) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                    p.has(u);
                    try {
                        c.scheduleRefresh(u, t);
                    } catch (v) {
                        l || (l = !0, d = v);
                    }
                }), l) throw d;
                return t;
            } finally{
                T = !1;
            }
        }
        function P(e, r) {
            if (e === null || typeof e != "function" && typeof e != "object" || m.has(e)) return;
            var n = y.get(r);
            if (n === void 0 ? (n = {
                current: e
            }, y.set(r, n)) : E.push([
                n,
                e
            ]), m.set(e, n), typeof e == "object" && e !== null) switch(M(e, "$$typeof")){
                case o:
                    P(e.render, r + "$render");
                    break;
                case f:
                    P(e.type, r + "$type");
                    break;
            }
        }
        function K(e, r) {
            var n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, t = arguments.length > 3 ? arguments[3] : void 0;
            if (b.has(e) || b.set(e, {
                forceReset: n,
                ownKey: r,
                fullKey: null,
                getCustomHooks: t || function() {
                    return [];
                }
            }), typeof e == "object" && e !== null) switch(M(e, "$$typeof")){
                case o:
                    K(e.render, r, n, t);
                    break;
                case f:
                    K(e.type, r, n, t);
                    break;
            }
        }
        function x(e) {
            var r = b.get(e);
            r !== void 0 && B(r);
        }
        function Q(e) {
            return y.get(e);
        }
        function X(e) {
            return m.get(e);
        }
        function ee(e) {
            var r = new Set;
            return p.forEach(function(n) {
                var t = O.get(n);
                if (t === void 0) throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");
                var l = t.findHostInstancesForRefresh(n, e);
                l.forEach(function(d) {
                    r.add(d);
                });
            }), r;
        }
        function re(e) {
            var r = e.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (r === void 0) {
                var n = 0;
                e.__REACT_DEVTOOLS_GLOBAL_HOOK__ = r = {
                    renderers: new Map,
                    supportsFiber: !0,
                    inject: function(a) {
                        return n++;
                    },
                    onScheduleFiberRoot: function(a, i, g) {},
                    onCommitFiberRoot: function(a, i, g, u) {},
                    onCommitFiberUnmount: function() {}
                };
            }
            if (r.isDisabled) {
                console.warn("Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). Fast Refresh is not compatible with this shim and will be disabled.");
                return;
            }
            var t = r.inject;
            r.inject = function(a) {
                var i = t.apply(this, arguments);
                return typeof a.scheduleRefresh == "function" && typeof a.setRefreshHandler == "function" && C.set(i, a), i;
            }, r.renderers.forEach(function(a, i) {
                typeof a.scheduleRefresh == "function" && typeof a.setRefreshHandler == "function" && C.set(i, a);
            });
            var l = r.onCommitFiberRoot, d = r.onScheduleFiberRoot || function() {};
            r.onScheduleFiberRoot = function(a, i, g) {
                return T || (_.delete(i), F !== null && F.set(i, g)), d.apply(this, arguments);
            }, r.onCommitFiberRoot = function(a, i, g, u) {
                var c = C.get(a);
                if (c !== void 0) {
                    O.set(i, c);
                    var v = i.current, R = v.alternate;
                    if (R !== null) {
                        var L = R.memoizedState != null && R.memoizedState.element != null && p.has(i), A = v.memoizedState != null && v.memoizedState.element != null;
                        !L && A ? (p.add(i), _.delete(i)) : L && A || (L && !A ? (p.delete(i), u ? _.add(i) : O.delete(i)) : !L && !A && u && _.add(i));
                    } else p.add(i);
                }
                return l.apply(this, arguments);
            };
        }
        function ne() {
            return !1;
        }
        function te() {
            return p.size;
        }
        function fe() {
            var e, r, n = !1;
            return function(t, l, d, a) {
                if (typeof l == "string") return e || (e = t, r = typeof a == "function"), t != null && (typeof t == "function" || typeof t == "object") && K(t, l, d, a), t;
                !n && r && (n = !0, x(e));
            };
        }
        function ie(e) {
            switch(typeof e){
                case "function":
                    if (e.prototype != null) {
                        if (e.prototype.isReactComponent) return !0;
                        var r = Object.getOwnPropertyNames(e.prototype);
                        if (r.length > 1 || r[0] !== "constructor" || e.prototype.__proto__ !== Object.prototype) return !1;
                    }
                    var n = e.name || e.displayName;
                    return typeof n == "string" && /^[A-Z]/.test(n);
                case "object":
                    if (e != null) switch(M(e, "$$typeof")){
                        case o:
                        case f:
                            return !0;
                        default:
                            return !1;
                    }
                    return !1;
                default:
                    return !1;
            }
        }
        h._getMountedRootCount = te, h.collectCustomHooksForSignature = x, h.createSignatureFunctionForTransform = fe, h.findAffectedHostInstances = ee, h.getFamilyByID = Q, h.getFamilyByType = X, h.hasUnrecoverableErrors = ne, h.injectIntoGlobalHook = re, h.isLikelyComponentType = ie, h.performReactRefresh = J, h.register = P, h.setSignature = K;
    })();
});
var I = z((pe, V)=>{
    "use strict";
    V.exports = N();
});
var w = {};
ce(w, {
    default: ()=>he
});
module.exports = de(w);
var U = G(I());
S(w, G(I()), module.exports);
var he = U.default; /*! Bundled license information:

react-refresh/cjs/react-refresh-runtime.development.js:
  (**
   * @license React
   * react-refresh-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/ 

},{}],"4z694":[function(require,module,exports) {
// @ts-nocheck
var _indexVue = require("../../src/popup/index.vue");
var _vue = require("vue");
document.addEventListener("DOMContentLoaded", ()=>{
    const app = (0, _vue.createApp)(_indexVue.default);
    _indexVue.default.prepare?.(app);
    app.mount("#__plasmo");
});

},{"../../src/popup/index.vue":"jY233","vue":"dmrjI"}],"jY233":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("ae9ad3f225a03b1a");
    if (script.__esModule) script = script.default;
    script.render = require("1b0cf815a8ca2a28").render;
    require("a6ace6381171abbb").default(script);
    script.__scopeId = "data-v-fa6ae5";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/popup/index.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "fa6ae5-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("fa6ae5-hmr", script)) __VUE_HMR_RUNTIME__.reload("fa6ae5-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"ae9ad3f225a03b1a":"Lvm87","1b0cf815a8ca2a28":"3xB5O","a6ace6381171abbb":"jRlsO","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"Lvm87":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _featureFlagsConfig = require("@/featureFlagsConfig");
var _vue = require("vue");
var _pinia = require("pinia");
var _i18N = require("@/utils/i18n");
var _store = require("@/stores/store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _webpilotPopupVue = require("./componetns/WebpilotPopup.vue");
var _webpilotPopupVueDefault = parcelHelpers.interopDefault(_webpilotPopupVue);
var _themeBootstrapCss = require("vue-toast-notification/dist/theme-bootstrap.css");
exports.default = {
    __name: "index",
    setup (__props, { expose: __expose  }) {
        __expose();
        const app = (0, _vue.createApp)((0, _webpilotPopupVueDefault.default));
        const pinia = (0, _pinia.createPinia)();
        app.use(pinia);
        app.use((0, _i18N.i18nPlugin));
        const soterConfig = (0, _storeDefault.default)();
        soterConfig.initConfig().then(()=>{
            app.mount("#webpilot-popup-page");
        });
        const __returned__ = {
            app,
            pinia,
            soterConfig,
            createApp: (0, _vue.createApp),
            get createPinia () {
                return 0, _pinia.createPinia;
            },
            get i18nPlugin () {
                return 0, _i18N.i18nPlugin;
            },
            get useStore () {
                return 0, _storeDefault.default;
            },
            WebpilotPopup: (0, _webpilotPopupVueDefault.default)
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"@/featureFlagsConfig":"aoOIz","vue":"dmrjI","pinia":"afUQj","@/utils/i18n":"6q3A1","@/stores/store":"6gHZ2","./componetns/WebpilotPopup.vue":"3fjDl","vue-toast-notification/dist/theme-bootstrap.css":"hJnhS","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"aoOIz":[function(require,module,exports) {
// Hardcode to disable the extisions warning
globalThis.__VUE_OPTIONS_API__ = false;
globalThis.__VUE_PROD_DEVTOOLS__ = false;

},{}],"dmrjI":[function(require,module,exports) {
/**
* vue v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "compile", ()=>compile);
var _runtimeDom = require("@vue/runtime-dom");
parcelHelpers.exportAll(_runtimeDom, exports);
function initDev() {
    (0, _runtimeDom.initCustomFormatter)();
}
initDev();
const compile = ()=>{
    (0, _runtimeDom.warn)(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
};

},{"@vue/runtime-dom":"illZR","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"illZR":[function(require,module,exports) {
/**
* @vue/runtime-dom v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition);
parcelHelpers.export(exports, "TransitionGroup", ()=>TransitionGroup);
parcelHelpers.export(exports, "VueElement", ()=>VueElement);
parcelHelpers.export(exports, "createApp", ()=>createApp);
parcelHelpers.export(exports, "createSSRApp", ()=>createSSRApp);
parcelHelpers.export(exports, "defineCustomElement", ()=>defineCustomElement);
parcelHelpers.export(exports, "defineSSRCustomElement", ()=>defineSSRCustomElement);
parcelHelpers.export(exports, "hydrate", ()=>hydrate);
parcelHelpers.export(exports, "initDirectivesForSSR", ()=>initDirectivesForSSR);
parcelHelpers.export(exports, "render", ()=>render);
parcelHelpers.export(exports, "useCssModule", ()=>useCssModule);
parcelHelpers.export(exports, "useCssVars", ()=>useCssVars);
parcelHelpers.export(exports, "useHost", ()=>useHost);
parcelHelpers.export(exports, "useShadowRoot", ()=>useShadowRoot);
parcelHelpers.export(exports, "vModelCheckbox", ()=>vModelCheckbox);
parcelHelpers.export(exports, "vModelDynamic", ()=>vModelDynamic);
parcelHelpers.export(exports, "vModelRadio", ()=>vModelRadio);
parcelHelpers.export(exports, "vModelSelect", ()=>vModelSelect);
parcelHelpers.export(exports, "vModelText", ()=>vModelText);
parcelHelpers.export(exports, "vShow", ()=>vShow);
parcelHelpers.export(exports, "withKeys", ()=>withKeys);
parcelHelpers.export(exports, "withModifiers", ()=>withModifiers);
var _runtimeCore = require("@vue/runtime-core");
parcelHelpers.exportAll(_runtimeCore, exports);
var _shared = require("@vue/shared");
let policy = void 0;
const tt = typeof window !== "undefined" && window.trustedTypes;
if (tt) try {
    policy = /* @__PURE__ */ tt.createPolicy("vue", {
        createHTML: (val)=>val
    });
} catch (e) {
    (0, _runtimeCore.warn)(`Error creating trusted types policy: ${e}`);
}
const unsafeToTrustedHTML = policy ? (val)=>policy.createHTML(val) : (val)=>val;
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
    insert: (child, parent, anchor)=>{
        parent.insertBefore(child, anchor || null);
    },
    remove: (child)=>{
        const parent = child.parentNode;
        if (parent) parent.removeChild(child);
    },
    createElement: (tag, namespace, is, props)=>{
        const el = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, {
            is
        }) : doc.createElement(tag);
        if (tag === "select" && props && props.multiple != null) el.setAttribute("multiple", props.multiple);
        return el;
    },
    createText: (text)=>doc.createTextNode(text),
    createComment: (text)=>doc.createComment(text),
    setText: (node, text)=>{
        node.nodeValue = text;
    },
    setElementText: (el, text)=>{
        el.textContent = text;
    },
    parentNode: (node)=>node.parentNode,
    nextSibling: (node)=>node.nextSibling,
    querySelector: (selector)=>doc.querySelector(selector),
    setScopeId (el, id) {
        el.setAttribute(id, "");
    },
    // __UNSAFE__
    // Reason: innerHTML.
    // Static content here can only come from compiled templates.
    // As long as the user only uses trusted templates, this is safe.
    insertStaticContent (content, parent, anchor, namespace, start, end) {
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        if (start && (start === end || start.nextSibling)) while(true){
            parent.insertBefore(start.cloneNode(true), anchor);
            if (start === end || !(start = start.nextSibling)) break;
        }
        else {
            templateContainer.innerHTML = unsafeToTrustedHTML(namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content);
            const template = templateContainer.content;
            if (namespace === "svg" || namespace === "mathml") {
                const wrapper = template.firstChild;
                while(wrapper.firstChild)template.appendChild(wrapper.firstChild);
                template.removeChild(wrapper);
            }
            parent.insertBefore(template, anchor);
        }
        return [
            // first
            before ? before.nextSibling : parent.firstChild,
            // last
            anchor ? anchor.previousSibling : parent.lastChild
        ];
    }
};
const TRANSITION = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const DOMTransitionPropsValidators = {
    name: String,
    type: String,
    css: {
        type: Boolean,
        default: true
    },
    duration: [
        String,
        Number,
        Object
    ],
    enterFromClass: String,
    enterActiveClass: String,
    enterToClass: String,
    appearFromClass: String,
    appearActiveClass: String,
    appearToClass: String,
    leaveFromClass: String,
    leaveActiveClass: String,
    leaveToClass: String
};
const TransitionPropsValidators = /* @__PURE__ */ (0, _shared.extend)({}, (0, _runtimeCore.BaseTransitionPropsValidators), DOMTransitionPropsValidators);
const decorate$1 = (t)=>{
    t.displayName = "Transition";
    t.props = TransitionPropsValidators;
    return t;
};
const Transition = /* @__PURE__ */ decorate$1((props, { slots  })=>(0, _runtimeCore.h)((0, _runtimeCore.BaseTransition), resolveTransitionProps(props), slots));
const callHook = (hook, args = [])=>{
    if ((0, _shared.isArray)(hook)) hook.forEach((h2)=>h2(...args));
    else if (hook) hook(...args);
};
const hasExplicitCallback = (hook)=>{
    return hook ? (0, _shared.isArray)(hook) ? hook.some((h2)=>h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
    const baseProps = {};
    for(const key in rawProps)if (!(key in DOMTransitionPropsValidators)) baseProps[key] = rawProps[key];
    if (rawProps.css === false) return baseProps;
    const { name ="v" , type , duration , enterFromClass =`${name}-enter-from` , enterActiveClass =`${name}-enter-active` , enterToClass =`${name}-enter-to` , appearFromClass =enterFromClass , appearActiveClass =enterActiveClass , appearToClass =enterToClass , leaveFromClass =`${name}-leave-from` , leaveActiveClass =`${name}-leave-active` , leaveToClass =`${name}-leave-to`  } = rawProps;
    const durations = normalizeDuration(duration);
    const enterDuration = durations && durations[0];
    const leaveDuration = durations && durations[1];
    const { onBeforeEnter , onEnter , onEnterCancelled , onLeave , onLeaveCancelled , onBeforeAppear =onBeforeEnter , onAppear =onEnter , onAppearCancelled =onEnterCancelled  } = baseProps;
    const finishEnter = (el, isAppear, done, isCancelled)=>{
        el._enterCancelled = isCancelled;
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
    };
    const finishLeave = (el, done)=>{
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
    };
    const makeEnterHook = (isAppear)=>{
        return (el, done)=>{
            const hook = isAppear ? onAppear : onEnter;
            const resolve = ()=>finishEnter(el, isAppear, done);
            callHook(hook, [
                el,
                resolve
            ]);
            nextFrame(()=>{
                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
                addTransitionClass(el, isAppear ? appearToClass : enterToClass);
                if (!hasExplicitCallback(hook)) whenTransitionEnds(el, type, enterDuration, resolve);
            });
        };
    };
    return (0, _shared.extend)(baseProps, {
        onBeforeEnter (el) {
            callHook(onBeforeEnter, [
                el
            ]);
            addTransitionClass(el, enterFromClass);
            addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear (el) {
            callHook(onBeforeAppear, [
                el
            ]);
            addTransitionClass(el, appearFromClass);
            addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave (el, done) {
            el._isLeaving = true;
            const resolve = ()=>finishLeave(el, done);
            addTransitionClass(el, leaveFromClass);
            if (!el._enterCancelled) {
                forceReflow();
                addTransitionClass(el, leaveActiveClass);
            } else {
                addTransitionClass(el, leaveActiveClass);
                forceReflow();
            }
            nextFrame(()=>{
                if (!el._isLeaving) return;
                removeTransitionClass(el, leaveFromClass);
                addTransitionClass(el, leaveToClass);
                if (!hasExplicitCallback(onLeave)) whenTransitionEnds(el, type, leaveDuration, resolve);
            });
            callHook(onLeave, [
                el,
                resolve
            ]);
        },
        onEnterCancelled (el) {
            finishEnter(el, false, void 0, true);
            callHook(onEnterCancelled, [
                el
            ]);
        },
        onAppearCancelled (el) {
            finishEnter(el, true, void 0, true);
            callHook(onAppearCancelled, [
                el
            ]);
        },
        onLeaveCancelled (el) {
            finishLeave(el);
            callHook(onLeaveCancelled, [
                el
            ]);
        }
    });
}
function normalizeDuration(duration) {
    if (duration == null) return null;
    else if ((0, _shared.isObject)(duration)) return [
        NumberOf(duration.enter),
        NumberOf(duration.leave)
    ];
    else {
        const n = NumberOf(duration);
        return [
            n,
            n
        ];
    }
}
function NumberOf(val) {
    const res = (0, _shared.toNumber)(val);
    (0, _runtimeCore.assertNumber)(res, "<transition> explicit duration");
    return res;
}
function addTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.add(c));
    (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
    cls.split(/\s+/).forEach((c)=>c && el.classList.remove(c));
    const _vtc = el[vtcKey];
    if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) el[vtcKey] = void 0;
    }
}
function nextFrame(cb) {
    requestAnimationFrame(()=>{
        requestAnimationFrame(cb);
    });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
    const id = el._endId = ++endId;
    const resolveIfNotStale = ()=>{
        if (id === el._endId) resolve();
    };
    if (explicitTimeout != null) return setTimeout(resolveIfNotStale, explicitTimeout);
    const { type , timeout , propCount  } = getTransitionInfo(el, expectedType);
    if (!type) return resolve();
    const endEvent = type + "end";
    let ended = 0;
    const end = ()=>{
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
    };
    const onEnd = (e)=>{
        if (e.target === el && ++ended >= propCount) end();
    };
    setTimeout(()=>{
        if (ended < propCount) end();
    }, timeout + 1);
    el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
    const styles = window.getComputedStyle(el);
    const getStyleProperties = (key)=>(styles[key] || "").split(", ");
    const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
    const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
    const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
    const animationTimeout = getTimeout(animationDelays, animationDurations);
    let type = null;
    let timeout = 0;
    let propCount = 0;
    if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
            type = TRANSITION;
            timeout = transitionTimeout;
            propCount = transitionDurations.length;
        }
    } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
            type = ANIMATION;
            timeout = animationTimeout;
            propCount = animationDurations.length;
        }
    } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(getStyleProperties(`${TRANSITION}Property`).toString());
    return {
        type,
        timeout,
        propCount,
        hasTransform
    };
}
function getTimeout(delays, durations) {
    while(delays.length < durations.length)delays = delays.concat(delays);
    return Math.max(...durations.map((d, i)=>toMs(d) + toMs(delays[i])));
}
function toMs(s) {
    if (s === "auto") return 0;
    return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
    return document.body.offsetHeight;
}
function patchClass(el, value, isSVG) {
    const transitionClasses = el[vtcKey];
    if (transitionClasses) value = (value ? [
        value,
        ...transitionClasses
    ] : [
        ...transitionClasses
    ]).join(" ");
    if (value == null) el.removeAttribute("class");
    else if (isSVG) el.setAttribute("class", value);
    else el.className = value;
}
const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const vShow = {
    beforeMount (el, { value  }, { transition  }) {
        el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) transition.beforeEnter(el);
        else setDisplay(el, value);
    },
    mounted (el, { value  }, { transition  }) {
        if (transition && value) transition.enter(el);
    },
    updated (el, { value , oldValue  }, { transition  }) {
        if (!value === !oldValue) return;
        if (transition) {
            if (value) {
                transition.beforeEnter(el);
                setDisplay(el, true);
                transition.enter(el);
            } else transition.leave(el, ()=>{
                setDisplay(el, false);
            });
        } else setDisplay(el, value);
    },
    beforeUnmount (el, { value  }) {
        setDisplay(el, value);
    }
};
vShow.name = "show";
function setDisplay(el, value) {
    el.style.display = value ? el[vShowOriginalDisplay] : "none";
    el[vShowHidden] = !value;
}
function initVShowForSSR() {
    vShow.getSSRProps = ({ value  })=>{
        if (!value) return {
            style: {
                display: "none"
            }
        };
    };
}
const CSS_VAR_TEXT = Symbol("CSS_VAR_TEXT");
function useCssVars(getter) {
    const instance = (0, _runtimeCore.getCurrentInstance)();
    if (!instance) {
        (0, _runtimeCore.warn)(`useCssVars is called without current active component instance.`);
        return;
    }
    const updateTeleports = instance.ut = (vars = getter(instance.proxy))=>{
        Array.from(document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)).forEach((node)=>setVarsOnNode(node, vars));
    };
    instance.getCssVars = ()=>getter(instance.proxy);
    const setVars = ()=>{
        const vars = getter(instance.proxy);
        if (instance.ce) setVarsOnNode(instance.ce, vars);
        else setVarsOnVNode(instance.subTree, vars);
        updateTeleports(vars);
    };
    (0, _runtimeCore.onBeforeUpdate)(()=>{
        (0, _runtimeCore.queuePostFlushCb)(setVars);
    });
    (0, _runtimeCore.onMounted)(()=>{
        (0, _runtimeCore.watch)(setVars, (0, _shared.NOOP), {
            flush: "post"
        });
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, {
            childList: true
        });
        (0, _runtimeCore.onUnmounted)(()=>ob.disconnect());
    });
}
function setVarsOnVNode(vnode, vars) {
    if (vnode.shapeFlag & 128) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) suspense.effects.push(()=>{
            setVarsOnVNode(suspense.activeBranch, vars);
        });
    }
    while(vnode.component)vnode = vnode.component.subTree;
    if (vnode.shapeFlag & 1 && vnode.el) setVarsOnNode(vnode.el, vars);
    else if (vnode.type === (0, _runtimeCore.Fragment)) vnode.children.forEach((c)=>setVarsOnVNode(c, vars));
    else if (vnode.type === (0, _runtimeCore.Static)) {
        let { el , anchor  } = vnode;
        while(el){
            setVarsOnNode(el, vars);
            if (el === anchor) break;
            el = el.nextSibling;
        }
    }
}
function setVarsOnNode(el, vars) {
    if (el.nodeType === 1) {
        const style = el.style;
        let cssText = "";
        for(const key in vars){
            style.setProperty(`--${key}`, vars[key]);
            cssText += `--${key}: ${vars[key]};`;
        }
        style[CSS_VAR_TEXT] = cssText;
    }
}
const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el, prev, next) {
    const style = el.style;
    const isCssString = (0, _shared.isString)(next);
    let hasControlledDisplay = false;
    if (next && !isCssString) {
        if (prev) {
            if (!(0, _shared.isString)(prev)) {
                for(const key in prev)if (next[key] == null) setStyle(style, key, "");
            } else for (const prevStyle of prev.split(";")){
                const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
                if (next[key] == null) setStyle(style, key, "");
            }
        }
        for(const key in next){
            if (key === "display") hasControlledDisplay = true;
            setStyle(style, key, next[key]);
        }
    } else {
        if (isCssString) {
            if (prev !== next) {
                const cssVarText = style[CSS_VAR_TEXT];
                if (cssVarText) next += ";" + cssVarText;
                style.cssText = next;
                hasControlledDisplay = displayRE.test(next);
            }
        } else if (prev) el.removeAttribute("style");
    }
    if (vShowOriginalDisplay in el) {
        el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
        if (el[vShowHidden]) style.display = "none";
    }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
    if ((0, _shared.isArray)(val)) val.forEach((v)=>setStyle(style, name, v));
    else {
        if (val == null) val = "";
        if (semicolonRE.test(val)) (0, _runtimeCore.warn)(`Unexpected semicolon at the end of '${name}' style value: '${val}'`);
        if (name.startsWith("--")) style.setProperty(name, val);
        else {
            const prefixed = autoPrefix(style, name);
            if (importantRE.test(val)) style.setProperty((0, _shared.hyphenate)(prefixed), val.replace(importantRE, ""), "important");
            else style[prefixed] = val;
        }
    }
}
const prefixes = [
    "Webkit",
    "Moz",
    "ms"
];
const prefixCache = {};
function autoPrefix(style, rawName) {
    const cached = prefixCache[rawName];
    if (cached) return cached;
    let name = (0, _runtimeCore.camelize)(rawName);
    if (name !== "filter" && name in style) return prefixCache[rawName] = name;
    name = (0, _shared.capitalize)(name);
    for(let i = 0; i < prefixes.length; i++){
        const prefixed = prefixes[i] + name;
        if (prefixed in style) return prefixCache[rawName] = prefixed;
    }
    return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance, isBoolean = (0, _shared.isSpecialBooleanAttr)(key)) {
    if (isSVG && key.startsWith("xlink:")) {
        if (value == null) el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        else el.setAttributeNS(xlinkNS, key, value);
    } else if (value == null || isBoolean && !(0, _shared.includeBooleanAttr)(value)) el.removeAttribute(key);
    else el.setAttribute(key, isBoolean ? "" : (0, _shared.isSymbol)(value) ? String(value) : value);
}
function patchDOMProp(el, key, value, parentComponent, attrName) {
    if (key === "innerHTML" || key === "textContent") {
        if (value != null) el[key] = key === "innerHTML" ? unsafeToTrustedHTML(value) : value;
        return;
    }
    const tag = el.tagName;
    if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
    !tag.includes("-")) {
        const oldValue = tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
        const newValue = value == null ? // #11647: value should be set as empty string for null and undefined,
        // but <input type="checkbox"> should be set as 'on'.
        el.type === "checkbox" ? "on" : "" : String(value);
        if (oldValue !== newValue || !("_value" in el)) el.value = newValue;
        if (value == null) el.removeAttribute(key);
        el._value = value;
        return;
    }
    let needRemove = false;
    if (value === "" || value == null) {
        const type = typeof el[key];
        if (type === "boolean") value = (0, _shared.includeBooleanAttr)(value);
        else if (value == null && type === "string") {
            value = "";
            needRemove = true;
        } else if (type === "number") {
            value = 0;
            needRemove = true;
        }
    }
    try {
        el[key] = value;
    } catch (e) {
        if (!needRemove) (0, _runtimeCore.warn)(`Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`, e);
    }
    needRemove && el.removeAttribute(attrName || key);
}
function addEventListener(el, event, handler, options) {
    el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
    el.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
    const invokers = el[veiKey] || (el[veiKey] = {});
    const existingInvoker = invokers[rawName];
    if (nextValue && existingInvoker) existingInvoker.value = sanitizeEventValue(nextValue, rawName);
    else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
            const invoker = invokers[rawName] = createInvoker(sanitizeEventValue(nextValue, rawName), instance);
            addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
            removeEventListener(el, name, existingInvoker, options);
            invokers[rawName] = void 0;
        }
    }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
    let options;
    if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while(m = name.match(optionsModifierRE)){
            name = name.slice(0, name.length - m[0].length);
            options[m[0].toLowerCase()] = true;
        }
    }
    const event = name[2] === ":" ? name.slice(3) : (0, _shared.hyphenate)(name.slice(2));
    return [
        event,
        options
    ];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = ()=>cachedNow || (p.then(()=>cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
    const invoker = (e)=>{
        if (!e._vts) e._vts = Date.now();
        else if (e._vts <= invoker.attached) return;
        (0, _runtimeCore.callWithAsyncErrorHandling)(patchStopImmediatePropagation(e, invoker.value), instance, 5, [
            e
        ]);
    };
    invoker.value = initialValue;
    invoker.attached = getNow();
    return invoker;
}
function sanitizeEventValue(value, propName) {
    if ((0, _shared.isFunction)(value) || (0, _shared.isArray)(value)) return value;
    (0, _runtimeCore.warn)(`Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`);
    return 0, _shared.NOOP;
}
function patchStopImmediatePropagation(e, value) {
    if ((0, _shared.isArray)(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = ()=>{
            originalStop.call(e);
            e._stopped = true;
        };
        return value.map((fn)=>(e2)=>!e2._stopped && fn && fn(e2));
    } else return value;
}
const isNativeOn = (key)=>key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
    key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el, key, prevValue, nextValue, namespace, parentComponent)=>{
    const isSVG = namespace === "svg";
    if (key === "class") patchClass(el, nextValue, isSVG);
    else if (key === "style") patchStyle(el, prevValue, nextValue);
    else if ((0, _shared.isOn)(key)) {
        if (!(0, _shared.isModelListener)(key)) patchEvent(el, key, prevValue, nextValue, parentComponent);
    } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue);
        if (!el.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) patchAttr(el, key, nextValue, isSVG, parentComponent, key !== "value");
    } else if (// #11081 force set props for possible async custom element
    el._isVueCE && (/[A-Z]/.test(key) || !(0, _shared.isString)(nextValue))) patchDOMProp(el, (0, _shared.camelize)(key), nextValue, parentComponent, key);
    else {
        if (key === "true-value") el._trueValue = nextValue;
        else if (key === "false-value") el._falseValue = nextValue;
        patchAttr(el, key, nextValue, isSVG);
    }
};
function shouldSetAsProp(el, key, value, isSVG) {
    if (isSVG) {
        if (key === "innerHTML" || key === "textContent") return true;
        if (key in el && isNativeOn(key) && (0, _shared.isFunction)(value)) return true;
        return false;
    }
    if (key === "spellcheck" || key === "draggable" || key === "translate" || key === "autocorrect") return false;
    if (key === "form") return false;
    if (key === "list" && el.tagName === "INPUT") return false;
    if (key === "type" && el.tagName === "TEXTAREA") return false;
    if (key === "width" || key === "height") {
        const tag = el.tagName;
        if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") return false;
    }
    if (isNativeOn(key) && (0, _shared.isString)(value)) return false;
    return key in el;
}
const REMOVAL = {};
/*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
function defineCustomElement(options, extraOptions, _createApp) {
    const Comp = (0, _runtimeCore.defineComponent)(options, extraOptions);
    if ((0, _shared.isPlainObject)(Comp)) (0, _shared.extend)(Comp, extraOptions);
    class VueCustomElement extends VueElement {
        constructor(initialProps){
            super(Comp, initialProps, _createApp);
        }
    }
    VueCustomElement.def = Comp;
    return VueCustomElement;
}
/*! #__NO_SIDE_EFFECTS__ */ const defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */ (options, extraOptions)=>{
    return /* @__PURE__ */ defineCustomElement(options, extraOptions, createSSRApp);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
    constructor(_def, _props = {}, _createApp = createApp){
        super();
        this._def = _def;
        this._props = _props;
        this._createApp = _createApp;
        this._isVueCE = true;
        /**
     * @internal
     */ this._instance = null;
        /**
     * @internal
     */ this._app = null;
        /**
     * @internal
     */ this._nonce = this._def.nonce;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        this._styleChildren = /* @__PURE__ */ new WeakSet();
        this._ob = null;
        if (this.shadowRoot && _createApp !== createApp) this._root = this.shadowRoot;
        else {
            if (0, this.shadowRoot) (0, _runtimeCore.warn)(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`);
            if (_def.shadowRoot !== false) {
                this.attachShadow({
                    mode: "open"
                });
                this._root = this.shadowRoot;
            } else this._root = this;
        }
    }
    connectedCallback() {
        if (!this.isConnected) return;
        if (!this.shadowRoot && !this._resolved) this._parseSlots();
        this._connected = true;
        let parent = this;
        while(parent = parent && (parent.parentNode || parent.host))if (parent instanceof VueElement) {
            this._parent = parent;
            break;
        }
        if (!this._instance) {
            if (this._resolved) this._mount(this._def);
            else if (parent && parent._pendingResolve) this._pendingResolve = parent._pendingResolve.then(()=>{
                this._pendingResolve = void 0;
                this._resolveDef();
            });
            else this._resolveDef();
        }
    }
    _setParent(parent = this._parent) {
        if (parent) {
            this._instance.parent = parent._instance;
            this._inheritParentContext(parent);
        }
    }
    _inheritParentContext(parent = this._parent) {
        if (parent && this._app) Object.setPrototypeOf(this._app._context.provides, parent._instance.provides);
    }
    disconnectedCallback() {
        this._connected = false;
        (0, _runtimeCore.nextTick)(()=>{
            if (!this._connected) {
                if (this._ob) {
                    this._ob.disconnect();
                    this._ob = null;
                }
                this._app && this._app.unmount();
                if (this._instance) this._instance.ce = void 0;
                this._app = this._instance = null;
            }
        });
    }
    /**
   * resolve inner component definition (handle possible async component)
   */ _resolveDef() {
        if (this._pendingResolve) return;
        for(let i = 0; i < this.attributes.length; i++)this._setAttr(this.attributes[i].name);
        this._ob = new MutationObserver((mutations)=>{
            for (const m of mutations)this._setAttr(m.attributeName);
        });
        this._ob.observe(this, {
            attributes: true
        });
        const resolve = (def, isAsync = false)=>{
            this._resolved = true;
            this._pendingResolve = void 0;
            const { props , styles  } = def;
            let numberProps;
            if (props && !(0, _shared.isArray)(props)) for(const key in props){
                const opt = props[key];
                if (opt === Number || opt && opt.type === Number) {
                    if (key in this._props) this._props[key] = (0, _shared.toNumber)(this._props[key]);
                    (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[(0, _shared.camelize)(key)] = true;
                }
            }
            this._numberProps = numberProps;
            this._resolveProps(def);
            if (this.shadowRoot) this._applyStyles(styles);
            else if (styles) (0, _runtimeCore.warn)("Custom element style injection is not supported when using shadowRoot: false");
            this._mount(def);
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) this._pendingResolve = asyncDef().then((def)=>resolve(this._def = def, true));
        else resolve(this._def);
    }
    _mount(def) {
        if (!def.name) def.name = "VueElement";
        this._app = this._createApp(def);
        this._inheritParentContext();
        if (def.configureApp) def.configureApp(this._app);
        this._app._ceVNode = this._createVNode();
        this._app.mount(this._root);
        const exposed = this._instance && this._instance.exposed;
        if (!exposed) return;
        for(const key in exposed)if (!(0, _shared.hasOwn)(this, key)) Object.defineProperty(this, key, {
            // unwrap ref to be consistent with public instance behavior
            get: ()=>(0, _runtimeCore.unref)(exposed[key])
        });
        else (0, _runtimeCore.warn)(`Exposed property "${key}" already exists on custom element.`);
    }
    _resolveProps(def) {
        const { props  } = def;
        const declaredPropKeys = (0, _shared.isArray)(props) ? props : Object.keys(props || {});
        for (const key of Object.keys(this))if (key[0] !== "_" && declaredPropKeys.includes(key)) this._setProp(key, this[key]);
        for (const key of declaredPropKeys.map((0, _shared.camelize)))Object.defineProperty(this, key, {
            get () {
                return this._getProp(key);
            },
            set (val) {
                this._setProp(key, val, true, true);
            }
        });
    }
    _setAttr(key) {
        if (key.startsWith("data-v-")) return;
        const has = this.hasAttribute(key);
        let value = has ? this.getAttribute(key) : REMOVAL;
        const camelKey = (0, _shared.camelize)(key);
        if (has && this._numberProps && this._numberProps[camelKey]) value = (0, _shared.toNumber)(value);
        this._setProp(camelKey, value, false, true);
    }
    /**
   * @internal
   */ _getProp(key) {
        return this._props[key];
    }
    /**
   * @internal
   */ _setProp(key, val, shouldReflect = true, shouldUpdate = false) {
        if (val !== this._props[key]) {
            if (val === REMOVAL) delete this._props[key];
            else {
                this._props[key] = val;
                if (key === "key" && this._app) this._app._ceVNode.key = val;
            }
            if (shouldUpdate && this._instance) this._update();
            if (shouldReflect) {
                const ob = this._ob;
                ob && ob.disconnect();
                if (val === true) this.setAttribute((0, _shared.hyphenate)(key), "");
                else if (typeof val === "string" || typeof val === "number") this.setAttribute((0, _shared.hyphenate)(key), val + "");
                else if (!val) this.removeAttribute((0, _shared.hyphenate)(key));
                ob && ob.observe(this, {
                    attributes: true
                });
            }
        }
    }
    _update() {
        const vnode = this._createVNode();
        if (this._app) vnode.appContext = this._app._context;
        render(vnode, this._root);
    }
    _createVNode() {
        const baseProps = {};
        if (!this.shadowRoot) baseProps.onVnodeMounted = baseProps.onVnodeUpdated = this._renderSlots.bind(this);
        const vnode = (0, _runtimeCore.createVNode)(this._def, (0, _shared.extend)(baseProps, this._props));
        if (!this._instance) vnode.ce = (instance)=>{
            this._instance = instance;
            instance.ce = this;
            instance.isCE = true;
            instance.ceReload = (newStyles)=>{
                if (this._styles) {
                    this._styles.forEach((s)=>this._root.removeChild(s));
                    this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                this._instance = null;
                this._update();
            };
            const dispatch = (event, args)=>{
                this.dispatchEvent(new CustomEvent(event, (0, _shared.isPlainObject)(args[0]) ? (0, _shared.extend)({
                    detail: args
                }, args[0]) : {
                    detail: args
                }));
            };
            instance.emit = (event, ...args)=>{
                dispatch(event, args);
                if ((0, _shared.hyphenate)(event) !== event) dispatch((0, _shared.hyphenate)(event), args);
            };
            this._setParent();
        };
        return vnode;
    }
    _applyStyles(styles, owner) {
        if (!styles) return;
        if (owner) {
            if (owner === this._def || this._styleChildren.has(owner)) return;
            this._styleChildren.add(owner);
        }
        const nonce = this._nonce;
        for(let i = styles.length - 1; i >= 0; i--){
            const s = document.createElement("style");
            if (nonce) s.setAttribute("nonce", nonce);
            s.textContent = styles[i];
            this.shadowRoot.prepend(s);
            if (owner) {
                if (owner.__hmrId) {
                    if (!this._childStyles) this._childStyles = /* @__PURE__ */ new Map();
                    let entry = this._childStyles.get(owner.__hmrId);
                    if (!entry) this._childStyles.set(owner.__hmrId, entry = []);
                    entry.push(s);
                }
            } else (this._styles || (this._styles = [])).push(s);
        }
    }
    /**
   * Only called when shadowRoot is false
   */ _parseSlots() {
        const slots = this._slots = {};
        let n;
        while(n = this.firstChild){
            const slotName = n.nodeType === 1 && n.getAttribute("slot") || "default";
            (slots[slotName] || (slots[slotName] = [])).push(n);
            this.removeChild(n);
        }
    }
    /**
   * Only called when shadowRoot is false
   */ _renderSlots() {
        const outlets = (this._teleportTarget || this).querySelectorAll("slot");
        const scopeId = this._instance.type.__scopeId;
        for(let i = 0; i < outlets.length; i++){
            const o = outlets[i];
            const slotName = o.getAttribute("name") || "default";
            const content = this._slots[slotName];
            const parent = o.parentNode;
            if (content) for (const n of content){
                if (scopeId && n.nodeType === 1) {
                    const id = scopeId + "-s";
                    const walker = document.createTreeWalker(n, 1);
                    n.setAttribute(id, "");
                    let child;
                    while(child = walker.nextNode())child.setAttribute(id, "");
                }
                parent.insertBefore(n, o);
            }
            else while(o.firstChild)parent.insertBefore(o.firstChild, o);
            parent.removeChild(o);
        }
    }
    /**
   * @internal
   */ _injectChildStyle(comp) {
        this._applyStyles(comp.styles, comp);
    }
    /**
   * @internal
   */ _removeChildStyle(comp) {
        this._styleChildren.delete(comp);
        if (this._childStyles && comp.__hmrId) {
            const oldStyles = this._childStyles.get(comp.__hmrId);
            if (oldStyles) {
                oldStyles.forEach((s)=>this._root.removeChild(s));
                oldStyles.length = 0;
            }
        }
    }
}
function useHost(caller) {
    const instance = (0, _runtimeCore.getCurrentInstance)();
    const el = instance && instance.ce;
    if (el) return el;
    else if (true) {
        if (!instance) (0, _runtimeCore.warn)(`${caller || "useHost"} called without an active component instance.`);
        else (0, _runtimeCore.warn)(`${caller || "useHost"} can only be used in components defined via defineCustomElement.`);
    }
    return null;
}
function useShadowRoot() {
    const el = useHost("useShadowRoot");
    return el && el.shadowRoot;
}
function useCssModule(name = "$style") {
    {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        if (!instance) {
            (0, _runtimeCore.warn)(`useCssModule must be called inside setup()`);
            return 0, _shared.EMPTY_OBJ;
        }
        const modules = instance.type.__cssModules;
        if (!modules) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS modules injected.`);
            return 0, _shared.EMPTY_OBJ;
        }
        const mod = modules[name];
        if (!mod) {
            (0, _runtimeCore.warn)(`Current instance does not have CSS module named "${name}".`);
            return 0, _shared.EMPTY_OBJ;
        }
        return mod;
    }
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey = Symbol("_enterCb");
const decorate = (t)=>{
    delete t.props.mode;
    return t;
};
const TransitionGroupImpl = /* @__PURE__ */ decorate({
    name: "TransitionGroup",
    props: /* @__PURE__ */ (0, _shared.extend)({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
    }),
    setup (props, { slots  }) {
        const instance = (0, _runtimeCore.getCurrentInstance)();
        const state = (0, _runtimeCore.useTransitionState)();
        let prevChildren;
        let children;
        (0, _runtimeCore.onUpdated)(()=>{
            if (!prevChildren.length) return;
            const moveClass = props.moveClass || `${props.name || "v"}-move`;
            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
                prevChildren = [];
                return;
            }
            prevChildren.forEach(callPendingCbs);
            prevChildren.forEach(recordPosition);
            const movedChildren = prevChildren.filter(applyTranslation);
            forceReflow();
            movedChildren.forEach((c)=>{
                const el = c.el;
                const style = el.style;
                addTransitionClass(el, moveClass);
                style.transform = style.webkitTransform = style.transitionDuration = "";
                const cb = el[moveCbKey] = (e)=>{
                    if (e && e.target !== el) return;
                    if (!e || /transform$/.test(e.propertyName)) {
                        el.removeEventListener("transitionend", cb);
                        el[moveCbKey] = null;
                        removeTransitionClass(el, moveClass);
                    }
                };
                el.addEventListener("transitionend", cb);
            });
            prevChildren = [];
        });
        return ()=>{
            const rawProps = (0, _runtimeCore.toRaw)(props);
            const cssTransitionProps = resolveTransitionProps(rawProps);
            let tag = rawProps.tag || (0, _runtimeCore.Fragment);
            prevChildren = [];
            if (children) for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.el && child.el instanceof Element) {
                    prevChildren.push(child);
                    (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                    positionMap.set(child, child.el.getBoundingClientRect());
                }
            }
            children = slots.default ? (0, _runtimeCore.getTransitionRawChildren)(slots.default()) : [];
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                if (child.key != null) (0, _runtimeCore.setTransitionHooks)(child, (0, _runtimeCore.resolveTransitionHooks)(child, cssTransitionProps, state, instance));
                else if (child.type !== (0, _runtimeCore.Text)) (0, _runtimeCore.warn)(`<TransitionGroup> children must be keyed.`);
            }
            return (0, _runtimeCore.createVNode)(tag, null, children);
        };
    }
});
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
    const el = c.el;
    if (el[moveCbKey]) el[moveCbKey]();
    if (el[enterCbKey]) el[enterCbKey]();
}
function recordPosition(c) {
    newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
    const oldPos = positionMap.get(c);
    const newPos = newPositionMap.get(c);
    const dx = oldPos.left - newPos.left;
    const dy = oldPos.top - newPos.top;
    if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = "0s";
        return c;
    }
}
function hasCSSTransform(el, root, moveClass) {
    const clone = el.cloneNode();
    const _vtc = el[vtcKey];
    if (_vtc) _vtc.forEach((cls)=>{
        cls.split(/\s+/).forEach((c)=>c && clone.classList.remove(c));
    });
    moveClass.split(/\s+/).forEach((c)=>c && clone.classList.add(c));
    clone.style.display = "none";
    const container = root.nodeType === 1 ? root : root.parentNode;
    container.appendChild(clone);
    const { hasTransform  } = getTransitionInfo(clone);
    container.removeChild(clone);
    return hasTransform;
}
const getModelAssigner = (vnode)=>{
    const fn = vnode.props["onUpdate:modelValue"] || false;
    return (0, _shared.isArray)(fn) ? (value)=>(0, _shared.invokeArrayFns)(fn, value) : fn;
};
function onCompositionStart(e) {
    e.target.composing = true;
}
function onCompositionEnd(e) {
    const target = e.target;
    if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event("input"));
    }
}
const assignKey = Symbol("_assign");
const vModelText = {
    created (el, { modifiers: { lazy , trim , number  }  }, vnode) {
        el[assignKey] = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e)=>{
            if (e.target.composing) return;
            let domValue = el.value;
            if (trim) domValue = domValue.trim();
            if (castToNumber) domValue = (0, _shared.looseToNumber)(domValue);
            el[assignKey](domValue);
        });
        if (trim) addEventListener(el, "change", ()=>{
            el.value = el.value.trim();
        });
        if (!lazy) {
            addEventListener(el, "compositionstart", onCompositionStart);
            addEventListener(el, "compositionend", onCompositionEnd);
            addEventListener(el, "change", onCompositionEnd);
        }
    },
    // set value on mounted so it's after min/max for type="range"
    mounted (el, { value  }) {
        el.value = value == null ? "" : value;
    },
    beforeUpdate (el, { value , oldValue , modifiers: { lazy , trim , number  }  }, vnode) {
        el[assignKey] = getModelAssigner(vnode);
        if (el.composing) return;
        const elValue = (number || el.type === "number") && !/^0\d/.test(el.value) ? (0, _shared.looseToNumber)(el.value) : el.value;
        const newValue = value == null ? "" : value;
        if (elValue === newValue) return;
        if (document.activeElement === el && el.type !== "range") {
            if (lazy && value === oldValue) return;
            if (trim && el.value.trim() === newValue) return;
        }
        el.value = newValue;
    }
};
const vModelCheckbox = {
    // #4096 array checkboxes need to be deep traversed
    deep: true,
    created (el, _, vnode) {
        el[assignKey] = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            const modelValue = el._modelValue;
            const elementValue = getValue(el);
            const checked = el.checked;
            const assign = el[assignKey];
            if ((0, _shared.isArray)(modelValue)) {
                const index = (0, _shared.looseIndexOf)(modelValue, elementValue);
                const found = index !== -1;
                if (checked && !found) assign(modelValue.concat(elementValue));
                else if (!checked && found) {
                    const filtered = [
                        ...modelValue
                    ];
                    filtered.splice(index, 1);
                    assign(filtered);
                }
            } else if ((0, _shared.isSet)(modelValue)) {
                const cloned = new Set(modelValue);
                if (checked) cloned.add(elementValue);
                else cloned.delete(elementValue);
                assign(cloned);
            } else assign(getCheckboxValue(el, checked));
        });
    },
    // set initial checked on mount to wait for true-value/false-value
    mounted: setChecked,
    beforeUpdate (el, binding, vnode) {
        el[assignKey] = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
    }
};
function setChecked(el, { value , oldValue  }, vnode) {
    el._modelValue = value;
    let checked;
    if ((0, _shared.isArray)(value)) checked = (0, _shared.looseIndexOf)(value, vnode.props.value) > -1;
    else if ((0, _shared.isSet)(value)) checked = value.has(vnode.props.value);
    else {
        if (value === oldValue) return;
        checked = (0, _shared.looseEqual)(value, getCheckboxValue(el, true));
    }
    if (el.checked !== checked) el.checked = checked;
}
const vModelRadio = {
    created (el, { value  }, vnode) {
        el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
        el[assignKey] = getModelAssigner(vnode);
        addEventListener(el, "change", ()=>{
            el[assignKey](getValue(el));
        });
    },
    beforeUpdate (el, { value , oldValue  }, vnode) {
        el[assignKey] = getModelAssigner(vnode);
        if (value !== oldValue) el.checked = (0, _shared.looseEqual)(value, vnode.props.value);
    }
};
const vModelSelect = {
    // <select multiple> value need to be deep traversed
    deep: true,
    created (el, { value , modifiers: { number  }  }, vnode) {
        const isSetModel = (0, _shared.isSet)(value);
        addEventListener(el, "change", ()=>{
            const selectedVal = Array.prototype.filter.call(el.options, (o)=>o.selected).map((o)=>number ? (0, _shared.looseToNumber)(getValue(o)) : getValue(o));
            el[assignKey](el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
            el._assigning = true;
            (0, _runtimeCore.nextTick)(()=>{
                el._assigning = false;
            });
        });
        el[assignKey] = getModelAssigner(vnode);
    },
    // set value in mounted & updated because <select> relies on its children
    // <option>s.
    mounted (el, { value  }) {
        setSelected(el, value);
    },
    beforeUpdate (el, _binding, vnode) {
        el[assignKey] = getModelAssigner(vnode);
    },
    updated (el, { value  }) {
        if (!el._assigning) setSelected(el, value);
    }
};
function setSelected(el, value) {
    const isMultiple = el.multiple;
    const isArrayValue = (0, _shared.isArray)(value);
    if (isMultiple && !isArrayValue && !(0, _shared.isSet)(value)) {
        (0, _runtimeCore.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
    }
    for(let i = 0, l = el.options.length; i < l; i++){
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
            if (isArrayValue) {
                const optionType = typeof optionValue;
                if (optionType === "string" || optionType === "number") option.selected = value.some((v)=>String(v) === String(optionValue));
                else option.selected = (0, _shared.looseIndexOf)(value, optionValue) > -1;
            } else option.selected = value.has(optionValue);
        } else if ((0, _shared.looseEqual)(getValue(option), value)) {
            if (el.selectedIndex !== i) el.selectedIndex = i;
            return;
        }
    }
    if (!isMultiple && el.selectedIndex !== -1) el.selectedIndex = -1;
}
function getValue(el) {
    return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
    const key = checked ? "_trueValue" : "_falseValue";
    return key in el ? el[key] : checked;
}
const vModelDynamic = {
    created (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "created");
    },
    mounted (el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "mounted");
    },
    beforeUpdate (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
    },
    updated (el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "updated");
    }
};
function resolveDynamicModel(tagName, type) {
    switch(tagName){
        case "SELECT":
            return vModelSelect;
        case "TEXTAREA":
            return vModelText;
        default:
            switch(type){
                case "checkbox":
                    return vModelCheckbox;
                case "radio":
                    return vModelRadio;
                default:
                    return vModelText;
            }
    }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
    const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
    const fn = modelToUse[hook];
    fn && fn(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
    vModelText.getSSRProps = ({ value  })=>({
            value
        });
    vModelRadio.getSSRProps = ({ value  }, vnode)=>{
        if (vnode.props && (0, _shared.looseEqual)(vnode.props.value, value)) return {
            checked: true
        };
    };
    vModelCheckbox.getSSRProps = ({ value  }, vnode)=>{
        if ((0, _shared.isArray)(value)) {
            if (vnode.props && (0, _shared.looseIndexOf)(value, vnode.props.value) > -1) return {
                checked: true
            };
        } else if ((0, _shared.isSet)(value)) {
            if (vnode.props && value.has(vnode.props.value)) return {
                checked: true
            };
        } else if (value) return {
            checked: true
        };
    };
    vModelDynamic.getSSRProps = (binding, vnode)=>{
        if (typeof vnode.type !== "string") return;
        const modelToUse = resolveDynamicModel(// resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
        vnode.type.toUpperCase(), vnode.props && vnode.props.type);
        if (modelToUse.getSSRProps) return modelToUse.getSSRProps(binding, vnode);
    };
}
const systemModifiers = [
    "ctrl",
    "shift",
    "alt",
    "meta"
];
const modifierGuards = {
    stop: (e)=>e.stopPropagation(),
    prevent: (e)=>e.preventDefault(),
    self: (e)=>e.target !== e.currentTarget,
    ctrl: (e)=>!e.ctrlKey,
    shift: (e)=>!e.shiftKey,
    alt: (e)=>!e.altKey,
    meta: (e)=>!e.metaKey,
    left: (e)=>"button" in e && e.button !== 0,
    middle: (e)=>"button" in e && e.button !== 1,
    right: (e)=>"button" in e && e.button !== 2,
    exact: (e, modifiers)=>systemModifiers.some((m)=>e[`${m}Key`] && !modifiers.includes(m))
};
const withModifiers = (fn, modifiers)=>{
    const cache = fn._withMods || (fn._withMods = {});
    const cacheKey = modifiers.join(".");
    return cache[cacheKey] || (cache[cacheKey] = (event, ...args)=>{
        for(let i = 0; i < modifiers.length; i++){
            const guard = modifierGuards[modifiers[i]];
            if (guard && guard(event, modifiers)) return;
        }
        return fn(event, ...args);
    });
};
const keyNames = {
    esc: "escape",
    space: " ",
    up: "arrow-up",
    left: "arrow-left",
    right: "arrow-right",
    down: "arrow-down",
    delete: "backspace"
};
const withKeys = (fn, modifiers)=>{
    const cache = fn._withKeys || (fn._withKeys = {});
    const cacheKey = modifiers.join(".");
    return cache[cacheKey] || (cache[cacheKey] = (event)=>{
        if (!("key" in event)) return;
        const eventKey = (0, _shared.hyphenate)(event.key);
        if (modifiers.some((k)=>k === eventKey || keyNames[k] === eventKey)) return fn(event);
    });
};
const rendererOptions = /* @__PURE__ */ (0, _shared.extend)({
    patchProp
}, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
    return renderer || (renderer = (0, _runtimeCore.createRenderer)(rendererOptions));
}
function ensureHydrationRenderer() {
    renderer = enabledHydration ? renderer : (0, _runtimeCore.createHydrationRenderer)(rendererOptions);
    enabledHydration = true;
    return renderer;
}
const render = (...args)=>{
    ensureRenderer().render(...args);
};
const hydrate = (...args)=>{
    ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args)=>{
    const app = ensureRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (!container) return;
        const component = app._component;
        if (!(0, _shared.isFunction)(component) && !component.render && !component.template) component.template = container.innerHTML;
        if (container.nodeType === 1) container.textContent = "";
        const proxy = mount(container, false, resolveRootNamespace(container));
        if (container instanceof Element) {
            container.removeAttribute("v-cloak");
            container.setAttribute("data-v-app", "");
        }
        return proxy;
    };
    return app;
};
const createSSRApp = (...args)=>{
    const app = ensureHydrationRenderer().createApp(...args);
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
    const { mount  } = app;
    app.mount = (containerOrSelector)=>{
        const container = normalizeContainer(containerOrSelector);
        if (container) return mount(container, true, resolveRootNamespace(container));
    };
    return app;
};
function resolveRootNamespace(container) {
    if (container instanceof SVGElement) return "svg";
    if (typeof MathMLElement === "function" && container instanceof MathMLElement) return "mathml";
}
function injectNativeTagCheck(app) {
    Object.defineProperty(app.config, "isNativeTag", {
        value: (tag)=>(0, _shared.isHTMLTag)(tag) || (0, _shared.isSVGTag)(tag) || (0, _shared.isMathMLTag)(tag),
        writable: false
    });
}
function injectCompilerOptionsCheck(app) {
    if ((0, _runtimeCore.isRuntimeOnly)()) {
        const isCustomElement = app.config.isCustomElement;
        Object.defineProperty(app.config, "isCustomElement", {
            get () {
                return isCustomElement;
            },
            set () {
                (0, _runtimeCore.warn)(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
            }
        });
        const compilerOptions = app.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
        Object.defineProperty(app.config, "compilerOptions", {
            get () {
                (0, _runtimeCore.warn)(msg);
                return compilerOptions;
            },
            set () {
                (0, _runtimeCore.warn)(msg);
            }
        });
    }
}
function normalizeContainer(container) {
    if ((0, _shared.isString)(container)) {
        const res = document.querySelector(container);
        if (!res) (0, _runtimeCore.warn)(`Failed to mount app: mount target selector "${container}" returned null.`);
        return res;
    }
    if ((0, window.ShadowRoot) && container instanceof window.ShadowRoot && container.mode === "closed") (0, _runtimeCore.warn)(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
    return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = ()=>{
    if (!ssrDirectiveInitialized) {
        ssrDirectiveInitialized = true;
        initVModelForSSR();
        initVShowForSSR();
    }
};

},{"@vue/runtime-core":"6EA3u","@vue/shared":"din1v","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6EA3u":[function(require,module,exports) {
/**
* @vue/runtime-core v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EffectScope", ()=>(0, _reactivity.EffectScope));
parcelHelpers.export(exports, "ReactiveEffect", ()=>(0, _reactivity.ReactiveEffect));
parcelHelpers.export(exports, "TrackOpTypes", ()=>(0, _reactivity.TrackOpTypes));
parcelHelpers.export(exports, "TriggerOpTypes", ()=>(0, _reactivity.TriggerOpTypes));
parcelHelpers.export(exports, "customRef", ()=>(0, _reactivity.customRef));
parcelHelpers.export(exports, "effect", ()=>(0, _reactivity.effect));
parcelHelpers.export(exports, "effectScope", ()=>(0, _reactivity.effectScope));
parcelHelpers.export(exports, "getCurrentScope", ()=>(0, _reactivity.getCurrentScope));
parcelHelpers.export(exports, "getCurrentWatcher", ()=>(0, _reactivity.getCurrentWatcher));
parcelHelpers.export(exports, "isProxy", ()=>(0, _reactivity.isProxy));
parcelHelpers.export(exports, "isReactive", ()=>(0, _reactivity.isReactive));
parcelHelpers.export(exports, "isReadonly", ()=>(0, _reactivity.isReadonly));
parcelHelpers.export(exports, "isRef", ()=>(0, _reactivity.isRef));
parcelHelpers.export(exports, "isShallow", ()=>(0, _reactivity.isShallow));
parcelHelpers.export(exports, "markRaw", ()=>(0, _reactivity.markRaw));
parcelHelpers.export(exports, "onScopeDispose", ()=>(0, _reactivity.onScopeDispose));
parcelHelpers.export(exports, "onWatcherCleanup", ()=>(0, _reactivity.onWatcherCleanup));
parcelHelpers.export(exports, "proxyRefs", ()=>(0, _reactivity.proxyRefs));
parcelHelpers.export(exports, "reactive", ()=>(0, _reactivity.reactive));
parcelHelpers.export(exports, "readonly", ()=>(0, _reactivity.readonly));
parcelHelpers.export(exports, "ref", ()=>(0, _reactivity.ref));
parcelHelpers.export(exports, "shallowReactive", ()=>(0, _reactivity.shallowReactive));
parcelHelpers.export(exports, "shallowReadonly", ()=>(0, _reactivity.shallowReadonly));
parcelHelpers.export(exports, "shallowRef", ()=>(0, _reactivity.shallowRef));
parcelHelpers.export(exports, "stop", ()=>(0, _reactivity.stop));
parcelHelpers.export(exports, "toRaw", ()=>(0, _reactivity.toRaw));
parcelHelpers.export(exports, "toRef", ()=>(0, _reactivity.toRef));
parcelHelpers.export(exports, "toRefs", ()=>(0, _reactivity.toRefs));
parcelHelpers.export(exports, "toValue", ()=>(0, _reactivity.toValue));
parcelHelpers.export(exports, "triggerRef", ()=>(0, _reactivity.triggerRef));
parcelHelpers.export(exports, "unref", ()=>(0, _reactivity.unref));
parcelHelpers.export(exports, "camelize", ()=>(0, _shared.camelize));
parcelHelpers.export(exports, "capitalize", ()=>(0, _shared.capitalize));
parcelHelpers.export(exports, "normalizeClass", ()=>(0, _shared.normalizeClass));
parcelHelpers.export(exports, "normalizeProps", ()=>(0, _shared.normalizeProps));
parcelHelpers.export(exports, "normalizeStyle", ()=>(0, _shared.normalizeStyle));
parcelHelpers.export(exports, "toDisplayString", ()=>(0, _shared.toDisplayString));
parcelHelpers.export(exports, "toHandlerKey", ()=>(0, _shared.toHandlerKey));
parcelHelpers.export(exports, "BaseTransition", ()=>BaseTransition);
parcelHelpers.export(exports, "BaseTransitionPropsValidators", ()=>BaseTransitionPropsValidators);
parcelHelpers.export(exports, "Comment", ()=>Comment);
parcelHelpers.export(exports, "DeprecationTypes", ()=>DeprecationTypes);
parcelHelpers.export(exports, "ErrorCodes", ()=>ErrorCodes);
parcelHelpers.export(exports, "ErrorTypeStrings", ()=>ErrorTypeStrings);
parcelHelpers.export(exports, "Fragment", ()=>Fragment);
parcelHelpers.export(exports, "KeepAlive", ()=>KeepAlive);
parcelHelpers.export(exports, "Static", ()=>Static);
parcelHelpers.export(exports, "Suspense", ()=>Suspense);
parcelHelpers.export(exports, "Teleport", ()=>Teleport);
parcelHelpers.export(exports, "Text", ()=>Text);
parcelHelpers.export(exports, "assertNumber", ()=>assertNumber);
parcelHelpers.export(exports, "callWithAsyncErrorHandling", ()=>callWithAsyncErrorHandling);
parcelHelpers.export(exports, "callWithErrorHandling", ()=>callWithErrorHandling);
parcelHelpers.export(exports, "cloneVNode", ()=>cloneVNode);
parcelHelpers.export(exports, "compatUtils", ()=>compatUtils);
parcelHelpers.export(exports, "computed", ()=>computed);
parcelHelpers.export(exports, "createBlock", ()=>createBlock);
parcelHelpers.export(exports, "createCommentVNode", ()=>createCommentVNode);
parcelHelpers.export(exports, "createElementBlock", ()=>createElementBlock);
parcelHelpers.export(exports, "createElementVNode", ()=>createBaseVNode);
parcelHelpers.export(exports, "createHydrationRenderer", ()=>createHydrationRenderer);
parcelHelpers.export(exports, "createPropsRestProxy", ()=>createPropsRestProxy);
parcelHelpers.export(exports, "createRenderer", ()=>createRenderer);
parcelHelpers.export(exports, "createSlots", ()=>createSlots);
parcelHelpers.export(exports, "createStaticVNode", ()=>createStaticVNode);
parcelHelpers.export(exports, "createTextVNode", ()=>createTextVNode);
parcelHelpers.export(exports, "createVNode", ()=>createVNode);
parcelHelpers.export(exports, "defineAsyncComponent", ()=>defineAsyncComponent);
parcelHelpers.export(exports, "defineComponent", ()=>defineComponent);
parcelHelpers.export(exports, "defineEmits", ()=>defineEmits);
parcelHelpers.export(exports, "defineExpose", ()=>defineExpose);
parcelHelpers.export(exports, "defineModel", ()=>defineModel);
parcelHelpers.export(exports, "defineOptions", ()=>defineOptions);
parcelHelpers.export(exports, "defineProps", ()=>defineProps);
parcelHelpers.export(exports, "defineSlots", ()=>defineSlots);
parcelHelpers.export(exports, "devtools", ()=>devtools);
parcelHelpers.export(exports, "getCurrentInstance", ()=>getCurrentInstance);
parcelHelpers.export(exports, "getTransitionRawChildren", ()=>getTransitionRawChildren);
parcelHelpers.export(exports, "guardReactiveProps", ()=>guardReactiveProps);
parcelHelpers.export(exports, "h", ()=>h);
parcelHelpers.export(exports, "handleError", ()=>handleError);
parcelHelpers.export(exports, "hasInjectionContext", ()=>hasInjectionContext);
parcelHelpers.export(exports, "hydrateOnIdle", ()=>hydrateOnIdle);
parcelHelpers.export(exports, "hydrateOnInteraction", ()=>hydrateOnInteraction);
parcelHelpers.export(exports, "hydrateOnMediaQuery", ()=>hydrateOnMediaQuery);
parcelHelpers.export(exports, "hydrateOnVisible", ()=>hydrateOnVisible);
parcelHelpers.export(exports, "initCustomFormatter", ()=>initCustomFormatter);
parcelHelpers.export(exports, "inject", ()=>inject);
parcelHelpers.export(exports, "isMemoSame", ()=>isMemoSame);
parcelHelpers.export(exports, "isRuntimeOnly", ()=>isRuntimeOnly);
parcelHelpers.export(exports, "isVNode", ()=>isVNode);
parcelHelpers.export(exports, "mergeDefaults", ()=>mergeDefaults);
parcelHelpers.export(exports, "mergeModels", ()=>mergeModels);
parcelHelpers.export(exports, "mergeProps", ()=>mergeProps);
parcelHelpers.export(exports, "nextTick", ()=>nextTick);
parcelHelpers.export(exports, "onActivated", ()=>onActivated);
parcelHelpers.export(exports, "onBeforeMount", ()=>onBeforeMount);
parcelHelpers.export(exports, "onBeforeUnmount", ()=>onBeforeUnmount);
parcelHelpers.export(exports, "onBeforeUpdate", ()=>onBeforeUpdate);
parcelHelpers.export(exports, "onDeactivated", ()=>onDeactivated);
parcelHelpers.export(exports, "onErrorCaptured", ()=>onErrorCaptured);
parcelHelpers.export(exports, "onMounted", ()=>onMounted);
parcelHelpers.export(exports, "onRenderTracked", ()=>onRenderTracked);
parcelHelpers.export(exports, "onRenderTriggered", ()=>onRenderTriggered);
parcelHelpers.export(exports, "onServerPrefetch", ()=>onServerPrefetch);
parcelHelpers.export(exports, "onUnmounted", ()=>onUnmounted);
parcelHelpers.export(exports, "onUpdated", ()=>onUpdated);
parcelHelpers.export(exports, "openBlock", ()=>openBlock);
parcelHelpers.export(exports, "popScopeId", ()=>popScopeId);
parcelHelpers.export(exports, "provide", ()=>provide);
parcelHelpers.export(exports, "pushScopeId", ()=>pushScopeId);
parcelHelpers.export(exports, "queuePostFlushCb", ()=>queuePostFlushCb);
parcelHelpers.export(exports, "registerRuntimeCompiler", ()=>registerRuntimeCompiler);
parcelHelpers.export(exports, "renderList", ()=>renderList);
parcelHelpers.export(exports, "renderSlot", ()=>renderSlot);
parcelHelpers.export(exports, "resolveComponent", ()=>resolveComponent);
parcelHelpers.export(exports, "resolveDirective", ()=>resolveDirective);
parcelHelpers.export(exports, "resolveDynamicComponent", ()=>resolveDynamicComponent);
parcelHelpers.export(exports, "resolveFilter", ()=>resolveFilter);
parcelHelpers.export(exports, "resolveTransitionHooks", ()=>resolveTransitionHooks);
parcelHelpers.export(exports, "setBlockTracking", ()=>setBlockTracking);
parcelHelpers.export(exports, "setDevtoolsHook", ()=>setDevtoolsHook);
parcelHelpers.export(exports, "setTransitionHooks", ()=>setTransitionHooks);
parcelHelpers.export(exports, "ssrContextKey", ()=>ssrContextKey);
parcelHelpers.export(exports, "ssrUtils", ()=>ssrUtils);
parcelHelpers.export(exports, "toHandlers", ()=>toHandlers);
parcelHelpers.export(exports, "transformVNodeArgs", ()=>transformVNodeArgs);
parcelHelpers.export(exports, "useAttrs", ()=>useAttrs);
parcelHelpers.export(exports, "useId", ()=>useId);
parcelHelpers.export(exports, "useModel", ()=>useModel);
parcelHelpers.export(exports, "useSSRContext", ()=>useSSRContext);
parcelHelpers.export(exports, "useSlots", ()=>useSlots);
parcelHelpers.export(exports, "useTemplateRef", ()=>useTemplateRef);
parcelHelpers.export(exports, "useTransitionState", ()=>useTransitionState);
parcelHelpers.export(exports, "version", ()=>version);
parcelHelpers.export(exports, "warn", ()=>warn);
parcelHelpers.export(exports, "watch", ()=>watch);
parcelHelpers.export(exports, "watchEffect", ()=>watchEffect);
parcelHelpers.export(exports, "watchPostEffect", ()=>watchPostEffect);
parcelHelpers.export(exports, "watchSyncEffect", ()=>watchSyncEffect);
parcelHelpers.export(exports, "withAsyncContext", ()=>withAsyncContext);
parcelHelpers.export(exports, "withCtx", ()=>withCtx);
parcelHelpers.export(exports, "withDefaults", ()=>withDefaults);
parcelHelpers.export(exports, "withDirectives", ()=>withDirectives);
parcelHelpers.export(exports, "withMemo", ()=>withMemo);
parcelHelpers.export(exports, "withScopeId", ()=>withScopeId);
var _reactivity = require("@vue/reactivity");
var _shared = require("@vue/shared");
const stack = [];
function pushWarningContext(vnode) {
    stack.push(vnode);
}
function popWarningContext() {
    stack.pop();
}
let isWarning = false;
function warn$1(msg, ...args) {
    if (isWarning) return;
    isWarning = true;
    (0, _reactivity.pauseTracking)();
    const instance = stack.length ? stack[stack.length - 1].component : null;
    const appWarnHandler = instance && instance.appContext.config.warnHandler;
    const trace = getComponentTrace();
    if (appWarnHandler) callWithErrorHandling(appWarnHandler, instance, 11, [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a)=>{
            var _a, _b;
            return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
        }).join(""),
        instance && instance.proxy,
        trace.map(({ vnode  })=>`at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
        trace
    ]);
    else {
        const warnArgs = [
            `[Vue warn]: ${msg}`,
            ...args
        ];
        if (trace.length && // avoid spamming console during tests
        true) warnArgs.push(`
`, ...formatTrace(trace));
        console.warn(...warnArgs);
    }
    (0, _reactivity.resetTracking)();
    isWarning = false;
}
function getComponentTrace() {
    let currentVNode = stack[stack.length - 1];
    if (!currentVNode) return [];
    const normalizedStack = [];
    while(currentVNode){
        const last = normalizedStack[0];
        if (last && last.vnode === currentVNode) last.recurseCount++;
        else normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
        });
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
    }
    return normalizedStack;
}
function formatTrace(trace) {
    const logs = [];
    trace.forEach((entry, i)=>{
        logs.push(...i === 0 ? [] : [
            `
`
        ], ...formatTraceEntry(entry));
    });
    return logs;
}
function formatTraceEntry({ vnode , recurseCount  }) {
    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
    const isRoot = vnode.component ? vnode.component.parent == null : false;
    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
    const close = `>` + postfix;
    return vnode.props ? [
        open,
        ...formatProps(vnode.props),
        close
    ] : [
        open + close
    ];
}
function formatProps(props) {
    const res = [];
    const keys = Object.keys(props);
    keys.slice(0, 3).forEach((key)=>{
        res.push(...formatProp(key, props[key]));
    });
    if (keys.length > 3) res.push(` ...`);
    return res;
}
function formatProp(key, value, raw) {
    if ((0, _shared.isString)(value)) {
        value = JSON.stringify(value);
        return raw ? value : [
            `${key}=${value}`
        ];
    } else if (typeof value === "number" || typeof value === "boolean" || value == null) return raw ? value : [
        `${key}=${value}`
    ];
    else if ((0, _reactivity.isRef)(value)) {
        value = formatProp(key, (0, _reactivity.toRaw)(value.value), true);
        return raw ? value : [
            `${key}=Ref<`,
            value,
            `>`
        ];
    } else if ((0, _shared.isFunction)(value)) return [
        `${key}=fn${value.name ? `<${value.name}>` : ``}`
    ];
    else {
        value = (0, _reactivity.toRaw)(value);
        return raw ? value : [
            `${key}=`,
            value
        ];
    }
}
function assertNumber(val, type) {
    if (val === void 0) return;
    else if (typeof val !== "number") warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
    else if (isNaN(val)) warn$1(`${type} is NaN - the duration expression might be incorrect.`);
}
const ErrorCodes = {
    "SETUP_FUNCTION": 0,
    "0": "SETUP_FUNCTION",
    "RENDER_FUNCTION": 1,
    "1": "RENDER_FUNCTION",
    "NATIVE_EVENT_HANDLER": 5,
    "5": "NATIVE_EVENT_HANDLER",
    "COMPONENT_EVENT_HANDLER": 6,
    "6": "COMPONENT_EVENT_HANDLER",
    "VNODE_HOOK": 7,
    "7": "VNODE_HOOK",
    "DIRECTIVE_HOOK": 8,
    "8": "DIRECTIVE_HOOK",
    "TRANSITION_HOOK": 9,
    "9": "TRANSITION_HOOK",
    "APP_ERROR_HANDLER": 10,
    "10": "APP_ERROR_HANDLER",
    "APP_WARN_HANDLER": 11,
    "11": "APP_WARN_HANDLER",
    "FUNCTION_REF": 12,
    "12": "FUNCTION_REF",
    "ASYNC_COMPONENT_LOADER": 13,
    "13": "ASYNC_COMPONENT_LOADER",
    "SCHEDULER": 14,
    "14": "SCHEDULER",
    "COMPONENT_UPDATE": 15,
    "15": "COMPONENT_UPDATE",
    "APP_UNMOUNT_CLEANUP": 16,
    "16": "APP_UNMOUNT_CLEANUP"
};
const ErrorTypeStrings$1 = {
    ["sp"]: "serverPrefetch hook",
    ["bc"]: "beforeCreate hook",
    ["c"]: "created hook",
    ["bm"]: "beforeMount hook",
    ["m"]: "mounted hook",
    ["bu"]: "beforeUpdate hook",
    ["u"]: "updated",
    ["bum"]: "beforeUnmount hook",
    ["um"]: "unmounted hook",
    ["a"]: "activated hook",
    ["da"]: "deactivated hook",
    ["ec"]: "errorCaptured hook",
    ["rtc"]: "renderTracked hook",
    ["rtg"]: "renderTriggered hook",
    [0]: "setup function",
    [1]: "render function",
    [2]: "watcher getter",
    [3]: "watcher callback",
    [4]: "watcher cleanup function",
    [5]: "native event handler",
    [6]: "component event handler",
    [7]: "vnode hook",
    [8]: "directive hook",
    [9]: "transition hook",
    [10]: "app errorHandler",
    [11]: "app warnHandler",
    [12]: "ref function",
    [13]: "async component loader",
    [14]: "scheduler flush",
    [15]: "component update",
    [16]: "app unmount cleanup function"
};
function callWithErrorHandling(fn, instance, type, args) {
    try {
        return args ? fn(...args) : fn();
    } catch (err) {
        handleError(err, instance, type);
    }
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
    if ((0, _shared.isFunction)(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && (0, _shared.isPromise)(res)) res.catch((err)=>{
            handleError(err, instance, type);
        });
        return res;
    }
    if ((0, _shared.isArray)(fn)) {
        const values = [];
        for(let i = 0; i < fn.length; i++)values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
        return values;
    } else warn$1(`Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`);
}
function handleError(err, instance, type, throwInDev = true) {
    const contextVNode = instance ? instance.vnode : null;
    const { errorHandler , throwUnhandledErrorInProduction  } = instance && instance.appContext.config || (0, _shared.EMPTY_OBJ);
    if (instance) {
        let cur = instance.parent;
        const exposedInstance = instance.proxy;
        const errorInfo = (0, ErrorTypeStrings$1[type]);
        while(cur){
            const errorCapturedHooks = cur.ec;
            if (errorCapturedHooks) for(let i = 0; i < errorCapturedHooks.length; i++){
                if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) return;
            }
            cur = cur.parent;
        }
        if (errorHandler) {
            (0, _reactivity.pauseTracking)();
            callWithErrorHandling(errorHandler, null, 10, [
                err,
                exposedInstance,
                errorInfo
            ]);
            (0, _reactivity.resetTracking)();
            return;
        }
    }
    logError(err, type, contextVNode, throwInDev, throwUnhandledErrorInProduction);
}
function logError(err, type, contextVNode, throwInDev = true, throwInProd = false) {
    {
        const info = ErrorTypeStrings$1[type];
        if (contextVNode) pushWarningContext(contextVNode);
        warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) popWarningContext();
        if (throwInDev) throw err;
        else console.error(err);
    }
}
const queue = [];
let flushIndex = -1;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
    const p = currentFlushPromise || resolvedPromise;
    return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
function findInsertionIndex(id) {
    let start = flushIndex + 1;
    let end = queue.length;
    while(start < end){
        const middle = start + end >>> 1;
        const middleJob = queue[middle];
        const middleJobId = getId(middleJob);
        if (middleJobId < id || middleJobId === id && middleJob.flags & 2) start = middle + 1;
        else end = middle;
    }
    return start;
}
function queueJob(job) {
    if (!(job.flags & 1)) {
        const jobId = getId(job);
        const lastJob = queue[queue.length - 1];
        if (!lastJob || // fast path when the job id is larger than the tail
        !(job.flags & 2) && jobId >= getId(lastJob)) queue.push(job);
        else queue.splice(findInsertionIndex(jobId), 0, job);
        job.flags |= 1;
        queueFlush();
    }
}
function queueFlush() {
    if (!currentFlushPromise) currentFlushPromise = resolvedPromise.then(flushJobs);
}
function queuePostFlushCb(cb) {
    if (!(0, _shared.isArray)(cb)) {
        if (activePostFlushCbs && cb.id === -1) activePostFlushCbs.splice(postFlushIndex + 1, 0, cb);
        else if (!(cb.flags & 1)) {
            pendingPostFlushCbs.push(cb);
            cb.flags |= 1;
        }
    } else pendingPostFlushCbs.push(...cb);
    queueFlush();
}
function flushPreFlushCbs(instance, seen, i = flushIndex + 1) {
    seen = seen || /* @__PURE__ */ new Map();
    for(; i < queue.length; i++){
        const cb = queue[i];
        if (cb && cb.flags & 2) {
            if (instance && cb.id !== instance.uid) continue;
            if (checkRecursiveUpdates(seen, cb)) continue;
            queue.splice(i, 1);
            i--;
            if (cb.flags & 4) cb.flags &= -2;
            cb();
            if (!(cb.flags & 4)) cb.flags &= -2;
        }
    }
}
function flushPostFlushCbs(seen) {
    if (pendingPostFlushCbs.length) {
        const deduped = [
            ...new Set(pendingPostFlushCbs)
        ].sort((a, b)=>getId(a) - getId(b));
        pendingPostFlushCbs.length = 0;
        if (activePostFlushCbs) {
            activePostFlushCbs.push(...deduped);
            return;
        }
        activePostFlushCbs = deduped;
        seen = seen || /* @__PURE__ */ new Map();
        for(postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++){
            const cb = activePostFlushCbs[postFlushIndex];
            if (checkRecursiveUpdates(seen, cb)) continue;
            if (cb.flags & 4) cb.flags &= -2;
            if (!(cb.flags & 8)) cb();
            cb.flags &= -2;
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
    }
}
const getId = (job)=>job.id == null ? job.flags & 2 ? -1 : Infinity : job.id;
function flushJobs(seen) {
    seen = seen || /* @__PURE__ */ new Map();
    const check = (job)=>checkRecursiveUpdates(seen, job);
    try {
        for(flushIndex = 0; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job && !(job.flags & 8)) {
                if (check(job)) continue;
                if (job.flags & 4) job.flags &= -2;
                callWithErrorHandling(job, job.i, job.i ? 15 : 14);
                if (!(job.flags & 4)) job.flags &= -2;
            }
        }
    } finally{
        for(; flushIndex < queue.length; flushIndex++){
            const job = queue[flushIndex];
            if (job) job.flags &= -2;
        }
        flushIndex = -1;
        queue.length = 0;
        flushPostFlushCbs(seen);
        currentFlushPromise = null;
        if (queue.length || pendingPostFlushCbs.length) flushJobs(seen);
    }
}
function checkRecursiveUpdates(seen, fn) {
    const count = seen.get(fn) || 0;
    if (count > RECURSION_LIMIT) {
        const instance = fn.i;
        const componentName = instance && getComponentName(instance.type);
        handleError(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`, null, 10);
        return true;
    }
    seen.set(fn, count + 1);
    return false;
}
let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Map();
(0, _shared.getGlobalThis)().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
};
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
    const id = instance.type.__hmrId;
    let record = map.get(id);
    if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
    }
    record.instances.add(instance);
}
function unregisterHMR(instance) {
    map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
    if (map.has(id)) return false;
    map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: /* @__PURE__ */ new Set()
    });
    return true;
}
function normalizeClassComponent(component) {
    return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
    const record = map.get(id);
    if (!record) return;
    record.initialDef.render = newRender;
    [
        ...record.instances
    ].forEach((instance)=>{
        if (newRender) {
            instance.render = newRender;
            normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
    });
}
function reload(id, newComp) {
    const record = map.get(id);
    if (!record) return;
    newComp = normalizeClassComponent(newComp);
    updateComponentDef(record.initialDef, newComp);
    const instances = [
        ...record.instances
    ];
    for(let i = 0; i < instances.length; i++){
        const instance = instances[i];
        const oldComp = normalizeClassComponent(instance.type);
        let dirtyInstances = hmrDirtyComponents.get(oldComp);
        if (!dirtyInstances) {
            if (oldComp !== record.initialDef) updateComponentDef(oldComp, newComp);
            hmrDirtyComponents.set(oldComp, dirtyInstances = /* @__PURE__ */ new Set());
        }
        dirtyInstances.add(instance);
        instance.appContext.propsCache.delete(instance.type);
        instance.appContext.emitsCache.delete(instance.type);
        instance.appContext.optionsCache.delete(instance.type);
        if (instance.ceReload) {
            dirtyInstances.add(instance);
            instance.ceReload(newComp.styles);
            dirtyInstances.delete(instance);
        } else if (instance.parent) queueJob(()=>{
            isHmrUpdating = true;
            instance.parent.update();
            isHmrUpdating = false;
            dirtyInstances.delete(instance);
        });
        else if (instance.appContext.reload) instance.appContext.reload();
        else if (typeof window !== "undefined") window.location.reload();
        else console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
        if (instance.root.ce && instance !== instance.root) instance.root.ce._removeChildStyle(oldComp);
    }
    queuePostFlushCb(()=>{
        hmrDirtyComponents.clear();
    });
}
function updateComponentDef(oldComp, newComp) {
    (0, _shared.extend)(oldComp, newComp);
    for(const key in oldComp)if (key !== "__file" && !(key in newComp)) delete oldComp[key];
}
function tryWrap(fn) {
    return (id, arg)=>{
        try {
            return fn(id, arg);
        } catch (e) {
            console.error(e);
            console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
        }
    };
}
let devtools$1;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
    if (devtools$1) devtools$1.emit(event, ...args);
    else if (!devtoolsNotInstalled) buffer.push({
        event,
        args
    });
}
function setDevtoolsHook$1(hook, target) {
    var _a, _b;
    devtools$1 = hook;
    if (devtools$1) {
        devtools$1.enabled = true;
        buffer.forEach(({ event , args  })=>devtools$1.emit(event, ...args));
        buffer = [];
    } else if (// handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    // eslint-disable-next-line no-restricted-syntax
    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))) {
        const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
        replay.push((newHook)=>{
            setDevtoolsHook$1(newHook, target);
        });
        setTimeout(()=>{
            if (!devtools$1) {
                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
                devtoolsNotInstalled = true;
                buffer = [];
            }
        }, 3e3);
    } else {
        devtoolsNotInstalled = true;
        buffer = [];
    }
}
function devtoolsInitApp(app, version) {
    emit$1("app:init" /* APP_INIT */ , app, version, {
        Fragment,
        Text,
        Comment,
        Static
    });
}
function devtoolsUnmountApp(app) {
    emit$1("app:unmount" /* APP_UNMOUNT */ , app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */ );
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */ );
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */ );
const devtoolsComponentRemoved = (component)=>{
    if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
    !devtools$1.cleanupBuffer(component)) _devtoolsComponentRemoved(component);
};
/*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
function createDevtoolsComponentHook(hook) {
    return (component)=>{
        emit$1(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
    };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */ );
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */ );
function createDevtoolsPerformanceHook(hook) {
    return (component, type, time)=>{
        emit$1(hook, component.appContext.app, component.uid, component, type, time);
    };
}
function devtoolsComponentEmit(component, event, params) {
    emit$1("component:emit" /* COMPONENT_EMIT */ , component.appContext.app, component, event, params);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
    const prev = currentRenderingInstance;
    currentRenderingInstance = instance;
    currentScopeId = instance && instance.type.__scopeId || null;
    return prev;
}
function pushScopeId(id) {
    currentScopeId = id;
}
function popScopeId() {
    currentScopeId = null;
}
const withScopeId = (_id)=>withCtx;
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
    if (!ctx) return fn;
    if (fn._n) return fn;
    const renderFnWithContext = (...args)=>{
        if (renderFnWithContext._d) setBlockTracking(-1);
        const prevInstance = setCurrentRenderingInstance(ctx);
        let res;
        try {
            res = fn(...args);
        } finally{
            setCurrentRenderingInstance(prevInstance);
            if (renderFnWithContext._d) setBlockTracking(1);
        }
        devtoolsComponentUpdated(ctx);
        return res;
    };
    renderFnWithContext._n = true;
    renderFnWithContext._c = true;
    renderFnWithContext._d = true;
    return renderFnWithContext;
}
function validateDirectiveName(name) {
    if ((0, _shared.isBuiltInDirective)(name)) warn$1("Do not use built-in directive ids as custom directive id: " + name);
}
function withDirectives(vnode, directives) {
    if (currentRenderingInstance === null) {
        warn$1(`withDirectives can only be used inside render functions.`);
        return vnode;
    }
    const instance = getComponentPublicInstance(currentRenderingInstance);
    const bindings = vnode.dirs || (vnode.dirs = []);
    for(let i = 0; i < directives.length; i++){
        let [dir, value, arg, modifiers = (0, _shared.EMPTY_OBJ)] = directives[i];
        if (dir) {
            if ((0, _shared.isFunction)(dir)) dir = {
                mounted: dir,
                updated: dir
            };
            if (dir.deep) (0, _reactivity.traverse)(value);
            bindings.push({
                dir,
                instance,
                value,
                oldValue: void 0,
                arg,
                modifiers
            });
        }
    }
    return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
    const bindings = vnode.dirs;
    const oldBindings = prevVNode && prevVNode.dirs;
    for(let i = 0; i < bindings.length; i++){
        const binding = bindings[i];
        if (oldBindings) binding.oldValue = oldBindings[i].value;
        let hook = binding.dir[name];
        if (hook) {
            (0, _reactivity.pauseTracking)();
            callWithAsyncErrorHandling(hook, instance, 8, [
                vnode.el,
                binding,
                vnode,
                prevVNode
            ]);
            (0, _reactivity.resetTracking)();
        }
    }
}
const TeleportEndKey = Symbol("_vte");
const isTeleport = (type)=>type.__isTeleport;
const isTeleportDisabled = (props)=>props && (props.disabled || props.disabled === "");
const isTeleportDeferred = (props)=>props && (props.defer || props.defer === "");
const isTargetSVG = (target)=>typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target)=>typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select)=>{
    const targetSelector = props && props.to;
    if ((0, _shared.isString)(targetSelector)) {
        if (!select) {
            warn$1(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`);
            return null;
        } else {
            const target = select(targetSelector);
            if (!target && !isTeleportDisabled(props)) warn$1(`Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`);
            return target;
        }
    } else {
        if (!targetSelector && !isTeleportDisabled(props)) warn$1(`Invalid Teleport target: ${targetSelector}`);
        return targetSelector;
    }
};
const TeleportImpl = {
    name: "Teleport",
    __isTeleport: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
        const { mc: mountChildren , pc: patchChildren , pbc: patchBlockChildren , o: { insert , querySelector , createText , createComment  }  } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag , children , dynamicChildren  } = n2;
        if (isHmrUpdating) {
            optimized = false;
            dynamicChildren = null;
        }
        if (n1 == null) {
            const placeholder = n2.el = createComment("teleport start");
            const mainAnchor = n2.anchor = createComment("teleport end");
            insert(placeholder, container, anchor);
            insert(mainAnchor, container, anchor);
            const mount = (container2, anchor2)=>{
                if (shapeFlag & 16) {
                    if (parentComponent && parentComponent.isCE) parentComponent.ce._teleportTarget = container2;
                    mountChildren(children, container2, anchor2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                }
            };
            const mountToTarget = ()=>{
                const target = n2.target = resolveTarget(n2.props, querySelector);
                const targetAnchor = prepareAnchor(target, n2, createText, insert);
                if (target) {
                    if (namespace !== "svg" && isTargetSVG(target)) namespace = "svg";
                    else if (namespace !== "mathml" && isTargetMathML(target)) namespace = "mathml";
                    if (!disabled) {
                        mount(target, targetAnchor);
                        updateCssVars(n2, false);
                    }
                } else if (!disabled) warn$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
            };
            if (disabled) {
                mount(container, mainAnchor);
                updateCssVars(n2, true);
            }
            if (isTeleportDeferred(n2.props)) {
                n2.el.__isMounted = false;
                queuePostRenderEffect(()=>{
                    mountToTarget();
                    delete n2.el.__isMounted;
                }, parentSuspense);
            } else mountToTarget();
        } else {
            if (isTeleportDeferred(n2.props) && n1.el.__isMounted === false) {
                queuePostRenderEffect(()=>{
                    TeleportImpl.process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals);
                }, parentSuspense);
                return;
            }
            n2.el = n1.el;
            n2.targetStart = n1.targetStart;
            const mainAnchor = n2.anchor = n1.anchor;
            const target = n2.target = n1.target;
            const targetAnchor = n2.targetAnchor = n1.targetAnchor;
            const wasDisabled = isTeleportDisabled(n1.props);
            const currentContainer = wasDisabled ? container : target;
            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
            if (namespace === "svg" || isTargetSVG(target)) namespace = "svg";
            else if (namespace === "mathml" || isTargetMathML(target)) namespace = "mathml";
            if (dynamicChildren) {
                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, namespace, slotScopeIds);
                traverseStaticChildren(n1, n2, false);
            } else if (!optimized) patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, false);
            if (disabled) {
                if (!wasDisabled) moveTeleport(n2, container, mainAnchor, internals, 1);
                else if (n2.props && n1.props && n2.props.to !== n1.props.to) n2.props.to = n1.props.to;
            } else {
                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
                    const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
                    if (nextTarget) moveTeleport(n2, nextTarget, null, internals, 0);
                    else warn$1("Invalid Teleport target on update:", target, `(${typeof target})`);
                } else if (wasDisabled) moveTeleport(n2, target, targetAnchor, internals, 1);
            }
            updateCssVars(n2, disabled);
        }
    },
    remove (vnode, parentComponent, parentSuspense, { um: unmount , o: { remove: hostRemove  }  }, doRemove) {
        const { shapeFlag , children , anchor , targetStart , targetAnchor , target , props  } = vnode;
        if (target) {
            hostRemove(targetStart);
            hostRemove(targetAnchor);
        }
        doRemove && hostRemove(anchor);
        if (shapeFlag & 16) {
            const shouldRemove = doRemove || !isTeleportDisabled(props);
            for(let i = 0; i < children.length; i++){
                const child = children[i];
                unmount(child, parentComponent, parentSuspense, shouldRemove, !!child.dynamicChildren);
            }
        }
    },
    move: moveTeleport,
    hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert  } , m: move  }, moveType = 2) {
    if (moveType === 0) insert(vnode.targetAnchor, container, parentAnchor);
    const { el , anchor , shapeFlag , children , props  } = vnode;
    const isReorder = moveType === 2;
    if (isReorder) insert(el, container, parentAnchor);
    if (!isReorder || isTeleportDisabled(props)) {
        if (shapeFlag & 16) for(let i = 0; i < children.length; i++)move(children[i], container, parentAnchor, 2);
    }
    if (isReorder) insert(anchor, container, parentAnchor);
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling , parentNode , querySelector , insert , createText  }  }, hydrateChildren) {
    const target = vnode.target = resolveTarget(vnode.props, querySelector);
    if (target) {
        const disabled = isTeleportDisabled(vnode.props);
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16) {
            if (disabled) {
                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
                vnode.targetStart = targetNode;
                vnode.targetAnchor = targetNode && nextSibling(targetNode);
            } else {
                vnode.anchor = nextSibling(node);
                let targetAnchor = targetNode;
                while(targetAnchor){
                    if (targetAnchor && targetAnchor.nodeType === 8) {
                        if (targetAnchor.data === "teleport start anchor") vnode.targetStart = targetAnchor;
                        else if (targetAnchor.data === "teleport anchor") {
                            vnode.targetAnchor = targetAnchor;
                            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                            break;
                        }
                    }
                    targetAnchor = nextSibling(targetAnchor);
                }
                if (!vnode.targetAnchor) prepareAnchor(target, vnode, createText, insert);
                hydrateChildren(targetNode && nextSibling(targetNode), vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
        }
        updateCssVars(vnode, disabled);
    }
    return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode, isDisabled) {
    const ctx = vnode.ctx;
    if (ctx && ctx.ut) {
        let node, anchor;
        if (isDisabled) {
            node = vnode.el;
            anchor = vnode.anchor;
        } else {
            node = vnode.targetStart;
            anchor = vnode.targetAnchor;
        }
        while(node && node !== anchor){
            if (node.nodeType === 1) node.setAttribute("data-v-owner", ctx.uid);
            node = node.nextSibling;
        }
        ctx.ut();
    }
}
function prepareAnchor(target, vnode, createText, insert) {
    const targetStart = vnode.targetStart = createText("");
    const targetAnchor = vnode.targetAnchor = createText("");
    targetStart[TeleportEndKey] = targetAnchor;
    if (target) {
        insert(targetStart, target);
        insert(targetAnchor, target);
    }
    return targetAnchor;
}
const leaveCbKey = Symbol("_leaveCb");
const enterCbKey = Symbol("_enterCb");
function useTransitionState() {
    const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: /* @__PURE__ */ new Map()
    };
    onMounted(()=>{
        state.isMounted = true;
    });
    onBeforeUnmount(()=>{
        state.isUnmounting = true;
    });
    return state;
}
const TransitionHookValidator = [
    Function,
    Array
];
const BaseTransitionPropsValidators = {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    // enter
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    // leave
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    // appear
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
};
const recursiveGetSubtree = (instance)=>{
    const subTree = instance.subTree;
    return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
};
const BaseTransitionImpl = {
    name: `BaseTransition`,
    props: BaseTransitionPropsValidators,
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        return ()=>{
            const children = slots.default && getTransitionRawChildren(slots.default(), true);
            if (!children || !children.length) return;
            const child = findNonCommentChild(children);
            const rawProps = (0, _reactivity.toRaw)(props);
            const { mode  } = rawProps;
            if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") warn$1(`invalid <transition> mode: ${mode}`);
            if (state.isLeaving) return emptyPlaceholder(child);
            const innerChild = getInnerChild$1(child);
            if (!innerChild) return emptyPlaceholder(child);
            let enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance, // #11061, ensure enterHooks is fresh after clone
            (hooks)=>enterHooks = hooks);
            if (innerChild.type !== Comment) setTransitionHooks(innerChild, enterHooks);
            let oldInnerChild = instance.subTree && getInnerChild$1(instance.subTree);
            if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
                let leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
                setTransitionHooks(oldInnerChild, leavingHooks);
                if (mode === "out-in" && innerChild.type !== Comment) {
                    state.isLeaving = true;
                    leavingHooks.afterLeave = ()=>{
                        state.isLeaving = false;
                        if (!(instance.job.flags & 8)) instance.update();
                        delete leavingHooks.afterLeave;
                        oldInnerChild = void 0;
                    };
                    return emptyPlaceholder(child);
                } else if (mode === "in-out" && innerChild.type !== Comment) leavingHooks.delayLeave = (el, earlyRemove, delayedLeave)=>{
                    const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                    leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                    el[leaveCbKey] = ()=>{
                        earlyRemove();
                        el[leaveCbKey] = void 0;
                        delete enterHooks.delayedLeave;
                        oldInnerChild = void 0;
                    };
                    enterHooks.delayedLeave = ()=>{
                        delayedLeave();
                        delete enterHooks.delayedLeave;
                        oldInnerChild = void 0;
                    };
                };
                else oldInnerChild = void 0;
            } else if (oldInnerChild) oldInnerChild = void 0;
            return child;
        };
    }
};
function findNonCommentChild(children) {
    let child = children[0];
    if (children.length > 1) {
        let hasFound = false;
        for (const c of children)if (c.type !== Comment) {
            if (hasFound) {
                warn$1("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
                break;
            }
            child = c;
            hasFound = true;
        }
    }
    return child;
}
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
    const { leavingVNodes  } = state;
    let leavingVNodesCache = leavingVNodes.get(vnode.type);
    if (!leavingVNodesCache) {
        leavingVNodesCache = /* @__PURE__ */ Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
    }
    return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance, postClone) {
    const { appear , mode , persisted =false , onBeforeEnter , onEnter , onAfterEnter , onEnterCancelled , onBeforeLeave , onLeave , onAfterLeave , onLeaveCancelled , onBeforeAppear , onAppear , onAfterAppear , onAppearCancelled  } = props;
    const key = String(vnode.key);
    const leavingVNodesCache = getLeavingNodesForType(state, vnode);
    const callHook = (hook, args)=>{
        hook && callWithAsyncErrorHandling(hook, instance, 9, args);
    };
    const callAsyncHook = (hook, args)=>{
        const done = args[1];
        callHook(hook, args);
        if ((0, _shared.isArray)(hook)) {
            if (hook.every((hook2)=>hook2.length <= 1)) done();
        } else if (hook.length <= 1) done();
    };
    const hooks = {
        mode,
        persisted,
        beforeEnter (el) {
            let hook = onBeforeEnter;
            if (!state.isMounted) {
                if (appear) hook = onBeforeAppear || onBeforeEnter;
                else return;
            }
            if (el[leaveCbKey]) el[leaveCbKey](true);
            const leavingVNode = leavingVNodesCache[key];
            if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) leavingVNode.el[leaveCbKey]();
            callHook(hook, [
                el
            ]);
        },
        enter (el) {
            let hook = onEnter;
            let afterHook = onAfterEnter;
            let cancelHook = onEnterCancelled;
            if (!state.isMounted) {
                if (appear) {
                    hook = onAppear || onEnter;
                    afterHook = onAfterAppear || onAfterEnter;
                    cancelHook = onAppearCancelled || onEnterCancelled;
                } else return;
            }
            let called = false;
            const done = el[enterCbKey] = (cancelled)=>{
                if (called) return;
                called = true;
                if (cancelled) callHook(cancelHook, [
                    el
                ]);
                else callHook(afterHook, [
                    el
                ]);
                if (hooks.delayedLeave) hooks.delayedLeave();
                el[enterCbKey] = void 0;
            };
            if (hook) callAsyncHook(hook, [
                el,
                done
            ]);
            else done();
        },
        leave (el, remove) {
            const key2 = String(vnode.key);
            if (el[enterCbKey]) el[enterCbKey](true);
            if (state.isUnmounting) return remove();
            callHook(onBeforeLeave, [
                el
            ]);
            let called = false;
            const done = el[leaveCbKey] = (cancelled)=>{
                if (called) return;
                called = true;
                remove();
                if (cancelled) callHook(onLeaveCancelled, [
                    el
                ]);
                else callHook(onAfterLeave, [
                    el
                ]);
                el[leaveCbKey] = void 0;
                if (leavingVNodesCache[key2] === vnode) delete leavingVNodesCache[key2];
            };
            leavingVNodesCache[key2] = vnode;
            if (onLeave) callAsyncHook(onLeave, [
                el,
                done
            ]);
            else done();
        },
        clone (vnode2) {
            const hooks2 = resolveTransitionHooks(vnode2, props, state, instance, postClone);
            if (postClone) postClone(hooks2);
            return hooks2;
        }
    };
    return hooks;
}
function emptyPlaceholder(vnode) {
    if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
    }
}
function getInnerChild$1(vnode) {
    if (!isKeepAlive(vnode)) {
        if (isTeleport(vnode.type) && vnode.children) return findNonCommentChild(vnode.children);
        return vnode;
    }
    if (vnode.component) return vnode.component.subTree;
    const { shapeFlag , children  } = vnode;
    if (children) {
        if (shapeFlag & 16) return children[0];
        if (shapeFlag & 32 && (0, _shared.isFunction)(children.default)) return children.default();
    }
}
function setTransitionHooks(vnode, hooks) {
    if (vnode.shapeFlag & 6 && vnode.component) {
        vnode.transition = hooks;
        setTransitionHooks(vnode.component.subTree, hooks);
    } else if (vnode.shapeFlag & 128) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
    } else vnode.transition = hooks;
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
    let ret = [];
    let keyedFragmentCount = 0;
    for(let i = 0; i < children.length; i++){
        let child = children[i];
        const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
        if (child.type === Fragment) {
            if (child.patchFlag & 128) keyedFragmentCount++;
            ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        } else if (keepComment || child.type !== Comment) ret.push(key != null ? cloneVNode(child, {
            key
        }) : child);
    }
    if (keyedFragmentCount > 1) for(let i = 0; i < ret.length; i++)ret[i].patchFlag = -2;
    return ret;
}
/*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
    return (0, _shared.isFunction)(options) ? // #8236: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (()=>(0, _shared.extend)({
            name: options.name
        }, extraOptions, {
            setup: options
        }))() : options;
}
function useId() {
    const i = getCurrentInstance();
    if (i) return (i.appContext.config.idPrefix || "v") + "-" + i.ids[0] + i.ids[1]++;
    else warn$1(`useId() is called when there is no active component instance to be associated with.`);
    return "";
}
function markAsyncBoundary(instance) {
    instance.ids = [
        instance.ids[0] + instance.ids[2]++ + "-",
        0,
        0
    ];
}
const knownTemplateRefs = /* @__PURE__ */ new WeakSet();
function useTemplateRef(key) {
    const i = getCurrentInstance();
    const r = (0, _reactivity.shallowRef)(null);
    if (i) {
        const refs = i.refs === (0, _shared.EMPTY_OBJ) ? i.refs = {} : i.refs;
        let desc;
        if ((desc = Object.getOwnPropertyDescriptor(refs, key)) && !desc.configurable) warn$1(`useTemplateRef('${key}') already exists.`);
        else Object.defineProperty(refs, key, {
            enumerable: true,
            get: ()=>r.value,
            set: (val)=>r.value = val
        });
    } else warn$1(`useTemplateRef() is called when there is no active component instance to be associated with.`);
    const ret = (0, _reactivity.readonly)(r);
    knownTemplateRefs.add(ret);
    return ret;
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
    if ((0, _shared.isArray)(rawRef)) {
        rawRef.forEach((r, i)=>setRef(r, oldRawRef && ((0, _shared.isArray)(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
    }
    if (isAsyncWrapper(vnode) && !isUnmount) {
        if (vnode.shapeFlag & 512 && vnode.type.__asyncResolved && vnode.component.subTree.component) setRef(rawRef, oldRawRef, parentSuspense, vnode.component.subTree);
        return;
    }
    const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
    const value = isUnmount ? null : refValue;
    const { i: owner , r: ref  } = rawRef;
    if (!owner) {
        warn$1(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
        return;
    }
    const oldRef = oldRawRef && oldRawRef.r;
    const refs = owner.refs === (0, _shared.EMPTY_OBJ) ? owner.refs = {} : owner.refs;
    const setupState = owner.setupState;
    const rawSetupState = (0, _reactivity.toRaw)(setupState);
    const canSetSetupRef = setupState === (0, _shared.EMPTY_OBJ) ? ()=>false : (key)=>{
        if ((0, _shared.hasOwn)(rawSetupState, key) && !(0, _reactivity.isRef)(rawSetupState[key])) warn$1(`Template ref "${key}" used on a non-ref value. It will not work in the production build.`);
        if (knownTemplateRefs.has(rawSetupState[key])) return false;
        return (0, _shared.hasOwn)(rawSetupState, key);
    };
    if (oldRef != null && oldRef !== ref) {
        if ((0, _shared.isString)(oldRef)) {
            refs[oldRef] = null;
            if (canSetSetupRef(oldRef)) setupState[oldRef] = null;
        } else if ((0, _reactivity.isRef)(oldRef)) oldRef.value = null;
    }
    if ((0, _shared.isFunction)(ref)) callWithErrorHandling(ref, owner, 12, [
        value,
        refs
    ]);
    else {
        const _isString = (0, _shared.isString)(ref);
        const _isRef = (0, _reactivity.isRef)(ref);
        if (_isString || _isRef) {
            const doSet = ()=>{
                if (rawRef.f) {
                    const existing = _isString ? canSetSetupRef(ref) ? setupState[ref] : refs[ref] : ref.value;
                    if (isUnmount) (0, _shared.isArray)(existing) && (0, _shared.remove)(existing, refValue);
                    else {
                        if (!(0, _shared.isArray)(existing)) {
                            if (_isString) {
                                refs[ref] = [
                                    refValue
                                ];
                                if (canSetSetupRef(ref)) setupState[ref] = refs[ref];
                            } else {
                                ref.value = [
                                    refValue
                                ];
                                if (rawRef.k) refs[rawRef.k] = ref.value;
                            }
                        } else if (!existing.includes(refValue)) existing.push(refValue);
                    }
                } else if (_isString) {
                    refs[ref] = value;
                    if (canSetSetupRef(ref)) setupState[ref] = value;
                } else if (_isRef) {
                    ref.value = value;
                    if (rawRef.k) refs[rawRef.k] = value;
                } else warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
            };
            if (value) {
                doSet.id = -1;
                queuePostRenderEffect(doSet, parentSuspense);
            } else doSet();
        } else warn$1("Invalid template ref type:", ref, `(${typeof ref})`);
    }
}
let hasLoggedMismatchError = false;
const logMismatchError = ()=>{
    if (hasLoggedMismatchError) return;
    console.error("Hydration completed but contains mismatches.");
    hasLoggedMismatchError = true;
};
const isSVGContainer = (container)=>container.namespaceURI.includes("svg") && container.tagName !== "foreignObject";
const isMathMLContainer = (container)=>container.namespaceURI.includes("MathML");
const getContainerType = (container)=>{
    if (container.nodeType !== 1) return void 0;
    if (isSVGContainer(container)) return "svg";
    if (isMathMLContainer(container)) return "mathml";
    return void 0;
};
const isComment = (node)=>node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
    const { mt: mountComponent , p: patch , o: { patchProp , createText , nextSibling , parentNode , remove , insert , createComment  }  } = rendererInternals;
    const hydrate = (vnode, container)=>{
        if (!container.hasChildNodes()) {
            warn$1(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`);
            patch(null, vnode, container);
            flushPostFlushCbs();
            container._vnode = vnode;
            return;
        }
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        container._vnode = vnode;
    };
    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const isFragmentStart = isComment(node) && node.data === "[";
        const onMismatch = ()=>handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type , ref , shapeFlag , patchFlag  } = vnode;
        let domType = node.nodeType;
        vnode.el = node;
        (0, _shared.def)(node, "__vnode", vnode, true);
        (0, _shared.def)(node, "__vueParentComponent", parentComponent, true);
        if (patchFlag === -2) {
            optimized = false;
            vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch(type){
            case Text:
                if (domType !== 3) {
                    if (vnode.children === "") {
                        insert(vnode.el = createText(""), parentNode(node), node);
                        nextNode = node;
                    } else nextNode = onMismatch();
                } else {
                    if (node.data !== vnode.children) {
                        warn$1(`Hydration text mismatch in`, node.parentNode, `
  - rendered on server: ${JSON.stringify(node.data)}
  - expected on client: ${JSON.stringify(vnode.children)}`);
                        logMismatchError();
                        node.data = vnode.children;
                    }
                    nextNode = nextSibling(node);
                }
                break;
            case Comment:
                if (isTemplateNode(node)) {
                    nextNode = nextSibling(node);
                    replaceNode(vnode.el = node.content.firstChild, node, parentComponent);
                } else if (domType !== 8 || isFragmentStart) nextNode = onMismatch();
                else nextNode = nextSibling(node);
                break;
            case Static:
                if (isFragmentStart) {
                    node = nextSibling(node);
                    domType = node.nodeType;
                }
                if (domType === 1 || domType === 3) {
                    nextNode = node;
                    const needToAdoptContent = !vnode.children.length;
                    for(let i = 0; i < vnode.staticCount; i++){
                        if (needToAdoptContent) vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
                        if (i === vnode.staticCount - 1) vnode.anchor = nextNode;
                        nextNode = nextSibling(nextNode);
                    }
                    return isFragmentStart ? nextSibling(nextNode) : nextNode;
                } else onMismatch();
                break;
            case Fragment:
                if (!isFragmentStart) nextNode = onMismatch();
                else nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1) {
                    if ((domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) && !isTemplateNode(node)) nextNode = onMismatch();
                    else nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
                } else if (shapeFlag & 6) {
                    vnode.slotScopeIds = slotScopeIds;
                    const container = parentNode(node);
                    if (isFragmentStart) nextNode = locateClosingAnchor(node);
                    else if (isComment(node) && node.data === "teleport start") nextNode = locateClosingAnchor(node, node.data, "teleport end");
                    else nextNode = nextSibling(node);
                    mountComponent(vnode, container, null, parentComponent, parentSuspense, getContainerType(container), optimized);
                    if (isAsyncWrapper(vnode) && !vnode.type.__asyncResolved) {
                        let subTree;
                        if (isFragmentStart) {
                            subTree = createVNode(Fragment);
                            subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                        } else subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                        subTree.el = node;
                        vnode.component.subTree = subTree;
                    }
                } else if (shapeFlag & 64) {
                    if (domType !== 8) nextNode = onMismatch();
                    else nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
                } else if (shapeFlag & 128) nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, getContainerType(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
                else warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
        }
        if (ref != null) setRef(ref, null, parentSuspense, vnode);
        return nextNode;
    };
    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!vnode.dynamicChildren;
        const { type , props , patchFlag , shapeFlag , dirs , transition  } = vnode;
        const forcePatch = type === "input" || type === "option";
        {
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
            let needCallTransitionHooks = false;
            if (isTemplateNode(el)) {
                needCallTransitionHooks = needTransition(null, // no need check parentSuspense in hydration
                transition) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;
                const content = el.content.firstChild;
                if (needCallTransitionHooks) {
                    const cls = content.getAttribute("class");
                    if (cls) content.$cls = cls;
                    transition.beforeEnter(content);
                }
                replaceNode(content, el, parentComponent);
                vnode.el = el = content;
            }
            if (shapeFlag & 16 && // skip if element has innerHTML / textContent
            !(props && (props.innerHTML || props.textContent))) {
                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
                let hasWarned = false;
                while(next){
                    if (!isMismatchAllowed(el, 1 /* CHILDREN */ )) {
                        if (!hasWarned) {
                            warn$1(`Hydration children mismatch on`, el, `
Server rendered element contains more child nodes than client vdom.`);
                            hasWarned = true;
                        }
                        logMismatchError();
                    }
                    const cur = next;
                    next = next.nextSibling;
                    remove(cur);
                }
            } else if (shapeFlag & 8) {
                let clientText = vnode.children;
                if (clientText[0] === "\n" && (el.tagName === "PRE" || el.tagName === "TEXTAREA")) clientText = clientText.slice(1);
                if (el.textContent !== clientText) {
                    if (!isMismatchAllowed(el, 0 /* TEXT */ )) {
                        warn$1(`Hydration text content mismatch on`, el, `
  - rendered on server: ${el.textContent}
  - expected on client: ${vnode.children}`);
                        logMismatchError();
                    }
                    el.textContent = vnode.children;
                }
            }
            if (props) {
                const isCustomElement = el.tagName.includes("-");
                for(const key in props){
                    if (// #11189 skip if this node has directives that have created hooks
                    // as it could have mutated the DOM in any possible way
                    !(dirs && dirs.some((d)=>d.dir.created)) && propHasMismatch(el, key, props[key], vnode, parentComponent)) logMismatchError();
                    if (forcePatch && (key.endsWith("value") || key === "indeterminate") || (0, _shared.isOn)(key) && !(0, _shared.isReservedProp)(key) || // force hydrate v-bind with .prop modifiers
                    key[0] === "." || isCustomElement) patchProp(el, key, null, props[key], void 0, parentComponent);
                }
            }
            let vnodeHooks;
            if (vnodeHooks = props && props.onVnodeBeforeMount) invokeVNodeHook(vnodeHooks, parentComponent, vnode);
            if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
            if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) queueEffectWithSuspense(()=>{
                vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
                needCallTransitionHooks && transition.enter(el);
                dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
        }
        return el.nextSibling;
    };
    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned = false;
        for(let i = 0; i < l; i++){
            const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
            const isText = vnode.type === Text;
            if (node) {
                if (isText && !optimized) {
                    if (i + 1 < l && normalizeVNode(children[i + 1]).type === Text) {
                        insert(createText(node.data.slice(vnode.children.length)), container, nextSibling(node));
                        node.data = vnode.children;
                    }
                }
                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            } else if (isText && !vnode.children) insert(vnode.el = createText(""), container);
            else {
                if (!isMismatchAllowed(container, 1 /* CHILDREN */ )) {
                    if (!hasWarned) {
                        warn$1(`Hydration children mismatch on`, container, `
Server rendered element contains fewer child nodes than client vdom.`);
                        hasWarned = true;
                    }
                    logMismatchError();
                }
                patch(null, vnode, container, null, parentComponent, parentSuspense, getContainerType(container), slotScopeIds);
            }
        }
        return node;
    };
    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized)=>{
        const { slotScopeIds: fragmentSlotScopeIds  } = vnode;
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === "]") return nextSibling(vnode.anchor = next);
        else {
            logMismatchError();
            insert(vnode.anchor = createComment(`]`), container, next);
            return next;
        }
    };
    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment)=>{
        if (!isMismatchAllowed(node.parentElement, 1 /* CHILDREN */ )) {
            warn$1(`Hydration node mismatch:
- rendered on server:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``, `
- expected on client:`, vnode.type);
            logMismatchError();
        }
        vnode.el = null;
        if (isFragment) {
            const end = locateClosingAnchor(node);
            while(true){
                const next2 = nextSibling(node);
                if (next2 && next2 !== end) remove(next2);
                else break;
            }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, getContainerType(container), slotScopeIds);
        if (parentComponent) {
            parentComponent.vnode.el = vnode.el;
            updateHOCHostEl(parentComponent, vnode.el);
        }
        return next;
    };
    const locateClosingAnchor = (node, open = "[", close = "]")=>{
        let match = 0;
        while(node){
            node = nextSibling(node);
            if (node && isComment(node)) {
                if (node.data === open) match++;
                if (node.data === close) {
                    if (match === 0) return nextSibling(node);
                    else match--;
                }
            }
        }
        return node;
    };
    const replaceNode = (newNode, oldNode, parentComponent)=>{
        const parentNode2 = oldNode.parentNode;
        if (parentNode2) parentNode2.replaceChild(newNode, oldNode);
        let parent = parentComponent;
        while(parent){
            if (parent.vnode.el === oldNode) parent.vnode.el = parent.subTree.el = newNode;
            parent = parent.parent;
        }
    };
    const isTemplateNode = (node)=>{
        return node.nodeType === 1 && node.tagName === "TEMPLATE";
    };
    return [
        hydrate,
        hydrateNode
    ];
}
function propHasMismatch(el, key, clientValue, vnode, instance) {
    let mismatchType;
    let mismatchKey;
    let actual;
    let expected;
    if (key === "class") {
        if (el.$cls) {
            actual = el.$cls;
            delete el.$cls;
        } else actual = el.getAttribute("class");
        expected = (0, _shared.normalizeClass)(clientValue);
        if (!isSetEqual(toClassSet(actual || ""), toClassSet(expected))) {
            mismatchType = 2 /* CLASS */ ;
            mismatchKey = `class`;
        }
    } else if (key === "style") {
        actual = el.getAttribute("style") || "";
        expected = (0, _shared.isString)(clientValue) ? clientValue : (0, _shared.stringifyStyle)((0, _shared.normalizeStyle)(clientValue));
        const actualMap = toStyleMap(actual);
        const expectedMap = toStyleMap(expected);
        if (vnode.dirs) {
            for (const { dir , value  } of vnode.dirs)if (dir.name === "show" && !value) expectedMap.set("display", "none");
        }
        if (instance) resolveCssVars(instance, vnode, expectedMap);
        if (!isMapEqual(actualMap, expectedMap)) {
            mismatchType = 3 /* STYLE */ ;
            mismatchKey = "style";
        }
    } else if (el instanceof SVGElement && (0, _shared.isKnownSvgAttr)(key) || el instanceof HTMLElement && ((0, _shared.isBooleanAttr)(key) || (0, _shared.isKnownHtmlAttr)(key))) {
        if ((0, _shared.isBooleanAttr)(key)) {
            actual = el.hasAttribute(key);
            expected = (0, _shared.includeBooleanAttr)(clientValue);
        } else if (clientValue == null) {
            actual = el.hasAttribute(key);
            expected = false;
        } else {
            if (el.hasAttribute(key)) actual = el.getAttribute(key);
            else if (key === "value" && el.tagName === "TEXTAREA") actual = el.value;
            else actual = false;
            expected = (0, _shared.isRenderableAttrValue)(clientValue) ? String(clientValue) : false;
        }
        if (actual !== expected) {
            mismatchType = 4 /* ATTRIBUTE */ ;
            mismatchKey = key;
        }
    }
    if (mismatchType != null && !isMismatchAllowed(el, mismatchType)) {
        const format = (v1)=>v1 === false ? `(not rendered)` : `${mismatchKey}="${v1}"`;
        const preSegment = `Hydration ${MismatchTypeString[mismatchType]} mismatch on`;
        const postSegment = `
  - rendered on server: ${format(actual)}
  - expected on client: ${format(expected)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;
        warn$1(preSegment, el, postSegment);
        return true;
    }
    return false;
}
function toClassSet(str) {
    return new Set(str.trim().split(/\s+/));
}
function isSetEqual(a, b) {
    if (a.size !== b.size) return false;
    for (const s of a){
        if (!b.has(s)) return false;
    }
    return true;
}
function toStyleMap(str) {
    const styleMap = /* @__PURE__ */ new Map();
    for (const item of str.split(";")){
        let [key, value] = item.split(":");
        key = key.trim();
        value = value && value.trim();
        if (key && value) styleMap.set(key, value);
    }
    return styleMap;
}
function isMapEqual(a, b) {
    if (a.size !== b.size) return false;
    for (const [key, value] of a){
        if (value !== b.get(key)) return false;
    }
    return true;
}
function resolveCssVars(instance, vnode, expectedMap) {
    const root = instance.subTree;
    if (instance.getCssVars && (vnode === root || root && root.type === Fragment && root.children.includes(vnode))) {
        const cssVars = instance.getCssVars();
        for(const key in cssVars)expectedMap.set(`--${(0, _shared.getEscapedCssVarName)(key, false)}`, String(cssVars[key]));
    }
    if (vnode === root && instance.parent) resolveCssVars(instance.parent, instance.vnode, expectedMap);
}
const allowMismatchAttr = "data-allow-mismatch";
const MismatchTypeString = {
    [0 /* TEXT */ ]: "text",
    [1 /* CHILDREN */ ]: "children",
    [2 /* CLASS */ ]: "class",
    [3 /* STYLE */ ]: "style",
    [4 /* ATTRIBUTE */ ]: "attribute"
};
function isMismatchAllowed(el, allowedType) {
    if (allowedType === 0 /* TEXT */  || allowedType === 1 /* CHILDREN */ ) while(el && !el.hasAttribute(allowMismatchAttr))el = el.parentElement;
    const allowedAttr = el && el.getAttribute(allowMismatchAttr);
    if (allowedAttr == null) return false;
    else if (allowedAttr === "") return true;
    else {
        const list = allowedAttr.split(",");
        if (allowedType === 0 /* TEXT */  && list.includes("children")) return true;
        return allowedAttr.split(",").includes(MismatchTypeString[allowedType]);
    }
}
const requestIdleCallback = (0, _shared.getGlobalThis)().requestIdleCallback || ((cb)=>setTimeout(cb, 1));
const cancelIdleCallback = (0, _shared.getGlobalThis)().cancelIdleCallback || ((id)=>clearTimeout(id));
const hydrateOnIdle = (timeout = 1e4)=>(hydrate)=>{
        const id = requestIdleCallback(hydrate, {
            timeout
        });
        return ()=>cancelIdleCallback(id);
    };
function elementIsVisibleInViewport(el) {
    const { top , left , bottom , right  } = el.getBoundingClientRect();
    const { innerHeight , innerWidth  } = window;
    return (top > 0 && top < innerHeight || bottom > 0 && bottom < innerHeight) && (left > 0 && left < innerWidth || right > 0 && right < innerWidth);
}
const hydrateOnVisible = (opts)=>(hydrate, forEach)=>{
        const ob = new IntersectionObserver((entries)=>{
            for (const e of entries){
                if (!e.isIntersecting) continue;
                ob.disconnect();
                hydrate();
                break;
            }
        }, opts);
        forEach((el)=>{
            if (!(el instanceof Element)) return;
            if (elementIsVisibleInViewport(el)) {
                hydrate();
                ob.disconnect();
                return false;
            }
            ob.observe(el);
        });
        return ()=>ob.disconnect();
    };
const hydrateOnMediaQuery = (query)=>(hydrate)=>{
        if (query) {
            const mql = matchMedia(query);
            if (mql.matches) hydrate();
            else {
                mql.addEventListener("change", hydrate, {
                    once: true
                });
                return ()=>mql.removeEventListener("change", hydrate);
            }
        }
    };
const hydrateOnInteraction = (interactions = [])=>(hydrate, forEach)=>{
        if ((0, _shared.isString)(interactions)) interactions = [
            interactions
        ];
        let hasHydrated = false;
        const doHydrate = (e)=>{
            if (!hasHydrated) {
                hasHydrated = true;
                teardown();
                hydrate();
                e.target.dispatchEvent(new e.constructor(e.type, e));
            }
        };
        const teardown = ()=>{
            forEach((el)=>{
                for (const i of interactions)el.removeEventListener(i, doHydrate);
            });
        };
        forEach((el)=>{
            for (const i of interactions)el.addEventListener(i, doHydrate, {
                once: true
            });
        });
        return teardown;
    };
function forEachElement(node, cb) {
    if (isComment(node) && node.data === "[") {
        let depth = 1;
        let next = node.nextSibling;
        while(next){
            if (next.nodeType === 1) {
                const result = cb(next);
                if (result === false) break;
            } else if (isComment(next)) {
                if (next.data === "]") {
                    if (--depth === 0) break;
                } else if (next.data === "[") depth++;
            }
            next = next.nextSibling;
        }
    } else cb(node);
}
const isAsyncWrapper = (i)=>!!i.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
    if ((0, _shared.isFunction)(source)) source = {
        loader: source
    };
    const { loader , loadingComponent , errorComponent , delay =200 , hydrate: hydrateStrategy , timeout , // undefined = never times out
    suspensible =true , onError: userOnError  } = source;
    let pendingRequest = null;
    let resolvedComp;
    let retries = 0;
    const retry = ()=>{
        retries++;
        pendingRequest = null;
        return load();
    };
    const load = ()=>{
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err)=>{
            err = err instanceof Error ? err : new Error(String(err));
            if (userOnError) return new Promise((resolve, reject)=>{
                const userRetry = ()=>resolve(retry());
                const userFail = ()=>reject(err);
                userOnError(err, userRetry, userFail, retries + 1);
            });
            else throw err;
        }).then((comp)=>{
            if (thisRequest !== pendingRequest && pendingRequest) return pendingRequest;
            if (!comp) warn$1(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
            if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) comp = comp.default;
            if (comp && !(0, _shared.isObject)(comp) && !(0, _shared.isFunction)(comp)) throw new Error(`Invalid async component load result: ${comp}`);
            resolvedComp = comp;
            return comp;
        }));
    };
    return defineComponent({
        name: "AsyncComponentWrapper",
        __asyncLoader: load,
        __asyncHydrate (el, instance, hydrate) {
            let patched = false;
            const doHydrate = hydrateStrategy ? ()=>{
                const performHydrate = ()=>{
                    if (patched) {
                        warn$1(`Skipping lazy hydration for component '${getComponentName(resolvedComp)}': it was updated before lazy hydration performed.`);
                        return;
                    }
                    hydrate();
                };
                const teardown = hydrateStrategy(performHydrate, (cb)=>forEachElement(el, cb));
                if (teardown) (instance.bum || (instance.bum = [])).push(teardown);
                (instance.u || (instance.u = [])).push(()=>patched = true);
            } : hydrate;
            if (resolvedComp) doHydrate();
            else load().then(()=>!instance.isUnmounted && doHydrate());
        },
        get __asyncResolved () {
            return resolvedComp;
        },
        setup () {
            const instance = currentInstance;
            markAsyncBoundary(instance);
            if (resolvedComp) return ()=>createInnerComp(resolvedComp, instance);
            const onError = (err)=>{
                pendingRequest = null;
                handleError(err, instance, 13, !errorComponent);
            };
            if (suspensible && instance.suspense || isInSSRComponentSetup) return load().then((comp)=>{
                return ()=>createInnerComp(comp, instance);
            }).catch((err)=>{
                onError(err);
                return ()=>errorComponent ? createVNode(errorComponent, {
                        error: err
                    }) : null;
            });
            const loaded = (0, _reactivity.ref)(false);
            const error = (0, _reactivity.ref)();
            const delayed = (0, _reactivity.ref)(!!delay);
            if (delay) setTimeout(()=>{
                delayed.value = false;
            }, delay);
            if (timeout != null) setTimeout(()=>{
                if (!loaded.value && !error.value) {
                    const err = new Error(`Async component timed out after ${timeout}ms.`);
                    onError(err);
                    error.value = err;
                }
            }, timeout);
            load().then(()=>{
                loaded.value = true;
                if (instance.parent && isKeepAlive(instance.parent.vnode)) instance.parent.update();
            }).catch((err)=>{
                onError(err);
                error.value = err;
            });
            return ()=>{
                if (loaded.value && resolvedComp) return createInnerComp(resolvedComp, instance);
                else if (error.value && errorComponent) return createVNode(errorComponent, {
                    error: error.value
                });
                else if (loadingComponent && !delayed.value) return createVNode(loadingComponent);
            };
        }
    });
}
function createInnerComp(comp, parent) {
    const { ref: ref2 , props , children , ce  } = parent.vnode;
    const vnode = createVNode(comp, props, children);
    vnode.ref = ref2;
    vnode.ce = ce;
    delete parent.vnode.ce;
    return vnode;
}
const isKeepAlive = (vnode)=>vnode.type.__isKeepAlive;
const KeepAliveImpl = {
    name: `KeepAlive`,
    // Marker for special handling inside the renderer. We are not using a ===
    // check directly on KeepAlive in the renderer, because importing it directly
    // would prevent it from being tree-shaken.
    __isKeepAlive: true,
    props: {
        include: [
            String,
            RegExp,
            Array
        ],
        exclude: [
            String,
            RegExp,
            Array
        ],
        max: [
            String,
            Number
        ]
    },
    setup (props, { slots  }) {
        const instance = getCurrentInstance();
        const sharedContext = instance.ctx;
        if (!sharedContext.renderer) return ()=>{
            const children = slots.default && slots.default();
            return children && children.length === 1 ? children[0] : children;
        };
        const cache = /* @__PURE__ */ new Map();
        const keys = /* @__PURE__ */ new Set();
        let current = null;
        instance.__v_cache = cache;
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch , m: move , um: _unmount , o: { createElement  }  }  } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, namespace, optimized)=>{
            const instance2 = vnode.component;
            move(vnode, container, anchor, 0, parentSuspense);
            patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, namespace, vnode.slotScopeIds, optimized);
            queuePostRenderEffect(()=>{
                instance2.isDeactivated = false;
                if (instance2.a) (0, _shared.invokeArrayFns)(instance2.a);
                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }, parentSuspense);
            devtoolsComponentAdded(instance2);
        };
        sharedContext.deactivate = (vnode)=>{
            const instance2 = vnode.component;
            invalidateMount(instance2.m);
            invalidateMount(instance2.a);
            move(vnode, storageContainer, null, 1, parentSuspense);
            queuePostRenderEffect(()=>{
                if (instance2.da) (0, _shared.invokeArrayFns)(instance2.da);
                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
                if (vnodeHook) invokeVNodeHook(vnodeHook, instance2.parent, vnode);
                instance2.isDeactivated = true;
            }, parentSuspense);
            devtoolsComponentAdded(instance2);
            instance2.__keepAliveStorageContainer = storageContainer;
        };
        function unmount(vnode) {
            resetShapeFlag(vnode);
            _unmount(vnode, instance, parentSuspense, true);
        }
        function pruneCache(filter) {
            cache.forEach((vnode, key)=>{
                const name = getComponentName(vnode.type);
                if (name && !filter(name)) pruneCacheEntry(key);
            });
        }
        function pruneCacheEntry(key) {
            const cached = cache.get(key);
            if (cached && (!current || !isSameVNodeType(cached, current))) unmount(cached);
            else if (current) resetShapeFlag(current);
            cache.delete(key);
            keys.delete(key);
        }
        watch(()=>[
                props.include,
                props.exclude
            ], ([include, exclude])=>{
            include && pruneCache((name)=>matches(include, name));
            exclude && pruneCache((name)=>!matches(exclude, name));
        }, // prune post-render after `current` has been updated
        {
            flush: "post",
            deep: true
        });
        let pendingCacheKey = null;
        const cacheSubtree = ()=>{
            if (pendingCacheKey != null) {
                if (isSuspense(instance.subTree.type)) queuePostRenderEffect(()=>{
                    cache.set(pendingCacheKey, getInnerChild(instance.subTree));
                }, instance.subTree.suspense);
                else cache.set(pendingCacheKey, getInnerChild(instance.subTree));
            }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(()=>{
            cache.forEach((cached)=>{
                const { subTree , suspense  } = instance;
                const vnode = getInnerChild(subTree);
                if (cached.type === vnode.type && cached.key === vnode.key) {
                    resetShapeFlag(vnode);
                    const da = vnode.component.da;
                    da && queuePostRenderEffect(da, suspense);
                    return;
                }
                unmount(cached);
            });
        });
        return ()=>{
            pendingCacheKey = null;
            if (!slots.default) return current = null;
            const children = slots.default();
            const rawVNode = children[0];
            if (children.length > 1) {
                warn$1(`KeepAlive should contain exactly one component child.`);
                current = null;
                return children;
            } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
                current = null;
                return rawVNode;
            }
            let vnode = getInnerChild(rawVNode);
            if (vnode.type === Comment) {
                current = null;
                return vnode;
            }
            const comp = vnode.type;
            const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
            const { include , exclude , max  } = props;
            if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
                vnode.shapeFlag &= -257;
                current = vnode;
                return rawVNode;
            }
            const key = vnode.key == null ? comp : vnode.key;
            const cachedVNode = cache.get(key);
            if (vnode.el) {
                vnode = cloneVNode(vnode);
                if (rawVNode.shapeFlag & 128) rawVNode.ssContent = vnode;
            }
            pendingCacheKey = key;
            if (cachedVNode) {
                vnode.el = cachedVNode.el;
                vnode.component = cachedVNode.component;
                if (vnode.transition) setTransitionHooks(vnode, vnode.transition);
                vnode.shapeFlag |= 512;
                keys.delete(key);
                keys.add(key);
            } else {
                keys.add(key);
                if (max && keys.size > parseInt(max, 10)) pruneCacheEntry(keys.values().next().value);
            }
            vnode.shapeFlag |= 256;
            current = vnode;
            return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
    }
};
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
    if ((0, _shared.isArray)(pattern)) return pattern.some((p)=>matches(p, name));
    else if ((0, _shared.isString)(pattern)) return pattern.split(",").includes(name);
    else if ((0, _shared.isRegExp)(pattern)) {
        pattern.lastIndex = 0;
        return pattern.test(name);
    }
    return false;
}
function onActivated(hook, target) {
    registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
    registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
    const wrappedHook = hook.__wdc || (hook.__wdc = ()=>{
        let current = target;
        while(current){
            if (current.isDeactivated) return;
            current = current.parent;
        }
        return hook();
    });
    injectHook(type, wrappedHook, target);
    if (target) {
        let current = target.parent;
        while(current && current.parent){
            if (isKeepAlive(current.parent.vnode)) injectToKeepAliveRoot(wrappedHook, type, target, current);
            current = current.parent;
        }
    }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
    const injected = injectHook(type, hook, keepAliveRoot, true);
    onUnmounted(()=>{
        (0, _shared.remove)(keepAliveRoot[type], injected);
    }, target);
}
function resetShapeFlag(vnode) {
    vnode.shapeFlag &= -257;
    vnode.shapeFlag &= -513;
}
function getInnerChild(vnode) {
    return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
    if (target) {
        const hooks = target[type] || (target[type] = []);
        const wrappedHook = hook.__weh || (hook.__weh = (...args)=>{
            (0, _reactivity.pauseTracking)();
            const reset = setCurrentInstance(target);
            const res = callWithAsyncErrorHandling(hook, target, type, args);
            reset();
            (0, _reactivity.resetTracking)();
            return res;
        });
        if (prepend) hooks.unshift(wrappedHook);
        else hooks.push(wrappedHook);
        return wrappedHook;
    } else {
        const apiName = (0, _shared.toHandlerKey)(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
        warn$1(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup().` + ` If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
    }
}
const createHook = (lifecycle)=>(hook, target = currentInstance)=>{
        if (!isInSSRComponentSetup || lifecycle === "sp") injectHook(lifecycle, (...args)=>hook(...args), target);
    };
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
    injectHook("ec", hook, target);
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
    if ((0, _shared.isString)(component)) return resolveAsset(COMPONENTS, component, false) || component;
    else return component || NULL_DYNAMIC_COMPONENT;
}
function resolveDirective(name) {
    return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
    const instance = currentRenderingInstance || currentInstance;
    if (instance) {
        const Component = instance.type;
        if (type === COMPONENTS) {
            const selfName = getComponentName(Component, false);
            if (selfName && (selfName === name || selfName === (0, _shared.camelize)(name) || selfName === (0, _shared.capitalize)((0, _shared.camelize)(name)))) return Component;
        }
        const res = // local registration
        // check instance[type] first which is resolved for options API
        resolve(instance[type] || Component[type], name) || // global registration
        resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) return Component;
        if (warnMissing && !res) {
            const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
            warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
        }
        return res;
    } else warn$1(`resolve${(0, _shared.capitalize)(type.slice(0, -1))} can only be used in render() or setup().`);
}
function resolve(registry, name) {
    return registry && (registry[name] || registry[(0, _shared.camelize)(name)] || registry[(0, _shared.capitalize)((0, _shared.camelize)(name))]);
}
function renderList(source, renderItem, cache, index) {
    let ret;
    const cached = cache && cache[index];
    const sourceIsArray = (0, _shared.isArray)(source);
    if (sourceIsArray || (0, _shared.isString)(source)) {
        const sourceIsReactiveArray = sourceIsArray && (0, _reactivity.isReactive)(source);
        let needsWrap = false;
        let isReadonlySource = false;
        if (sourceIsReactiveArray) {
            needsWrap = !(0, _reactivity.isShallow)(source);
            isReadonlySource = (0, _reactivity.isReadonly)(source);
            source = (0, _reactivity.shallowReadArray)(source);
        }
        ret = new Array(source.length);
        for(let i = 0, l = source.length; i < l; i++)ret[i] = renderItem(needsWrap ? isReadonlySource ? (0, _reactivity.toReadonly)((0, _reactivity.toReactive)(source[i])) : (0, _reactivity.toReactive)(source[i]) : source[i], i, void 0, cached && cached[i]);
    } else if (typeof source === "number") {
        if (!Number.isInteger(source)) warn$1(`The v-for range expect an integer value but got ${source}.`);
        ret = new Array(source);
        for(let i = 0; i < source; i++)ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
    } else if ((0, _shared.isObject)(source)) {
        if (source[Symbol.iterator]) ret = Array.from(source, (item, i)=>renderItem(item, i, void 0, cached && cached[i]));
        else {
            const keys = Object.keys(source);
            ret = new Array(keys.length);
            for(let i = 0, l = keys.length; i < l; i++){
                const key = keys[i];
                ret[i] = renderItem(source[key], key, i, cached && cached[i]);
            }
        }
    } else ret = [];
    if (cache) cache[index] = ret;
    return ret;
}
function createSlots(slots, dynamicSlots) {
    for(let i = 0; i < dynamicSlots.length; i++){
        const slot = dynamicSlots[i];
        if ((0, _shared.isArray)(slot)) for(let j = 0; j < slot.length; j++)slots[slot[j].name] = slot[j].fn;
        else if (slot) slots[slot.name] = slot.key ? (...args)=>{
            const res = slot.fn(...args);
            if (res) res.key = slot.key;
            return res;
        } : slot.fn;
    }
    return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
    if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {
        if (name !== "default") props.name = name;
        return openBlock(), createBlock(Fragment, null, [
            createVNode("slot", props, fallback && fallback())
        ], 64);
    }
    let slot = slots[name];
    if (slot && slot.length > 1) {
        warn$1(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
        slot = ()=>[];
    }
    if (slot && slot._c) slot._d = false;
    openBlock();
    const validSlotContent = slot && ensureValidVNode(slot(props));
    const slotKey = props.key || // slot content array of a dynamic conditional slot may have a branch
    // key attached in the `createSlots` helper, respect that
    validSlotContent && validSlotContent.key;
    const rendered = createBlock(Fragment, {
        key: (slotKey && !(0, _shared.isSymbol)(slotKey) ? slotKey : `_${name}`) + // #7256 force differentiate fallback content from actual content
        (!validSlotContent && fallback ? "_fb" : "")
    }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
    if (!noSlotted && rendered.scopeId) rendered.slotScopeIds = [
        rendered.scopeId + "-s"
    ];
    if (slot && slot._c) slot._d = true;
    return rendered;
}
function ensureValidVNode(vnodes) {
    return vnodes.some((child)=>{
        if (!isVNode(child)) return true;
        if (child.type === Comment) return false;
        if (child.type === Fragment && !ensureValidVNode(child.children)) return false;
        return true;
    }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
    const ret = {};
    if (!(0, _shared.isObject)(obj)) {
        warn$1(`v-on with no argument expects an object value.`);
        return ret;
    }
    for(const key in obj)ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : (0, _shared.toHandlerKey)(key)] = obj[key];
    return ret;
}
const getPublicInstance = (i)=>{
    if (!i) return null;
    if (isStatefulComponent(i)) return getComponentPublicInstance(i);
    return getPublicInstance(i.parent);
};
const publicPropertiesMap = // Move PURE marker to new line to workaround compiler discarding it
// due to type annotation
/* @__PURE__ */ (0, _shared.extend)(/* @__PURE__ */ Object.create(null), {
    $: (i)=>i,
    $el: (i)=>i.vnode.el,
    $data: (i)=>i.data,
    $props: (i)=>(0, _reactivity.shallowReadonly)(i.props),
    $attrs: (i)=>(0, _reactivity.shallowReadonly)(i.attrs),
    $slots: (i)=>(0, _reactivity.shallowReadonly)(i.slots),
    $refs: (i)=>(0, _reactivity.shallowReadonly)(i.refs),
    $parent: (i)=>getPublicInstance(i.parent),
    $root: (i)=>getPublicInstance(i.root),
    $host: (i)=>i.ce,
    $emit: (i)=>i.emit,
    $options: (i)=>__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
    $forceUpdate: (i)=>i.f || (i.f = ()=>{
            queueJob(i.update);
        }),
    $nextTick: (i)=>i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i)=>__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : (0, _shared.NOOP)
});
const isReservedPrefix = (key)=>key === "_" || key === "$";
const hasSetupBinding = (state, key)=>state !== (0, _shared.EMPTY_OBJ) && !state.__isScriptSetup && (0, _shared.hasOwn)(state, key);
const PublicInstanceProxyHandlers = {
    get ({ _: instance  }, key) {
        if (key === "__v_skip") return true;
        const { ctx , setupState , data , props , accessCache , type , appContext  } = instance;
        if (key === "__isVue") return true;
        let normalizedProps;
        if (key[0] !== "$") {
            const n = accessCache[key];
            if (n !== void 0) switch(n){
                case 1 /* SETUP */ :
                    return setupState[key];
                case 2 /* DATA */ :
                    return data[key];
                case 4 /* CONTEXT */ :
                    return ctx[key];
                case 3 /* PROPS */ :
                    return props[key];
            }
            else if (hasSetupBinding(setupState, key)) {
                accessCache[key] = 1 /* SETUP */ ;
                return setupState[key];
            } else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) {
                accessCache[key] = 2 /* DATA */ ;
                return data[key];
            } else if (// only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key)) {
                accessCache[key] = 3 /* PROPS */ ;
                return props[key];
            } else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
                accessCache[key] = 4 /* CONTEXT */ ;
                return ctx[key];
            } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) accessCache[key] = 0 /* OTHER */ ;
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        if (publicGetter) {
            if (key === "$attrs") {
                (0, _reactivity.track)(instance.attrs, "get", "");
                markAttrsAccessed();
            } else if (key === "$slots") (0, _reactivity.track)(instance, "get", key);
            return publicGetter(instance);
        } else if (// css module (injected by vue-loader)
        (cssModule = type.__cssModules) && (cssModule = cssModule[key])) return cssModule;
        else if (ctx !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(ctx, key)) {
            accessCache[key] = 4 /* CONTEXT */ ;
            return ctx[key];
        } else if (// global properties
        globalProperties = appContext.config.globalProperties, (0, _shared.hasOwn)(globalProperties, key)) return globalProperties[key];
        else if (currentRenderingInstance && (!(0, _shared.isString)(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf("__v") !== 0)) {
            if (data !== (0, _shared.EMPTY_OBJ) && isReservedPrefix(key[0]) && (0, _shared.hasOwn)(data, key)) warn$1(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
            else if (instance === currentRenderingInstance) warn$1(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
        }
    },
    set ({ _: instance  }, key, value) {
        const { data , setupState , ctx  } = instance;
        if (hasSetupBinding(setupState, key)) {
            setupState[key] = value;
            return true;
        } else if ((0, setupState.__isScriptSetup) && (0, _shared.hasOwn)(setupState, key)) {
            warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
            return false;
        } else if (data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key)) {
            data[key] = value;
            return true;
        } else if ((0, _shared.hasOwn)(instance.props, key)) {
            warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
            return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
            warn$1(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`);
            return false;
        } else if (key in instance.appContext.config.globalProperties) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            value
        });
        else ctx[key] = value;
        return true;
    },
    has ({ _: { data , setupState , accessCache , ctx , appContext , propsOptions  }  }, key) {
        let normalizedProps;
        return !!accessCache[key] || data !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasOwn)(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && (0, _shared.hasOwn)(normalizedProps, key) || (0, _shared.hasOwn)(ctx, key) || (0, _shared.hasOwn)(publicPropertiesMap, key) || (0, _shared.hasOwn)(appContext.config.globalProperties, key);
    },
    defineProperty (target, key, descriptor) {
        if (descriptor.get != null) target._.accessCache[key] = 0;
        else if ((0, _shared.hasOwn)(descriptor, "value")) this.set(target, key, descriptor.value, null);
        return Reflect.defineProperty(target, key, descriptor);
    }
};
PublicInstanceProxyHandlers.ownKeys = (target)=>{
    warn$1(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
    return Reflect.ownKeys(target);
};
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ (0, _shared.extend)({}, PublicInstanceProxyHandlers, {
    get (target, key) {
        if (key === Symbol.unscopables) return;
        return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has (_, key) {
        const has = key[0] !== "_" && !(0, _shared.isGloballyAllowed)(key);
        if (!has && PublicInstanceProxyHandlers.has(_, key)) warn$1(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        return has;
    }
});
function createDevRenderContext(instance) {
    const target = {};
    Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: ()=>instance
    });
    Object.keys(publicPropertiesMap).forEach((key)=>{
        Object.defineProperty(target, key, {
            configurable: true,
            enumerable: false,
            get: ()=>publicPropertiesMap[key](instance),
            // intercepted by the proxy so no need for implementation,
            // but needed to prevent set errors
            set: (0, _shared.NOOP)
        });
    });
    return target;
}
function exposePropsOnRenderContext(instance) {
    const { ctx , propsOptions: [propsOptions]  } = instance;
    if (propsOptions) Object.keys(propsOptions).forEach((key)=>{
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>instance.props[key],
            set: (0, _shared.NOOP)
        });
    });
}
function exposeSetupStateOnRenderContext(instance) {
    const { ctx , setupState  } = instance;
    Object.keys((0, _reactivity.toRaw)(setupState)).forEach((key)=>{
        if (!setupState.__isScriptSetup) {
            if (isReservedPrefix(key[0])) {
                warn$1(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
                return;
            }
            Object.defineProperty(ctx, key, {
                enumerable: true,
                configurable: true,
                get: ()=>setupState[key],
                set: (0, _shared.NOOP)
            });
        }
    });
}
const warnRuntimeUsage = (method)=>warn$1(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
function defineProps() {
    warnRuntimeUsage(`defineProps`);
    return null;
}
function defineEmits() {
    warnRuntimeUsage(`defineEmits`);
    return null;
}
function defineExpose(exposed) {
    warnRuntimeUsage(`defineExpose`);
}
function defineOptions(options) {
    warnRuntimeUsage(`defineOptions`);
}
function defineSlots() {
    warnRuntimeUsage(`defineSlots`);
    return null;
}
function defineModel() {
    warnRuntimeUsage("defineModel");
}
function withDefaults(props, defaults) {
    warnRuntimeUsage(`withDefaults`);
    return null;
}
function useSlots() {
    return getContext().slots;
}
function useAttrs() {
    return getContext().attrs;
}
function getContext() {
    const i = getCurrentInstance();
    if (!i) warn$1(`useContext() called without active instance.`);
    return i.setupContext || (i.setupContext = createSetupContext(i));
}
function normalizePropsOrEmits(props) {
    return (0, _shared.isArray)(props) ? props.reduce((normalized, p)=>(normalized[p] = null, normalized), {}) : props;
}
function mergeDefaults(raw, defaults) {
    const props = normalizePropsOrEmits(raw);
    for(const key in defaults){
        if (key.startsWith("__skip")) continue;
        let opt = props[key];
        if (opt) {
            if ((0, _shared.isArray)(opt) || (0, _shared.isFunction)(opt)) opt = props[key] = {
                type: opt,
                default: defaults[key]
            };
            else opt.default = defaults[key];
        } else if (opt === null) opt = props[key] = {
            default: defaults[key]
        };
        else warn$1(`props default key "${key}" has no corresponding declaration.`);
        if (opt && defaults[`__skip_${key}`]) opt.skipFactory = true;
    }
    return props;
}
function mergeModels(a, b) {
    if (!a || !b) return a || b;
    if ((0, _shared.isArray)(a) && (0, _shared.isArray)(b)) return a.concat(b);
    return (0, _shared.extend)({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
}
function createPropsRestProxy(props, excludedKeys) {
    const ret = {};
    for(const key in props)if (!excludedKeys.includes(key)) Object.defineProperty(ret, key, {
        enumerable: true,
        get: ()=>props[key]
    });
    return ret;
}
function withAsyncContext(getAwaitable) {
    const ctx = getCurrentInstance();
    if (!ctx) warn$1(`withAsyncContext called without active current instance. This is likely a bug.`);
    let awaitable = getAwaitable();
    unsetCurrentInstance();
    if ((0, _shared.isPromise)(awaitable)) awaitable = awaitable.catch((e)=>{
        setCurrentInstance(ctx);
        throw e;
    });
    return [
        awaitable,
        ()=>setCurrentInstance(ctx)
    ];
}
function createDuplicateChecker() {
    const cache = /* @__PURE__ */ Object.create(null);
    return (type, key)=>{
        if (cache[key]) warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
        else cache[key] = type;
    };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
    const options = resolveMergedOptions(instance);
    const publicThis = instance.proxy;
    const ctx = instance.ctx;
    shouldCacheAccess = false;
    if (options.beforeCreate) callHook(options.beforeCreate, instance, "bc");
    const { // state
    data: dataOptions , computed: computedOptions , methods , watch: watchOptions , provide: provideOptions , inject: injectOptions , // lifecycle
    created , beforeMount , mounted , beforeUpdate , updated , activated , deactivated , beforeDestroy , beforeUnmount , destroyed , unmounted , render , renderTracked , renderTriggered , errorCaptured , serverPrefetch , // public API
    expose , inheritAttrs , // assets
    components , directives , filters  } = options;
    const checkDuplicateProperties = createDuplicateChecker();
    {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) for(const key in propsOptions)checkDuplicateProperties("Props" /* PROPS */ , key);
    }
    if (injectOptions) resolveInjections(injectOptions, ctx, checkDuplicateProperties);
    if (methods) for(const key in methods){
        const methodHandler = methods[key];
        if ((0, _shared.isFunction)(methodHandler)) {
            Object.defineProperty(ctx, key, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
            });
            checkDuplicateProperties("Methods" /* METHODS */ , key);
        } else warn$1(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
    }
    if (dataOptions) {
        if (!(0, _shared.isFunction)(dataOptions)) warn$1(`The data option must be a function. Plain object usage is no longer supported.`);
        const data = dataOptions.call(publicThis, publicThis);
        if ((0, _shared.isPromise)(data)) warn$1(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
        if (!(0, _shared.isObject)(data)) warn$1(`data() should return an object.`);
        else {
            instance.data = (0, _reactivity.reactive)(data);
            for(const key in data){
                checkDuplicateProperties("Data" /* DATA */ , key);
                if (!isReservedPrefix(key[0])) Object.defineProperty(ctx, key, {
                    configurable: true,
                    enumerable: true,
                    get: ()=>data[key],
                    set: (0, _shared.NOOP)
                });
            }
        }
    }
    shouldCacheAccess = true;
    if (computedOptions) for(const key in computedOptions){
        const opt = computedOptions[key];
        const get = (0, _shared.isFunction)(opt) ? opt.bind(publicThis, publicThis) : (0, _shared.isFunction)(opt.get) ? opt.get.bind(publicThis, publicThis) : (0, _shared.NOOP);
        if (get === (0, _shared.NOOP)) warn$1(`Computed property "${key}" has no getter.`);
        const set = !(0, _shared.isFunction)(opt) && (0, _shared.isFunction)(opt.set) ? opt.set.bind(publicThis) : ()=>{
            warn$1(`Write operation failed: computed property "${key}" is readonly.`);
        };
        const c = computed({
            get,
            set
        });
        Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>c.value,
            set: (v1)=>c.value = v1
        });
        checkDuplicateProperties("Computed" /* COMPUTED */ , key);
    }
    if (watchOptions) for(const key in watchOptions)createWatcher(watchOptions[key], ctx, publicThis, key);
    if (provideOptions) {
        const provides = (0, _shared.isFunction)(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key)=>{
            provide(key, provides[key]);
        });
    }
    if (created) callHook(created, instance, "c");
    function registerLifecycleHook(register, hook) {
        if ((0, _shared.isArray)(hook)) hook.forEach((_hook)=>register(_hook.bind(publicThis)));
        else if (hook) register(hook.bind(publicThis));
    }
    registerLifecycleHook(onBeforeMount, beforeMount);
    registerLifecycleHook(onMounted, mounted);
    registerLifecycleHook(onBeforeUpdate, beforeUpdate);
    registerLifecycleHook(onUpdated, updated);
    registerLifecycleHook(onActivated, activated);
    registerLifecycleHook(onDeactivated, deactivated);
    registerLifecycleHook(onErrorCaptured, errorCaptured);
    registerLifecycleHook(onRenderTracked, renderTracked);
    registerLifecycleHook(onRenderTriggered, renderTriggered);
    registerLifecycleHook(onBeforeUnmount, beforeUnmount);
    registerLifecycleHook(onUnmounted, unmounted);
    registerLifecycleHook(onServerPrefetch, serverPrefetch);
    if ((0, _shared.isArray)(expose)) {
        if (expose.length) {
            const exposed = instance.exposed || (instance.exposed = {});
            expose.forEach((key)=>{
                Object.defineProperty(exposed, key, {
                    get: ()=>publicThis[key],
                    set: (val)=>publicThis[key] = val
                });
            });
        } else if (!instance.exposed) instance.exposed = {};
    }
    if (render && instance.render === (0, _shared.NOOP)) instance.render = render;
    if (inheritAttrs != null) instance.inheritAttrs = inheritAttrs;
    if (components) instance.components = components;
    if (directives) instance.directives = directives;
    if (serverPrefetch) markAsyncBoundary(instance);
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = (0, _shared.NOOP)) {
    if ((0, _shared.isArray)(injectOptions)) injectOptions = normalizeInject(injectOptions);
    for(const key in injectOptions){
        const opt = injectOptions[key];
        let injected;
        if ((0, _shared.isObject)(opt)) {
            if ("default" in opt) injected = inject(opt.from || key, opt.default, true);
            else injected = inject(opt.from || key);
        } else injected = inject(opt);
        if ((0, _reactivity.isRef)(injected)) Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: ()=>injected.value,
            set: (v1)=>injected.value = v1
        });
        else ctx[key] = injected;
        checkDuplicateProperties("Inject" /* INJECT */ , key);
    }
}
function callHook(hook, instance, type) {
    callWithAsyncErrorHandling((0, _shared.isArray)(hook) ? hook.map((h)=>h.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
    let getter = key.includes(".") ? createPathGetter(publicThis, key) : ()=>publicThis[key];
    if ((0, _shared.isString)(raw)) {
        const handler = ctx[raw];
        if ((0, _shared.isFunction)(handler)) watch(getter, handler);
        else warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
    } else if ((0, _shared.isFunction)(raw)) watch(getter, raw.bind(publicThis));
    else if ((0, _shared.isObject)(raw)) {
        if ((0, _shared.isArray)(raw)) raw.forEach((r)=>createWatcher(r, ctx, publicThis, key));
        else {
            const handler = (0, _shared.isFunction)(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
            if ((0, _shared.isFunction)(handler)) watch(getter, handler, raw);
            else warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
        }
    } else warn$1(`Invalid watch option: "${key}"`, raw);
}
function resolveMergedOptions(instance) {
    const base = instance.type;
    const { mixins , extends: extendsOptions  } = base;
    const { mixins: globalMixins , optionsCache: cache , config: { optionMergeStrategies  }  } = instance.appContext;
    const cached = cache.get(base);
    let resolved;
    if (cached) resolved = cached;
    else if (!globalMixins.length && !mixins && !extendsOptions) resolved = base;
    else {
        resolved = {};
        if (globalMixins.length) globalMixins.forEach((m)=>mergeOptions(resolved, m, optionMergeStrategies, true));
        mergeOptions(resolved, base, optionMergeStrategies);
    }
    if ((0, _shared.isObject)(base)) cache.set(base, resolved);
    return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
    const { mixins , extends: extendsOptions  } = from;
    if (extendsOptions) mergeOptions(to, extendsOptions, strats, true);
    if (mixins) mixins.forEach((m)=>mergeOptions(to, m, strats, true));
    for(const key in from)if (asMixin && key === "expose") warn$1(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
    else {
        const strat = internalOptionMergeStrats[key] || strats && strats[key];
        to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
    return to;
}
const internalOptionMergeStrats = {
    data: mergeDataFn,
    props: mergeEmitsOrPropsOptions,
    emits: mergeEmitsOrPropsOptions,
    // objects
    methods: mergeObjectOptions,
    computed: mergeObjectOptions,
    // lifecycle
    beforeCreate: mergeAsArray,
    created: mergeAsArray,
    beforeMount: mergeAsArray,
    mounted: mergeAsArray,
    beforeUpdate: mergeAsArray,
    updated: mergeAsArray,
    beforeDestroy: mergeAsArray,
    beforeUnmount: mergeAsArray,
    destroyed: mergeAsArray,
    unmounted: mergeAsArray,
    activated: mergeAsArray,
    deactivated: mergeAsArray,
    errorCaptured: mergeAsArray,
    serverPrefetch: mergeAsArray,
    // assets
    components: mergeObjectOptions,
    directives: mergeObjectOptions,
    // watch
    watch: mergeWatchOptions,
    // provide / inject
    provide: mergeDataFn,
    inject: mergeInject
};
function mergeDataFn(to, from) {
    if (!from) return to;
    if (!to) return from;
    return function mergedDataFn() {
        return (0, _shared.extend)((0, _shared.isFunction)(to) ? to.call(this, this) : to, (0, _shared.isFunction)(from) ? from.call(this, this) : from);
    };
}
function mergeInject(to, from) {
    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
    if ((0, _shared.isArray)(raw)) {
        const res = {};
        for(let i = 0; i < raw.length; i++)res[raw[i]] = raw[i];
        return res;
    }
    return raw;
}
function mergeAsArray(to, from) {
    return to ? [
        ...new Set([].concat(to, from))
    ] : from;
}
function mergeObjectOptions(to, from) {
    return to ? (0, _shared.extend)(/* @__PURE__ */ Object.create(null), to, from) : from;
}
function mergeEmitsOrPropsOptions(to, from) {
    if (to) {
        if ((0, _shared.isArray)(to) && (0, _shared.isArray)(from)) return [
            .../* @__PURE__ */ new Set([
                ...to,
                ...from
            ])
        ];
        return (0, _shared.extend)(/* @__PURE__ */ Object.create(null), normalizePropsOrEmits(to), normalizePropsOrEmits(from != null ? from : {}));
    } else return from;
}
function mergeWatchOptions(to, from) {
    if (!to) return from;
    if (!from) return to;
    const merged = (0, _shared.extend)(/* @__PURE__ */ Object.create(null), to);
    for(const key in from)merged[key] = mergeAsArray(to[key], from[key]);
    return merged;
}
function createAppContext() {
    return {
        app: null,
        config: {
            isNativeTag: (0, _shared.NO),
            performance: false,
            globalProperties: {},
            optionMergeStrategies: {},
            errorHandler: void 0,
            warnHandler: void 0,
            compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: /* @__PURE__ */ Object.create(null),
        optionsCache: /* @__PURE__ */ new WeakMap(),
        propsCache: /* @__PURE__ */ new WeakMap(),
        emitsCache: /* @__PURE__ */ new WeakMap()
    };
}
let uid$1 = 0;
function createAppAPI(render, hydrate) {
    return function createApp(rootComponent, rootProps = null) {
        if (!(0, _shared.isFunction)(rootComponent)) rootComponent = (0, _shared.extend)({}, rootComponent);
        if (rootProps != null && !(0, _shared.isObject)(rootProps)) {
            warn$1(`root props passed to app.mount() must be an object.`);
            rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = /* @__PURE__ */ new WeakSet();
        const pluginCleanupFns = [];
        let isMounted = false;
        const app = context.app = {
            _uid: uid$1++,
            _component: rootComponent,
            _props: rootProps,
            _container: null,
            _context: context,
            _instance: null,
            version,
            get config () {
                return context.config;
            },
            set config (v){
                warn$1(`app.config cannot be replaced. Modify individual options instead.`);
            },
            use (plugin, ...options) {
                if (installedPlugins.has(plugin)) warn$1(`Plugin has already been applied to target app.`);
                else if (plugin && (0, _shared.isFunction)(plugin.install)) {
                    installedPlugins.add(plugin);
                    plugin.install(app, ...options);
                } else if ((0, _shared.isFunction)(plugin)) {
                    installedPlugins.add(plugin);
                    plugin(app, ...options);
                } else warn$1(`A plugin must either be a function or an object with an "install" function.`);
                return app;
            },
            mixin (mixin) {
                if (__VUE_OPTIONS_API__) {
                    if (!context.mixins.includes(mixin)) context.mixins.push(mixin);
                    else warn$1("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
                } else warn$1("Mixins are only available in builds supporting Options API");
                return app;
            },
            component (name, component) {
                validateComponentName(name, context.config);
                if (!component) return context.components[name];
                if (0, context.components[name]) warn$1(`Component "${name}" has already been registered in target app.`);
                context.components[name] = component;
                return app;
            },
            directive (name, directive) {
                validateDirectiveName(name);
                if (!directive) return context.directives[name];
                if (0, context.directives[name]) warn$1(`Directive "${name}" has already been registered in target app.`);
                context.directives[name] = directive;
                return app;
            },
            mount (rootContainer, isHydrate, namespace) {
                if (!isMounted) {
                    if (0, rootContainer.__vue_app__) warn$1(`There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`);
                    const vnode = app._ceVNode || createVNode(rootComponent, rootProps);
                    vnode.appContext = context;
                    if (namespace === true) namespace = "svg";
                    else if (namespace === false) namespace = void 0;
                    context.reload = ()=>{
                        const cloned = cloneVNode(vnode);
                        cloned.el = null;
                        render(cloned, rootContainer, namespace);
                    };
                    if (isHydrate && hydrate) hydrate(vnode, rootContainer);
                    else render(vnode, rootContainer, namespace);
                    isMounted = true;
                    app._container = rootContainer;
                    rootContainer.__vue_app__ = app;
                    app._instance = vnode.component;
                    devtoolsInitApp(app, version);
                    return getComponentPublicInstance(vnode.component);
                } else warn$1(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
            },
            onUnmount (cleanupFn) {
                if (typeof cleanupFn !== "function") warn$1(`Expected function as first argument to app.onUnmount(), but got ${typeof cleanupFn}`);
                pluginCleanupFns.push(cleanupFn);
            },
            unmount () {
                if (isMounted) {
                    callWithAsyncErrorHandling(pluginCleanupFns, app._instance, 16);
                    render(null, app._container);
                    app._instance = null;
                    devtoolsUnmountApp(app);
                    delete app._container.__vue_app__;
                } else warn$1(`Cannot unmount an app that is not mounted.`);
            },
            provide (key, value) {
                if (key in context.provides) {
                    if ((0, _shared.hasOwn)(context.provides, key)) warn$1(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
                    else warn$1(`App already provides property with key "${String(key)}" inherited from its parent element. It will be overwritten with the new value.`);
                }
                context.provides[key] = value;
                return app;
            },
            runWithContext (fn) {
                const lastApp = currentApp;
                currentApp = app;
                try {
                    return fn();
                } finally{
                    currentApp = lastApp;
                }
            }
        };
        return app;
    };
}
let currentApp = null;
function provide(key, value) {
    if (!currentInstance) warn$1(`provide() can only be used inside setup().`);
    else {
        let provides = currentInstance.provides;
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) provides = currentInstance.provides = Object.create(parentProvides);
        provides[key] = value;
    }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
    const instance = currentInstance || currentRenderingInstance;
    if (instance || currentApp) {
        let provides = currentApp ? currentApp._context.provides : instance ? instance.parent == null || instance.ce ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : void 0;
        if (provides && key in provides) return provides[key];
        else if (arguments.length > 1) return treatDefaultAsFactory && (0, _shared.isFunction)(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
        else warn$1(`injection "${String(key)}" not found.`);
    } else warn$1(`inject() can only be used inside setup() or functional components.`);
}
function hasInjectionContext() {
    return !!(currentInstance || currentRenderingInstance || currentApp);
}
const internalObjectProto = {};
const createInternalObject = ()=>Object.create(internalObjectProto);
const isInternalObject = (obj)=>Object.getPrototypeOf(obj) === internalObjectProto;
function initProps(instance, rawProps, isStateful, isSSR = false) {
    const props = {};
    const attrs = createInternalObject();
    instance.propsDefaults = /* @__PURE__ */ Object.create(null);
    setFullProps(instance, rawProps, props, attrs);
    for(const key in instance.propsOptions[0])if (!(key in props)) props[key] = void 0;
    validateProps(rawProps || {}, props, instance);
    if (isStateful) instance.props = isSSR ? props : (0, _reactivity.shallowReactive)(props);
    else if (!instance.type.props) instance.props = attrs;
    else instance.props = props;
    instance.attrs = attrs;
}
function isInHmrContext(instance) {
    while(instance){
        if (instance.type.__hmrId) return true;
        instance = instance.parent;
    }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
    const { props , attrs , vnode: { patchFlag  }  } = instance;
    const rawCurrentProps = (0, _reactivity.toRaw)(props);
    const [options] = instance.propsOptions;
    let hasAttrsChanged = false;
    if (// always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {
        if (patchFlag & 8) {
            const propsToUpdate = instance.vnode.dynamicProps;
            for(let i = 0; i < propsToUpdate.length; i++){
                let key = propsToUpdate[i];
                if (isEmitListener(instance.emitsOptions, key)) continue;
                const value = rawProps[key];
                if (options) {
                    if ((0, _shared.hasOwn)(attrs, key)) {
                        if (value !== attrs[key]) {
                            attrs[key] = value;
                            hasAttrsChanged = true;
                        }
                    } else {
                        const camelizedKey = (0, _shared.camelize)(key);
                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
                    }
                } else if (value !== attrs[key]) {
                    attrs[key] = value;
                    hasAttrsChanged = true;
                }
            }
        }
    } else {
        if (setFullProps(instance, rawProps, props, attrs)) hasAttrsChanged = true;
        let kebabKey;
        for(const key in rawCurrentProps)if (!rawProps || // for camelCase
        !(0, _shared.hasOwn)(rawProps, key) && // it's possible the original props was passed in as kebab-case
        // and converted to camelCase (#955)
        ((kebabKey = (0, _shared.hyphenate)(key)) === key || !(0, _shared.hasOwn)(rawProps, kebabKey))) {
            if (options) {
                if (rawPrevProps && // for camelCase
                (rawPrevProps[key] !== void 0 || // for kebab-case
                rawPrevProps[kebabKey] !== void 0)) props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
            } else delete props[key];
        }
        if (attrs !== rawCurrentProps) {
            for(const key in attrs)if (!rawProps || !(0, _shared.hasOwn)(rawProps, key) && true) {
                delete attrs[key];
                hasAttrsChanged = true;
            }
        }
    }
    if (hasAttrsChanged) (0, _reactivity.trigger)(instance.attrs, "set", "");
    validateProps(rawProps || {}, props, instance);
}
function setFullProps(instance, rawProps, props, attrs) {
    const [options, needCastKeys] = instance.propsOptions;
    let hasAttrsChanged = false;
    let rawCastValues;
    if (rawProps) for(let key in rawProps){
        if ((0, _shared.isReservedProp)(key)) continue;
        const value = rawProps[key];
        let camelKey;
        if (options && (0, _shared.hasOwn)(options, camelKey = (0, _shared.camelize)(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) props[camelKey] = value;
            else (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (!(key in attrs) || value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
            }
        }
    }
    if (needCastKeys) {
        const rawCurrentProps = (0, _reactivity.toRaw)(props);
        const castValues = rawCastValues || (0, _shared.EMPTY_OBJ);
        for(let i = 0; i < needCastKeys.length; i++){
            const key = needCastKeys[i];
            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !(0, _shared.hasOwn)(castValues, key));
        }
    }
    return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
    const opt = options[key];
    if (opt != null) {
        const hasDefault = (0, _shared.hasOwn)(opt, "default");
        if (hasDefault && value === void 0) {
            const defaultValue = opt.default;
            if (opt.type !== Function && !opt.skipFactory && (0, _shared.isFunction)(defaultValue)) {
                const { propsDefaults  } = instance;
                if (key in propsDefaults) value = propsDefaults[key];
                else {
                    const reset = setCurrentInstance(instance);
                    value = propsDefaults[key] = defaultValue.call(null, props);
                    reset();
                }
            } else value = defaultValue;
            if (instance.ce) instance.ce._setProp(key, value);
        }
        if (opt[0 /* shouldCast */ ]) {
            if (isAbsent && !hasDefault) value = false;
            else if (opt[1 /* shouldCastTrue */ ] && (value === "" || value === (0, _shared.hyphenate)(key))) value = true;
        }
    }
    return value;
}
const mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(comp, appContext, asMixin = false) {
    const cache = __VUE_OPTIONS_API__ && asMixin ? mixinPropsCache : appContext.propsCache;
    const cached = cache.get(comp);
    if (cached) return cached;
    const raw = comp.props;
    const normalized = {};
    const needCastKeys = [];
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendProps = (raw2)=>{
            hasExtends = true;
            const [props, keys] = normalizePropsOptions(raw2, appContext, true);
            (0, _shared.extend)(normalized, props);
            if (keys) needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendProps);
        if (comp.extends) extendProps(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendProps);
    }
    if (!raw && !hasExtends) {
        if ((0, _shared.isObject)(comp)) cache.set(comp, (0, _shared.EMPTY_ARR));
        return 0, _shared.EMPTY_ARR;
    }
    if ((0, _shared.isArray)(raw)) for(let i = 0; i < raw.length; i++){
        if (!(0, _shared.isString)(raw[i])) warn$1(`props must be strings when using array syntax.`, raw[i]);
        const normalizedKey = (0, _shared.camelize)(raw[i]);
        if (validatePropName(normalizedKey)) normalized[normalizedKey] = (0, _shared.EMPTY_OBJ);
    }
    else if (raw) {
        if (!(0, _shared.isObject)(raw)) warn$1(`invalid props options`, raw);
        for(const key in raw){
            const normalizedKey = (0, _shared.camelize)(key);
            if (validatePropName(normalizedKey)) {
                const opt = raw[key];
                const prop = normalized[normalizedKey] = (0, _shared.isArray)(opt) || (0, _shared.isFunction)(opt) ? {
                    type: opt
                } : (0, _shared.extend)({}, opt);
                const propType = prop.type;
                let shouldCast = false;
                let shouldCastTrue = true;
                if ((0, _shared.isArray)(propType)) for(let index = 0; index < propType.length; ++index){
                    const type = propType[index];
                    const typeName = (0, _shared.isFunction)(type) && type.name;
                    if (typeName === "Boolean") {
                        shouldCast = true;
                        break;
                    } else if (typeName === "String") shouldCastTrue = false;
                }
                else shouldCast = (0, _shared.isFunction)(propType) && propType.name === "Boolean";
                prop[0 /* shouldCast */ ] = shouldCast;
                prop[1 /* shouldCastTrue */ ] = shouldCastTrue;
                if (shouldCast || (0, _shared.hasOwn)(prop, "default")) needCastKeys.push(normalizedKey);
            }
        }
    }
    const res = [
        normalized,
        needCastKeys
    ];
    if ((0, _shared.isObject)(comp)) cache.set(comp, res);
    return res;
}
function validatePropName(key) {
    if (key[0] !== "$" && !(0, _shared.isReservedProp)(key)) return true;
    else warn$1(`Invalid prop name: "${key}" is a reserved property.`);
    return false;
}
function getType(ctor) {
    if (ctor === null) return "null";
    if (typeof ctor === "function") return ctor.name || "";
    else if (typeof ctor === "object") {
        const name = ctor.constructor && ctor.constructor.name;
        return name || "";
    }
    return "";
}
function validateProps(rawProps, props, instance) {
    const resolvedValues = (0, _reactivity.toRaw)(props);
    const options = instance.propsOptions[0];
    const camelizePropsKey = Object.keys(rawProps).map((key)=>(0, _shared.camelize)(key));
    for(const key in options){
        let opt = options[key];
        if (opt == null) continue;
        validateProp(key, resolvedValues[key], opt, (0, _reactivity.shallowReadonly)(resolvedValues), !camelizePropsKey.includes(key));
    }
}
function validateProp(name, value, prop, props, isAbsent) {
    const { type , required , validator , skipCheck  } = prop;
    if (required && isAbsent) {
        warn$1('Missing required prop: "' + name + '"');
        return;
    }
    if (value == null && !required) return;
    if (type != null && type !== true && !skipCheck) {
        let isValid = false;
        const types = (0, _shared.isArray)(type) ? type : [
            type
        ];
        const expectedTypes = [];
        for(let i = 0; i < types.length && !isValid; i++){
            const { valid , expectedType  } = assertType(value, types[i]);
            expectedTypes.push(expectedType || "");
            isValid = valid;
        }
        if (!isValid) {
            warn$1(getInvalidTypeMessage(name, value, expectedTypes));
            return;
        }
    }
    if (validator && !validator(value, props)) warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
}
const isSimpleType = /* @__PURE__ */ (0, _shared.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");
function assertType(value, type) {
    let valid;
    const expectedType = getType(type);
    if (expectedType === "null") valid = value === null;
    else if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        if (!valid && t === "object") valid = value instanceof type;
    } else if (expectedType === "Object") valid = (0, _shared.isObject)(value);
    else if (expectedType === "Array") valid = (0, _shared.isArray)(value);
    else valid = value instanceof type;
    return {
        valid,
        expectedType
    };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
    if (expectedTypes.length === 0) return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
    let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map((0, _shared.capitalize)).join(" | ")}`;
    const expectedType = expectedTypes[0];
    const receivedType = (0, _shared.toRawType)(value);
    const expectedValue = styleValue(value, expectedType);
    const receivedValue = styleValue(value, receivedType);
    if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) message += ` with value ${expectedValue}`;
    message += `, got ${receivedType} `;
    if (isExplicable(receivedType)) message += `with value ${receivedValue}.`;
    return message;
}
function styleValue(value, type) {
    if (type === "String") return `"${value}"`;
    else if (type === "Number") return `${Number(value)}`;
    else return `${value}`;
}
function isExplicable(type) {
    const explicitTypes = [
        "string",
        "number",
        "boolean"
    ];
    return explicitTypes.some((elem)=>type.toLowerCase() === elem);
}
function isBoolean(...args) {
    return args.some((elem)=>elem.toLowerCase() === "boolean");
}
const isInternalKey = (key)=>key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value)=>(0, _shared.isArray)(value) ? value.map(normalizeVNode) : [
        normalizeVNode(value)
    ];
const normalizeSlot = (key, rawSlot, ctx)=>{
    if (rawSlot._n) return rawSlot;
    const normalized = withCtx((...args)=>{
        if (currentInstance && !(ctx === null && currentRenderingInstance) && !(ctx && ctx.root !== currentInstance.root)) warn$1(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
        return normalizeSlotValue(rawSlot(...args));
    }, ctx);
    normalized._c = false;
    return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance)=>{
    const ctx = rawSlots._ctx;
    for(const key in rawSlots){
        if (isInternalKey(key)) continue;
        const value = rawSlots[key];
        if ((0, _shared.isFunction)(value)) slots[key] = normalizeSlot(key, value, ctx);
        else if (value != null) {
            warn$1(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
            const normalized = normalizeSlotValue(value);
            slots[key] = ()=>normalized;
        }
    }
};
const normalizeVNodeSlots = (instance, children)=>{
    if (!isKeepAlive(instance.vnode) && true) warn$1(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
    const normalized = normalizeSlotValue(children);
    instance.slots.default = ()=>normalized;
};
const assignSlots = (slots, children, optimized)=>{
    for(const key in children)if (optimized || !isInternalKey(key)) slots[key] = children[key];
};
const initSlots = (instance, children, optimized)=>{
    const slots = instance.slots = createInternalObject();
    if (instance.vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
            assignSlots(slots, children, optimized);
            if (optimized) (0, _shared.def)(slots, "_", type, true);
        } else normalizeObjectSlots(children, slots);
    } else if (children) normalizeVNodeSlots(instance, children);
};
const updateSlots = (instance, children, optimized)=>{
    const { vnode , slots  } = instance;
    let needDeletionCheck = true;
    let deletionComparisonTarget = (0, _shared.EMPTY_OBJ);
    if (vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
            if (isHmrUpdating) {
                assignSlots(slots, children, optimized);
                (0, _reactivity.trigger)(instance, "set", "$slots");
            } else if (optimized && type === 1) needDeletionCheck = false;
            else assignSlots(slots, children, optimized);
        } else {
            needDeletionCheck = !children.$stable;
            normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
    } else if (children) {
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = {
            default: 1
        };
    }
    if (needDeletionCheck) {
        for(const key in slots)if (!isInternalKey(key) && deletionComparisonTarget[key] == null) delete slots[key];
    }
};
let supported;
let perf;
function startMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) perf.mark(`vue-${type}-${instance.uid}`);
    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
}
function endMeasure(instance, type) {
    if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
    }
    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
}
function isSupported() {
    if (supported !== void 0) return supported;
    if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
    } else supported = false;
    return supported;
}
function initFeatureFlags() {
    const needWarn = [];
    if (typeof __VUE_OPTIONS_API__ !== "boolean") {
        needWarn.push(`__VUE_OPTIONS_API__`);
        (0, _shared.getGlobalThis)().__VUE_OPTIONS_API__ = true;
    }
    if (typeof __VUE_PROD_DEVTOOLS__ !== "boolean") {
        needWarn.push(`__VUE_PROD_DEVTOOLS__`);
        (0, _shared.getGlobalThis)().__VUE_PROD_DEVTOOLS__ = false;
    }
    if (typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ !== "boolean") {
        needWarn.push(`__VUE_PROD_HYDRATION_MISMATCH_DETAILS__`);
        (0, _shared.getGlobalThis)().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__ = false;
    }
    if (0, needWarn.length) {
        const multi = needWarn.length > 1;
        console.warn(`Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`);
    }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
    return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
    return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
    initFeatureFlags();
    const target = (0, _shared.getGlobalThis)();
    target.__VUE__ = true;
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
    const { insert: hostInsert , remove: hostRemove , patchProp: hostPatchProp , createElement: hostCreateElement , createText: hostCreateText , createComment: hostCreateComment , setText: hostSetText , setElementText: hostSetElementText , parentNode: hostParentNode , nextSibling: hostNextSibling , setScopeId: hostSetScopeId = (0, _shared.NOOP) , insertStaticContent: hostInsertStaticContent  } = options;
    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren)=>{
        if (n1 === n2) return;
        if (n1 && !isSameVNodeType(n1, n2)) {
            anchor = getNextHostNode(n1);
            unmount(n1, parentComponent, parentSuspense, true);
            n1 = null;
        }
        if (n2.patchFlag === -2) {
            optimized = false;
            n2.dynamicChildren = null;
        }
        const { type , ref , shapeFlag  } = n2;
        switch(type){
            case Text:
                processText(n1, n2, container, anchor);
                break;
            case Comment:
                processCommentNode(n1, n2, container, anchor);
                break;
            case Static:
                if (n1 == null) mountStaticNode(n2, container, anchor, namespace);
                else patchStaticNode(n1, n2, container, namespace);
                break;
            case Fragment:
                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                break;
            default:
                if (shapeFlag & 1) processElement(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                else if (shapeFlag & 6) processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                else if (shapeFlag & 64) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals);
                else if (shapeFlag & 128) type.process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals);
                else warn$1("Invalid VNode type:", type, `(${typeof type})`);
        }
        if (ref != null && parentComponent) setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    };
    const processText = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        else {
            const el = n2.el = n1.el;
            if (n2.children !== n1.children) hostSetText(el, n2.children);
        }
    };
    const processCommentNode = (n1, n2, container, anchor)=>{
        if (n1 == null) hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        else n2.el = n1.el;
    };
    const mountStaticNode = (n2, container, anchor, namespace)=>{
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, namespace, n2.el, n2.anchor);
    };
    const patchStaticNode = (n1, n2, container, namespace)=>{
        if (n2.children !== n1.children) {
            const anchor = hostNextSibling(n1.anchor);
            removeStaticNode(n1);
            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, namespace);
        } else {
            n2.el = n1.el;
            n2.anchor = n1.anchor;
        }
    };
    const moveStaticNode = ({ el , anchor  }, container, nextSibling)=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostInsert(el, container, nextSibling);
            el = next;
        }
        hostInsert(anchor, container, nextSibling);
    };
    const removeStaticNode = ({ el , anchor  })=>{
        let next;
        while(el && el !== anchor){
            next = hostNextSibling(el);
            hostRemove(el);
            el = next;
        }
        hostRemove(anchor);
    };
    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        if (n2.type === "svg") namespace = "svg";
        else if (n2.type === "math") namespace = "mathml";
        if (n1 == null) mountElement(n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
        else patchElement(n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
    };
    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        let el;
        let vnodeHook;
        const { props , shapeFlag , transition , dirs  } = vnode;
        el = vnode.el = hostCreateElement(vnode.type, namespace, props && props.is, props);
        if (shapeFlag & 8) hostSetElementText(el, vnode.children);
        else if (shapeFlag & 16) mountChildren(vnode.children, el, null, parentComponent, parentSuspense, resolveChildrenNamespace(vnode, namespace), slotScopeIds, optimized);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "created");
        setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        if (props) {
            for(const key in props)if (key !== "value" && !(0, _shared.isReservedProp)(key)) hostPatchProp(el, key, null, props[key], namespace, parentComponent);
            if ("value" in props) hostPatchProp(el, "value", null, props.value, namespace);
            if (vnodeHook = props.onVnodeBeforeMount) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        (0, _shared.def)(el, "__vnode", vnode, true);
        (0, _shared.def)(el, "__vueParentComponent", parentComponent, true);
        if (dirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        const needCallTransitionHooks = needTransition(parentSuspense, transition);
        if (needCallTransitionHooks) transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
    };
    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent)=>{
        if (scopeId) hostSetScopeId(el, scopeId);
        if (slotScopeIds) for(let i = 0; i < slotScopeIds.length; i++)hostSetScopeId(el, slotScopeIds[i]);
        if (parentComponent) {
            let subTree = parentComponent.subTree;
            if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) subTree = filterSingleRoot(subTree.children) || subTree;
            if (vnode === subTree || isSuspense(subTree.type) && (subTree.ssContent === vnode || subTree.ssFallback === vnode)) {
                const parentVNode = parentComponent.vnode;
                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
            }
        }
    };
    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0)=>{
        for(let i = start; i < children.length; i++){
            const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
            patch(null, child, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
        }
    };
    const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        const el = n2.el = n1.el;
        el.__vnode = n2;
        let { patchFlag , dynamicChildren , dirs  } = n2;
        patchFlag |= n1.patchFlag & 16;
        const oldProps = n1.props || (0, _shared.EMPTY_OBJ);
        const newProps = n2.props || (0, _shared.EMPTY_OBJ);
        let vnodeHook;
        parentComponent && toggleRecurse(parentComponent, false);
        if (vnodeHook = newProps.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        if (dirs) invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        parentComponent && toggleRecurse(parentComponent, true);
        if (isHmrUpdating) {
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) hostSetElementText(el, "");
        if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, resolveChildrenNamespace(n2, namespace), slotScopeIds);
            traverseStaticChildren(n1, n2);
        } else if (!optimized) patchChildren(n1, n2, el, null, parentComponent, parentSuspense, resolveChildrenNamespace(n2, namespace), slotScopeIds, false);
        if (patchFlag > 0) {
            if (patchFlag & 16) patchProps(el, oldProps, newProps, parentComponent, namespace);
            else {
                if (patchFlag & 2) {
                    if (oldProps.class !== newProps.class) hostPatchProp(el, "class", null, newProps.class, namespace);
                }
                if (patchFlag & 4) hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
                if (patchFlag & 8) {
                    const propsToUpdate = n2.dynamicProps;
                    for(let i = 0; i < propsToUpdate.length; i++){
                        const key = propsToUpdate[i];
                        const prev = oldProps[key];
                        const next = newProps[key];
                        if (next !== prev || key === "value") hostPatchProp(el, key, prev, next, namespace, parentComponent);
                    }
                }
            }
            if (patchFlag & 1) {
                if (n1.children !== n2.children) hostSetElementText(el, n2.children);
            }
        } else if (!optimized && dynamicChildren == null) patchProps(el, oldProps, newProps, parentComponent, namespace);
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
        }, parentSuspense);
    };
    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds)=>{
        for(let i = 0; i < newChildren.length; i++){
            const oldVNode = oldChildren[i];
            const newVNode = newChildren[i];
            const container = // oldVNode may be an errored async setup() component inside Suspense
            // which will not have a mounted element
            oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
            // of the Fragment itself so it can move its children.
            (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
            // which also requires the correct parent container
            !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
            oldVNode.shapeFlag & 198) ? hostParentNode(oldVNode.el) : // In other cases, the parent container is not actually used so we
            // just pass the block element here to avoid a DOM parentNode call.
            fallbackContainer;
            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, true);
        }
    };
    const patchProps = (el, oldProps, newProps, parentComponent, namespace)=>{
        if (oldProps !== newProps) {
            if (oldProps !== (0, _shared.EMPTY_OBJ)) {
                for(const key in oldProps)if (!(0, _shared.isReservedProp)(key) && !(key in newProps)) hostPatchProp(el, key, oldProps[key], null, namespace, parentComponent);
            }
            for(const key in newProps){
                if ((0, _shared.isReservedProp)(key)) continue;
                const next = newProps[key];
                const prev = oldProps[key];
                if (next !== prev && key !== "value") hostPatchProp(el, key, prev, next, namespace, parentComponent);
            }
            if ("value" in newProps) hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
        }
    };
    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag , dynamicChildren , slotScopeIds: fragmentSlotScopeIds  } = n2;
        if (// #5523 dev root fragment may inherit directives
        isHmrUpdating || patchFlag & 2048) {
            patchFlag = 0;
            optimized = false;
            dynamicChildren = null;
        }
        if (fragmentSlotScopeIds) slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        if (n1 == null) {
            hostInsert(fragmentStartAnchor, container, anchor);
            hostInsert(fragmentEndAnchor, container, anchor);
            mountChildren(// #10007
            // such fragment like `<></>` will be compiled into
            // a fragment which doesn't have a children.
            // In this case fallback to an empty array
            n2.children || [], container, fragmentEndAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
        } else if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
        // of renderSlot() with no valid children
        n1.dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, namespace, slotScopeIds);
            traverseStaticChildren(n1, n2);
        } else patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
    };
    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
            if (n2.shapeFlag & 512) parentComponent.ctx.activate(n2, container, anchor, namespace, optimized);
            else mountComponent(n2, container, anchor, parentComponent, parentSuspense, namespace, optimized);
        } else updateComponent(n1, n2, optimized);
    };
    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized)=>{
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (0, instance.type.__hmrId) registerHMR(instance);
        pushWarningContext(initialVNode);
        startMeasure(instance, `mount`);
        if (isKeepAlive(initialVNode)) instance.ctx.renderer = internals;
        startMeasure(instance, `init`);
        setupComponent(instance, false, optimized);
        endMeasure(instance, `init`);
        if (isHmrUpdating) initialVNode.el = null;
        if (instance.asyncDep) {
            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
            if (!initialVNode.el) {
                const placeholder = instance.subTree = createVNode(Comment);
                processCommentNode(null, placeholder, container, anchor);
            }
        } else setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, namespace, optimized);
        popWarningContext();
        endMeasure(instance, `mount`);
    };
    const updateComponent = (n1, n2, optimized)=>{
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
            if (instance.asyncDep && !instance.asyncResolved) {
                pushWarningContext(n2);
                updateComponentPreRender(instance, n2, optimized);
                popWarningContext();
                return;
            } else {
                instance.next = n2;
                instance.update();
            }
        } else {
            n2.el = n1.el;
            instance.vnode = n2;
        }
    };
    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized)=>{
        const componentUpdateFn = ()=>{
            if (!instance.isMounted) {
                let vnodeHook;
                const { el , props  } = initialVNode;
                const { bm , m , parent , root , type  } = instance;
                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
                toggleRecurse(instance, false);
                if (bm) (0, _shared.invokeArrayFns)(bm);
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) invokeVNodeHook(vnodeHook, parent, initialVNode);
                toggleRecurse(instance, true);
                if (el && hydrateNode) {
                    const hydrateSubTree = ()=>{
                        startMeasure(instance, `render`);
                        instance.subTree = renderComponentRoot(instance);
                        endMeasure(instance, `render`);
                        startMeasure(instance, `hydrate`);
                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                        endMeasure(instance, `hydrate`);
                    };
                    if (isAsyncWrapperVNode && type.__asyncHydrate) type.__asyncHydrate(el, instance, hydrateSubTree);
                    else hydrateSubTree();
                } else {
                    if (root.ce) root.ce._injectChildStyle(type);
                    startMeasure(instance, `render`);
                    const subTree = instance.subTree = renderComponentRoot(instance);
                    endMeasure(instance, `render`);
                    startMeasure(instance, `patch`);
                    patch(null, subTree, container, anchor, instance, parentSuspense, namespace);
                    endMeasure(instance, `patch`);
                    initialVNode.el = subTree.el;
                }
                if (m) queuePostRenderEffect(m, parentSuspense);
                if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
                    const scopedInitialVNode = initialVNode;
                    queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
                }
                if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) instance.a && queuePostRenderEffect(instance.a, parentSuspense);
                instance.isMounted = true;
                devtoolsComponentAdded(instance);
                initialVNode = container = anchor = null;
            } else {
                let { next , bu , u , parent , vnode  } = instance;
                {
                    const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
                    if (nonHydratedAsyncRoot) {
                        if (next) {
                            next.el = vnode.el;
                            updateComponentPreRender(instance, next, optimized);
                        }
                        nonHydratedAsyncRoot.asyncDep.then(()=>{
                            if (!instance.isUnmounted) componentUpdateFn();
                        });
                        return;
                    }
                }
                let originNext = next;
                let vnodeHook;
                pushWarningContext(next || instance.vnode);
                toggleRecurse(instance, false);
                if (next) {
                    next.el = vnode.el;
                    updateComponentPreRender(instance, next, optimized);
                } else next = vnode;
                if (bu) (0, _shared.invokeArrayFns)(bu);
                if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) invokeVNodeHook(vnodeHook, parent, next, vnode);
                toggleRecurse(instance, true);
                startMeasure(instance, `render`);
                const nextTree = renderComponentRoot(instance);
                endMeasure(instance, `render`);
                const prevTree = instance.subTree;
                instance.subTree = nextTree;
                startMeasure(instance, `patch`);
                patch(prevTree, nextTree, // parent may have changed if it's in a teleport
                hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment
                getNextHostNode(prevTree), instance, parentSuspense, namespace);
                endMeasure(instance, `patch`);
                next.el = nextTree.el;
                if (originNext === null) updateHOCHostEl(instance, nextTree.el);
                if (u) queuePostRenderEffect(u, parentSuspense);
                if (vnodeHook = next.props && next.props.onVnodeUpdated) queuePostRenderEffect(()=>invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
                devtoolsComponentUpdated(instance);
                popWarningContext();
            }
        };
        instance.scope.on();
        const effect = instance.effect = new (0, _reactivity.ReactiveEffect)(componentUpdateFn);
        instance.scope.off();
        const update = instance.update = effect.run.bind(effect);
        const job = instance.job = effect.runIfDirty.bind(effect);
        job.i = instance;
        job.id = instance.uid;
        effect.scheduler = ()=>queueJob(job);
        toggleRecurse(instance, true);
        effect.onTrack = instance.rtc ? (e)=>(0, _shared.invokeArrayFns)(instance.rtc, e) : void 0;
        effect.onTrigger = instance.rtg ? (e)=>(0, _shared.invokeArrayFns)(instance.rtg, e) : void 0;
        update();
    };
    const updateComponentPreRender = (instance, nextVNode, optimized)=>{
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        (0, _reactivity.pauseTracking)();
        flushPreFlushCbs(instance);
        (0, _reactivity.resetTracking)();
    };
    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false)=>{
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag , shapeFlag  } = n2;
        if (patchFlag > 0) {
            if (patchFlag & 128) {
                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                return;
            } else if (patchFlag & 256) {
                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                return;
            }
        }
        if (shapeFlag & 8) {
            if (prevShapeFlag & 16) unmountChildren(c1, parentComponent, parentSuspense);
            if (c2 !== c1) hostSetElementText(container, c2);
        } else if (prevShapeFlag & 16) {
            if (shapeFlag & 16) patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
            else unmountChildren(c1, parentComponent, parentSuspense, true);
        } else {
            if (prevShapeFlag & 8) hostSetElementText(container, "");
            if (shapeFlag & 16) mountChildren(c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
        }
    };
    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        c1 = c1 || (0, _shared.EMPTY_ARR);
        c2 = c2 || (0, _shared.EMPTY_ARR);
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for(i = 0; i < commonLength; i++){
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
        }
        if (oldLength > newLength) unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        else mountChildren(c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, commonLength);
    };
    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized)=>{
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1;
        let e2 = l2 - 1;
        while(i <= e1 && i <= e2){
            const n1 = c1[i];
            const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
            else break;
            i++;
        }
        while(i <= e1 && i <= e2){
            const n1 = c1[e1];
            const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
            if (isSameVNodeType(n1, n2)) patch(n1, n2, container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
            else break;
            e1--;
            e2--;
        }
        if (i > e1) {
            if (i <= e2) {
                const nextPos = e2 + 1;
                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
                while(i <= e2){
                    patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                    i++;
                }
            }
        } else if (i > e2) while(i <= e1){
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
        }
        else {
            const s1 = i;
            const s2 = i;
            const keyToNewIndexMap = /* @__PURE__ */ new Map();
            for(i = s2; i <= e2; i++){
                const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
                if (nextChild.key != null) {
                    if (keyToNewIndexMap.has(nextChild.key)) warn$1(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
                    keyToNewIndexMap.set(nextChild.key, i);
                }
            }
            let j;
            let patched = 0;
            const toBePatched = e2 - s2 + 1;
            let moved = false;
            let maxNewIndexSoFar = 0;
            const newIndexToOldIndexMap = new Array(toBePatched);
            for(i = 0; i < toBePatched; i++)newIndexToOldIndexMap[i] = 0;
            for(i = s1; i <= e1; i++){
                const prevChild = c1[i];
                if (patched >= toBePatched) {
                    unmount(prevChild, parentComponent, parentSuspense, true);
                    continue;
                }
                let newIndex;
                if (prevChild.key != null) newIndex = keyToNewIndexMap.get(prevChild.key);
                else {
                    for(j = s2; j <= e2; j++)if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                        newIndex = j;
                        break;
                    }
                }
                if (newIndex === void 0) unmount(prevChild, parentComponent, parentSuspense, true);
                else {
                    newIndexToOldIndexMap[newIndex - s2] = i + 1;
                    if (newIndex >= maxNewIndexSoFar) maxNewIndexSoFar = newIndex;
                    else moved = true;
                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                    patched++;
                }
            }
            const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : (0, _shared.EMPTY_ARR);
            j = increasingNewIndexSequence.length - 1;
            for(i = toBePatched - 1; i >= 0; i--){
                const nextIndex = s2 + i;
                const nextChild = c2[nextIndex];
                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
                if (newIndexToOldIndexMap[i] === 0) patch(null, nextChild, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized);
                else if (moved) {
                    if (j < 0 || i !== increasingNewIndexSequence[j]) move(nextChild, container, anchor, 2);
                    else j--;
                }
            }
        }
    };
    const move = (vnode, container, anchor, moveType, parentSuspense = null)=>{
        const { el , type , transition , children , shapeFlag  } = vnode;
        if (shapeFlag & 6) {
            move(vnode.component.subTree, container, anchor, moveType);
            return;
        }
        if (shapeFlag & 128) {
            vnode.suspense.move(container, anchor, moveType);
            return;
        }
        if (shapeFlag & 64) {
            type.move(vnode, container, anchor, internals);
            return;
        }
        if (type === Fragment) {
            hostInsert(el, container, anchor);
            for(let i = 0; i < children.length; i++)move(children[i], container, anchor, moveType);
            hostInsert(vnode.anchor, container, anchor);
            return;
        }
        if (type === Static) {
            moveStaticNode(vnode, container, anchor);
            return;
        }
        const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
        if (needTransition2) {
            if (moveType === 0) {
                transition.beforeEnter(el);
                hostInsert(el, container, anchor);
                queuePostRenderEffect(()=>transition.enter(el), parentSuspense);
            } else {
                const { leave , delayLeave , afterLeave  } = transition;
                const remove2 = ()=>{
                    if (vnode.ctx.isUnmounted) hostRemove(el);
                    else hostInsert(el, container, anchor);
                };
                const performLeave = ()=>{
                    leave(el, ()=>{
                        remove2();
                        afterLeave && afterLeave();
                    });
                };
                if (delayLeave) delayLeave(el, remove2, performLeave);
                else performLeave();
            }
        } else hostInsert(el, container, anchor);
    };
    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false)=>{
        const { type , props , ref , children , dynamicChildren , shapeFlag , patchFlag , dirs , cacheIndex  } = vnode;
        if (patchFlag === -2) optimized = false;
        if (ref != null) {
            (0, _reactivity.pauseTracking)();
            setRef(ref, null, parentSuspense, vnode, true);
            (0, _reactivity.resetTracking)();
        }
        if (cacheIndex != null) parentComponent.renderCache[cacheIndex] = void 0;
        if (shapeFlag & 256) {
            parentComponent.ctx.deactivate(vnode);
            return;
        }
        const shouldInvokeDirs = shapeFlag & 1 && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) invokeVNodeHook(vnodeHook, parentComponent, vnode);
        if (shapeFlag & 6) unmountComponent(vnode.component, parentSuspense, doRemove);
        else {
            if (shapeFlag & 128) {
                vnode.suspense.unmount(parentSuspense, doRemove);
                return;
            }
            if (shouldInvokeDirs) invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
            if (shapeFlag & 64) vnode.type.remove(vnode, parentComponent, parentSuspense, internals, doRemove);
            else if (dynamicChildren && // #5154
            // when v-once is used inside a block, setBlockTracking(-1) marks the
            // parent block with hasOnce: true
            // so that it doesn't take the fast path during unmount - otherwise
            // components nested in v-once are never unmounted.
            !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
            (type !== Fragment || patchFlag > 0 && patchFlag & 64)) unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
            else if (type === Fragment && patchFlag & 384 || !optimized && shapeFlag & 16) unmountChildren(children, parentComponent, parentSuspense);
            if (doRemove) remove(vnode);
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) queuePostRenderEffect(()=>{
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
        }, parentSuspense);
    };
    const remove = (vnode)=>{
        const { type , el , anchor , transition  } = vnode;
        if (type === Fragment) {
            if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) vnode.children.forEach((child)=>{
                if (child.type === Comment) hostRemove(child.el);
                else remove(child);
            });
            else removeFragment(el, anchor);
            return;
        }
        if (type === Static) {
            removeStaticNode(vnode);
            return;
        }
        const performRemove = ()=>{
            hostRemove(el);
            if (transition && !transition.persisted && transition.afterLeave) transition.afterLeave();
        };
        if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
            const { leave , delayLeave  } = transition;
            const performLeave = ()=>leave(el, performRemove);
            if (delayLeave) delayLeave(vnode.el, performRemove, performLeave);
            else performLeave();
        } else performRemove();
    };
    const removeFragment = (cur, end)=>{
        let next;
        while(cur !== end){
            next = hostNextSibling(cur);
            hostRemove(cur);
            cur = next;
        }
        hostRemove(end);
    };
    const unmountComponent = (instance, parentSuspense, doRemove)=>{
        if (0, instance.type.__hmrId) unregisterHMR(instance);
        const { bum , scope , job , subTree , um , m , a , parent , slots: { __: slotCacheKeys  }  } = instance;
        invalidateMount(m);
        invalidateMount(a);
        if (bum) (0, _shared.invokeArrayFns)(bum);
        if (parent && (0, _shared.isArray)(slotCacheKeys)) slotCacheKeys.forEach((v1)=>{
            parent.renderCache[v1] = void 0;
        });
        scope.stop();
        if (job) {
            job.flags |= 8;
            unmount(subTree, instance, parentSuspense, doRemove);
        }
        if (um) queuePostRenderEffect(um, parentSuspense);
        queuePostRenderEffect(()=>{
            instance.isUnmounted = true;
        }, parentSuspense);
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
            parentSuspense.deps--;
            if (parentSuspense.deps === 0) parentSuspense.resolve();
        }
        devtoolsComponentRemoved(instance);
    };
    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0)=>{
        for(let i = start; i < children.length; i++)unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    };
    const getNextHostNode = (vnode)=>{
        if (vnode.shapeFlag & 6) return getNextHostNode(vnode.component.subTree);
        if (vnode.shapeFlag & 128) return vnode.suspense.next();
        const el = hostNextSibling(vnode.anchor || vnode.el);
        const teleportEnd = el && el[TeleportEndKey];
        return teleportEnd ? hostNextSibling(teleportEnd) : el;
    };
    let isFlushing = false;
    const render = (vnode, container, namespace)=>{
        if (vnode == null) {
            if (container._vnode) unmount(container._vnode, null, null, true);
        } else patch(container._vnode || null, vnode, container, null, null, null, namespace);
        container._vnode = vnode;
        if (!isFlushing) {
            isFlushing = true;
            flushPreFlushCbs();
            flushPostFlushCbs();
            isFlushing = false;
        }
    };
    const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
    };
    let hydrate;
    let hydrateNode;
    if (createHydrationFns) [hydrate, hydrateNode] = createHydrationFns(internals);
    return {
        render,
        hydrate,
        createApp: createAppAPI(render, hydrate)
    };
}
function resolveChildrenNamespace({ type , props  }, currentNamespace) {
    return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect , job  }, allowed) {
    if (allowed) {
        effect.flags |= 32;
        job.flags |= 4;
    } else {
        effect.flags &= -33;
        job.flags &= -5;
    }
}
function needTransition(parentSuspense, transition) {
    return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
    const ch1 = n1.children;
    const ch2 = n2.children;
    if ((0, _shared.isArray)(ch1) && (0, _shared.isArray)(ch2)) for(let i = 0; i < ch1.length; i++){
        const c1 = ch1[i];
        let c2 = ch2[i];
        if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
                c2 = ch2[i] = cloneIfMounted(ch2[i]);
                c2.el = c1.el;
            }
            if (!shallow && c2.patchFlag !== -2) traverseStaticChildren(c1, c2);
        }
        if (c2.type === Text) c2.el = c1.el;
        if (c2.type === Comment && !c2.el) c2.el = c1.el;
        c2.el && (c2.el.__vnode = c2);
    }
}
function getSequence(arr) {
    const p = arr.slice();
    const result = [
        0
    ];
    let i, j, u, v1, c;
    const len = arr.length;
    for(i = 0; i < len; i++){
        const arrI = arr[i];
        if (arrI !== 0) {
            j = result[result.length - 1];
            if (arr[j] < arrI) {
                p[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v1 = result.length - 1;
            while(u < v1){
                c = u + v1 >> 1;
                if (arr[result[c]] < arrI) u = c + 1;
                else v1 = c;
            }
            if (arrI < arr[result[u]]) {
                if (u > 0) p[i] = result[u - 1];
                result[u] = i;
            }
        }
    }
    u = result.length;
    v1 = result[u - 1];
    while(u-- > 0){
        result[u] = v1;
        v1 = p[v1];
    }
    return result;
}
function locateNonHydratedAsyncRoot(instance) {
    const subComponent = instance.subTree.component;
    if (subComponent) {
        if (subComponent.asyncDep && !subComponent.asyncResolved) return subComponent;
        else return locateNonHydratedAsyncRoot(subComponent);
    }
}
function invalidateMount(hooks) {
    if (hooks) for(let i = 0; i < hooks.length; i++)hooks[i].flags |= 8;
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = ()=>{
    {
        const ctx = inject(ssrContextKey);
        if (!ctx) warn$1(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
        return ctx;
    }
};
function watchEffect(effect, options) {
    return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
    return doWatch(effect, null, (0, _shared.extend)({}, options, {
        flush: "post"
    }));
}
function watchSyncEffect(effect, options) {
    return doWatch(effect, null, (0, _shared.extend)({}, options, {
        flush: "sync"
    }));
}
function watch(source, cb, options) {
    if (!(0, _shared.isFunction)(cb)) warn$1(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
    return doWatch(source, cb, options);
}
function doWatch(source, cb, options = (0, _shared.EMPTY_OBJ)) {
    const { immediate , deep , flush , once  } = options;
    if (!cb) {
        if (immediate !== void 0) warn$1(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
        if (deep !== void 0) warn$1(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
        if (once !== void 0) warn$1(`watch() "once" option is only respected when using the watch(source, callback, options?) signature.`);
    }
    const baseWatchOptions = (0, _shared.extend)({}, options);
    baseWatchOptions.onWarn = warn$1;
    const runsImmediately = cb && immediate || !cb && flush !== "post";
    let ssrCleanup;
    if (isInSSRComponentSetup) {
        if (flush === "sync") {
            const ctx = useSSRContext();
            ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
        } else if (!runsImmediately) {
            const watchStopHandle = ()=>{};
            watchStopHandle.stop = (0, _shared.NOOP);
            watchStopHandle.resume = (0, _shared.NOOP);
            watchStopHandle.pause = (0, _shared.NOOP);
            return watchStopHandle;
        }
    }
    const instance = currentInstance;
    baseWatchOptions.call = (fn, type, args)=>callWithAsyncErrorHandling(fn, instance, type, args);
    let isPre = false;
    if (flush === "post") baseWatchOptions.scheduler = (job)=>{
        queuePostRenderEffect(job, instance && instance.suspense);
    };
    else if (flush !== "sync") {
        isPre = true;
        baseWatchOptions.scheduler = (job, isFirstRun)=>{
            if (isFirstRun) job();
            else queueJob(job);
        };
    }
    baseWatchOptions.augmentJob = (job)=>{
        if (cb) job.flags |= 4;
        if (isPre) {
            job.flags |= 2;
            if (instance) {
                job.id = instance.uid;
                job.i = instance;
            }
        }
    };
    const watchHandle = (0, _reactivity.watch)(source, cb, baseWatchOptions);
    if (isInSSRComponentSetup) {
        if (ssrCleanup) ssrCleanup.push(watchHandle);
        else if (runsImmediately) watchHandle();
    }
    return watchHandle;
}
function instanceWatch(source, value, options) {
    const publicThis = this.proxy;
    const getter = (0, _shared.isString)(source) ? source.includes(".") ? createPathGetter(publicThis, source) : ()=>publicThis[source] : source.bind(publicThis, publicThis);
    let cb;
    if ((0, _shared.isFunction)(value)) cb = value;
    else {
        cb = value.handler;
        options = value;
    }
    const reset = setCurrentInstance(this);
    const res = doWatch(getter, cb.bind(publicThis), options);
    reset();
    return res;
}
function createPathGetter(ctx, path) {
    const segments = path.split(".");
    return ()=>{
        let cur = ctx;
        for(let i = 0; i < segments.length && cur; i++)cur = cur[segments[i]];
        return cur;
    };
}
function useModel(props, name, options = (0, _shared.EMPTY_OBJ)) {
    const i = getCurrentInstance();
    if (!i) {
        warn$1(`useModel() called without active instance.`);
        return (0, _reactivity.ref)();
    }
    const camelizedName = (0, _shared.camelize)(name);
    if (!i.propsOptions[0][camelizedName]) {
        warn$1(`useModel() called with prop "${name}" which is not declared.`);
        return (0, _reactivity.ref)();
    }
    const hyphenatedName = (0, _shared.hyphenate)(name);
    const modifiers = getModelModifiers(props, camelizedName);
    const res = (0, _reactivity.customRef)((track, trigger)=>{
        let localValue;
        let prevSetValue = (0, _shared.EMPTY_OBJ);
        let prevEmittedValue;
        watchSyncEffect(()=>{
            const propValue = props[camelizedName];
            if ((0, _shared.hasChanged)(localValue, propValue)) {
                localValue = propValue;
                trigger();
            }
        });
        return {
            get () {
                track();
                return options.get ? options.get(localValue) : localValue;
            },
            set (value) {
                const emittedValue = options.set ? options.set(value) : value;
                if (!(0, _shared.hasChanged)(emittedValue, localValue) && !(prevSetValue !== (0, _shared.EMPTY_OBJ) && (0, _shared.hasChanged)(value, prevSetValue))) return;
                const rawProps = i.vnode.props;
                if (!(rawProps && // check if parent has passed v-model
                (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {
                    localValue = value;
                    trigger();
                }
                i.emit(`update:${name}`, emittedValue);
                if ((0, _shared.hasChanged)(value, emittedValue) && (0, _shared.hasChanged)(value, prevSetValue) && !(0, _shared.hasChanged)(emittedValue, prevEmittedValue)) trigger();
                prevSetValue = value;
                prevEmittedValue = emittedValue;
            }
        };
    });
    res[Symbol.iterator] = ()=>{
        let i2 = 0;
        return {
            next () {
                if (i2 < 2) return {
                    value: i2++ ? modifiers || (0, _shared.EMPTY_OBJ) : res,
                    done: false
                };
                else return {
                    done: true
                };
            }
        };
    };
    return res;
}
const getModelModifiers = (props, modelName)=>{
    return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${(0, _shared.camelize)(modelName)}Modifiers`] || props[`${(0, _shared.hyphenate)(modelName)}Modifiers`];
};
function emit(instance, event, ...rawArgs) {
    if (instance.isUnmounted) return;
    const props = instance.vnode.props || (0, _shared.EMPTY_OBJ);
    {
        const { emitsOptions , propsOptions: [propsOptions]  } = instance;
        if (emitsOptions) {
            if (!(event in emitsOptions) && true) {
                if (!propsOptions || !((0, _shared.toHandlerKey)((0, _shared.camelize)(event)) in propsOptions)) warn$1(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${(0, _shared.toHandlerKey)((0, _shared.camelize)(event))}" prop.`);
            } else {
                const validator = emitsOptions[event];
                if ((0, _shared.isFunction)(validator)) {
                    const isValid = validator(...rawArgs);
                    if (!isValid) warn$1(`Invalid event arguments: event validation failed for event "${event}".`);
                }
            }
        }
    }
    let args = rawArgs;
    const isModelListener = event.startsWith("update:");
    const modifiers = isModelListener && getModelModifiers(props, event.slice(7));
    if (modifiers) {
        if (modifiers.trim) args = rawArgs.map((a)=>(0, _shared.isString)(a) ? a.trim() : a);
        if (modifiers.number) args = rawArgs.map((0, _shared.looseToNumber));
    }
    devtoolsComponentEmit(instance, event, args);
    {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[(0, _shared.toHandlerKey)(lowerCaseEvent)]) warn$1(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${(0, _shared.hyphenate)(event)}" instead of "${event}".`);
    }
    let handlerName;
    let handler = props[handlerName = (0, _shared.toHandlerKey)(event)] || // also try camelCase event handler (#2249)
    props[handlerName = (0, _shared.toHandlerKey)((0, _shared.camelize)(event))];
    if (!handler && isModelListener) handler = props[handlerName = (0, _shared.toHandlerKey)((0, _shared.hyphenate)(event))];
    if (handler) callWithAsyncErrorHandling(handler, instance, 6, args);
    const onceHandler = props[handlerName + `Once`];
    if (onceHandler) {
        if (!instance.emitted) instance.emitted = {};
        else if (instance.emitted[handlerName]) return;
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6, args);
    }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
    const cache = appContext.emitsCache;
    const cached = cache.get(comp);
    if (cached !== void 0) return cached;
    const raw = comp.emits;
    let normalized = {};
    let hasExtends = false;
    if (__VUE_OPTIONS_API__ && !(0, _shared.isFunction)(comp)) {
        const extendEmits = (raw2)=>{
            const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
            if (normalizedFromExtend) {
                hasExtends = true;
                (0, _shared.extend)(normalized, normalizedFromExtend);
            }
        };
        if (!asMixin && appContext.mixins.length) appContext.mixins.forEach(extendEmits);
        if (comp.extends) extendEmits(comp.extends);
        if (comp.mixins) comp.mixins.forEach(extendEmits);
    }
    if (!raw && !hasExtends) {
        if ((0, _shared.isObject)(comp)) cache.set(comp, null);
        return null;
    }
    if ((0, _shared.isArray)(raw)) raw.forEach((key)=>normalized[key] = null);
    else (0, _shared.extend)(normalized, raw);
    if ((0, _shared.isObject)(comp)) cache.set(comp, normalized);
    return normalized;
}
function isEmitListener(options, key) {
    if (!options || !(0, _shared.isOn)(key)) return false;
    key = key.slice(2).replace(/Once$/, "");
    return (0, _shared.hasOwn)(options, key[0].toLowerCase() + key.slice(1)) || (0, _shared.hasOwn)(options, (0, _shared.hyphenate)(key)) || (0, _shared.hasOwn)(options, key);
}
let accessedAttrs = false;
function markAttrsAccessed() {
    accessedAttrs = true;
}
function renderComponentRoot(instance) {
    const { type: Component , vnode , proxy , withProxy , propsOptions: [propsOptions] , slots , attrs , emit , render , renderCache , props , data , setupState , ctx , inheritAttrs  } = instance;
    const prev = setCurrentRenderingInstance(instance);
    let result;
    let fallthroughAttrs;
    accessedAttrs = false;
    try {
        if (vnode.shapeFlag & 4) {
            const proxyToUse = withProxy || proxy;
            const thisProxy = (0, setupState.__isScriptSetup) ? new Proxy(proxyToUse, {
                get (target, key, receiver) {
                    warn$1(`Property '${String(key)}' was accessed via 'this'. Avoid using 'this' in templates.`);
                    return Reflect.get(target, key, receiver);
                }
            }) : proxyToUse;
            result = normalizeVNode(render.call(thisProxy, proxyToUse, renderCache, (0, _reactivity.shallowReadonly)(props), setupState, data, ctx));
            fallthroughAttrs = attrs;
        } else {
            const render2 = Component;
            if (attrs === props) markAttrsAccessed();
            result = normalizeVNode(render2.length > 1 ? render2((0, _reactivity.shallowReadonly)(props), {
                get attrs () {
                    markAttrsAccessed();
                    return (0, _reactivity.shallowReadonly)(attrs);
                },
                slots,
                emit
            }) : render2((0, _reactivity.shallowReadonly)(props), null));
            fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
    } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1);
        result = createVNode(Comment);
    }
    let root = result;
    let setRoot = void 0;
    if (result.patchFlag > 0 && result.patchFlag & 2048) [root, setRoot] = getChildRoot(result);
    if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag  } = root;
        if (keys.length) {
            if (shapeFlag & 7) {
                if (propsOptions && keys.some((0, _shared.isModelListener))) fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
                root = cloneVNode(root, fallthroughAttrs, false, true);
            } else if (!accessedAttrs && root.type !== Comment) {
                const allAttrs = Object.keys(attrs);
                const eventAttrs = [];
                const extraAttrs = [];
                for(let i = 0, l = allAttrs.length; i < l; i++){
                    const key = allAttrs[i];
                    if ((0, _shared.isOn)(key)) {
                        if (!(0, _shared.isModelListener)(key)) eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                    } else extraAttrs.push(key);
                }
                if (extraAttrs.length) warn$1(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text or teleport root nodes.`);
                if (eventAttrs.length) warn$1(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
            }
        }
    }
    if (vnode.dirs) {
        if (!isElementRoot(root)) warn$1(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
        root = cloneVNode(root, null, false, true);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    if (vnode.transition) {
        if (!isElementRoot(root)) warn$1(`Component inside <Transition> renders non-element root node that cannot be animated.`);
        setTransitionHooks(root, vnode.transition);
    }
    if (setRoot) setRoot(root);
    else result = root;
    setCurrentRenderingInstance(prev);
    return result;
}
const getChildRoot = (vnode)=>{
    const rawChildren = vnode.children;
    const dynamicChildren = vnode.dynamicChildren;
    const childRoot = filterSingleRoot(rawChildren, false);
    if (!childRoot) return [
        vnode,
        void 0
    ];
    else if (childRoot.patchFlag > 0 && childRoot.patchFlag & 2048) return getChildRoot(childRoot);
    const index = rawChildren.indexOf(childRoot);
    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
    const setRoot = (updatedRoot)=>{
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
            if (dynamicIndex > -1) dynamicChildren[dynamicIndex] = updatedRoot;
            else if (updatedRoot.patchFlag > 0) vnode.dynamicChildren = [
                ...dynamicChildren,
                updatedRoot
            ];
        }
    };
    return [
        normalizeVNode(childRoot),
        setRoot
    ];
};
function filterSingleRoot(children, recurse = true) {
    let singleRoot;
    for(let i = 0; i < children.length; i++){
        const child = children[i];
        if (isVNode(child)) {
            if (child.type !== Comment || child.children === "v-if") {
                if (singleRoot) return;
                else {
                    singleRoot = child;
                    if (recurse && singleRoot.patchFlag > 0 && singleRoot.patchFlag & 2048) return filterSingleRoot(singleRoot.children);
                }
            }
        } else return;
    }
    return singleRoot;
}
const getFunctionalFallthrough = (attrs)=>{
    let res;
    for(const key in attrs)if (key === "class" || key === "style" || (0, _shared.isOn)(key)) (res || (res = {}))[key] = attrs[key];
    return res;
};
const filterModelListeners = (attrs, props)=>{
    const res = {};
    for(const key in attrs)if (!(0, _shared.isModelListener)(key) || !(key.slice(9) in props)) res[key] = attrs[key];
    return res;
};
const isElementRoot = (vnode)=>{
    return vnode.shapeFlag & 7 || vnode.type === Comment;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
    const { props: prevProps , children: prevChildren , component  } = prevVNode;
    const { props: nextProps , children: nextChildren , patchFlag  } = nextVNode;
    const emits = component.emitsOptions;
    if ((prevChildren || nextChildren) && isHmrUpdating) return true;
    if (nextVNode.dirs || nextVNode.transition) return true;
    if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024) return true;
        if (patchFlag & 16) {
            if (!prevProps) return !!nextProps;
            return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8) {
            const dynamicProps = nextVNode.dynamicProps;
            for(let i = 0; i < dynamicProps.length; i++){
                const key = dynamicProps[i];
                if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) return true;
            }
        }
    } else {
        if (prevChildren || nextChildren) {
            if (!nextChildren || !nextChildren.$stable) return true;
        }
        if (prevProps === nextProps) return false;
        if (!prevProps) return !!nextProps;
        if (!nextProps) return true;
        return hasPropsChanged(prevProps, nextProps, emits);
    }
    return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
    const nextKeys = Object.keys(nextProps);
    if (nextKeys.length !== Object.keys(prevProps).length) return true;
    for(let i = 0; i < nextKeys.length; i++){
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) return true;
    }
    return false;
}
function updateHOCHostEl({ vnode , parent  }, el) {
    while(parent){
        const root = parent.subTree;
        if (root.suspense && root.suspense.activeBranch === vnode) root.el = vnode.el;
        if (root === vnode) {
            (vnode = parent.vnode).el = el;
            parent = parent.parent;
        } else break;
    }
}
const isSuspense = (type)=>type.__isSuspense;
let suspenseId = 0;
const SuspenseImpl = {
    name: "Suspense",
    // In order to make Suspense tree-shakable, we need to avoid importing it
    // directly in the renderer. The renderer checks for the __isSuspense flag
    // on a vnode's type and calls the `process` method, passing in renderer
    // internals.
    __isSuspense: true,
    process (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
        if (n1 == null) mountSuspense(n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals);
        else {
            if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {
                n2.suspense = n1.suspense;
                n2.suspense.vnode = n2;
                n2.el = n1.el;
                return;
            }
            patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, rendererInternals);
        }
    },
    hydrate: hydrateSuspense,
    normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
    const eventListener = vnode.props && vnode.props[name];
    if ((0, _shared.isFunction)(eventListener)) eventListener();
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
    const { p: patch , o: { createElement  }  } = rendererInternals;
    const hiddenContainer = createElement("div");
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals);
    patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds);
    if (suspense.deps > 0) {
        triggerEvent(vnode, "onPending");
        triggerEvent(vnode, "onFallback");
        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
        namespace, slotScopeIds);
        setActiveBranch(suspense, vnode.ssFallback);
    } else suspense.resolve(false, true);
}
function patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, { p: patch , um: unmount , o: { createElement  }  }) {
    const suspense = n2.suspense = n1.suspense;
    suspense.vnode = n2;
    n2.el = n1.el;
    const newBranch = n2.ssContent;
    const newFallback = n2.ssFallback;
    const { activeBranch , pendingBranch , isInFallback , isHydrating  } = suspense;
    if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);
            if (suspense.deps <= 0) suspense.resolve();
            else if (isInFallback) {
                if (!isHydrating) {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                    namespace, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            }
        } else {
            suspense.pendingId = suspenseId++;
            if (isHydrating) {
                suspense.isHydrating = false;
                suspense.activeBranch = pendingBranch;
            } else unmount(pendingBranch, parentComponent, suspense);
            suspense.deps = 0;
            suspense.effects.length = 0;
            suspense.hiddenContainer = createElement("div");
            if (isInFallback) {
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
                else {
                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context
                    namespace, slotScopeIds, optimized);
                    setActiveBranch(suspense, newFallback);
                }
            } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, namespace, slotScopeIds, optimized);
                suspense.resolve(true);
            } else {
                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);
                if (suspense.deps <= 0) suspense.resolve();
            }
        }
    } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, namespace, slotScopeIds, optimized);
        setActiveBranch(suspense, newBranch);
    } else {
        triggerEvent(n2, "onPending");
        suspense.pendingBranch = newBranch;
        if (newBranch.shapeFlag & 512) suspense.pendingId = newBranch.component.suspenseId;
        else suspense.pendingId = suspenseId++;
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, namespace, slotScopeIds, optimized);
        if (suspense.deps <= 0) suspense.resolve();
        else {
            const { timeout , pendingId  } = suspense;
            if (timeout > 0) setTimeout(()=>{
                if (suspense.pendingId === pendingId) suspense.fallback(newFallback);
            }, timeout);
            else if (timeout === 0) suspense.fallback(newFallback);
        }
    }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
    if (!hasWarned) {
        hasWarned = true;
        console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
    }
    const { p: patch , m: move , um: unmount , n: next , o: { parentNode , remove  }  } = rendererInternals;
    let parentSuspenseId;
    const isSuspensible = isVNodeSuspensible(vnode);
    if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch) {
            parentSuspenseId = parentSuspense.pendingId;
            parentSuspense.deps++;
        }
    }
    const timeout = vnode.props ? (0, _shared.toNumber)(vnode.props.timeout) : void 0;
    assertNumber(timeout, `Suspense timeout`);
    const initialAnchor = anchor;
    const suspense = {
        vnode,
        parent: parentSuspense,
        parentComponent,
        namespace,
        container,
        hiddenContainer,
        deps: 0,
        pendingId: suspenseId++,
        timeout: typeof timeout === "number" ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: !isHydrating,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve (resume = false, sync = false) {
            if (!resume && !suspense.pendingBranch) throw new Error(`suspense.resolve() is called without a pending branch.`);
            if (suspense.isUnmounted) throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            const { vnode: vnode2 , activeBranch , pendingBranch , pendingId , effects , parentComponent: parentComponent2 , container: container2  } = suspense;
            let delayEnter = false;
            if (suspense.isHydrating) suspense.isHydrating = false;
            else if (!resume) {
                delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
                if (delayEnter) activeBranch.transition.afterLeave = ()=>{
                    if (pendingId === suspense.pendingId) {
                        move(pendingBranch, container2, anchor === initialAnchor ? next(activeBranch) : anchor, 0);
                        queuePostFlushCb(effects);
                    }
                };
                if (activeBranch) {
                    if (parentNode(activeBranch.el) === container2) anchor = next(activeBranch);
                    unmount(activeBranch, parentComponent2, suspense, true);
                }
                if (!delayEnter) move(pendingBranch, container2, anchor, 0);
            }
            setActiveBranch(suspense, pendingBranch);
            suspense.pendingBranch = null;
            suspense.isInFallback = false;
            let parent = suspense.parent;
            let hasUnresolvedAncestor = false;
            while(parent){
                if (parent.pendingBranch) {
                    parent.effects.push(...effects);
                    hasUnresolvedAncestor = true;
                    break;
                }
                parent = parent.parent;
            }
            if (!hasUnresolvedAncestor && !delayEnter) queuePostFlushCb(effects);
            suspense.effects = [];
            if (isSuspensible) {
                if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
                    parentSuspense.deps--;
                    if (parentSuspense.deps === 0 && !sync) parentSuspense.resolve();
                }
            }
            triggerEvent(vnode2, "onResolve");
        },
        fallback (fallbackVNode) {
            if (!suspense.pendingBranch) return;
            const { vnode: vnode2 , activeBranch , parentComponent: parentComponent2 , container: container2 , namespace: namespace2  } = suspense;
            triggerEvent(vnode2, "onFallback");
            const anchor2 = next(activeBranch);
            const mountFallback = ()=>{
                if (!suspense.isInFallback) return;
                patch(null, fallbackVNode, container2, anchor2, parentComponent2, null, // fallback tree will not have suspense context
                namespace2, slotScopeIds, optimized);
                setActiveBranch(suspense, fallbackVNode);
            };
            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
            if (delayEnter) activeBranch.transition.afterLeave = mountFallback;
            suspense.isInFallback = true;
            unmount(activeBranch, parentComponent2, null, // no suspense so unmount hooks fire now
            true);
            if (!delayEnter) mountFallback();
        },
        move (container2, anchor2, type) {
            suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
            suspense.container = container2;
        },
        next () {
            return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep (instance, setupRenderEffect, optimized2) {
            const isInPendingSuspense = !!suspense.pendingBranch;
            if (isInPendingSuspense) suspense.deps++;
            const hydratedEl = instance.vnode.el;
            instance.asyncDep.catch((err)=>{
                handleError(err, instance, 0);
            }).then((asyncSetupResult)=>{
                if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) return;
                instance.asyncResolved = true;
                const { vnode: vnode2  } = instance;
                pushWarningContext(vnode2);
                handleSetupResult(instance, asyncSetupResult, false);
                if (hydratedEl) vnode2.el = hydratedEl;
                const placeholder = !hydratedEl && instance.subTree.el;
                setupRenderEffect(instance, vnode2, // component may have been moved before resolve.
                // if this is not a hydration, instance.subTree will be the comment
                // placeholder.
                parentNode(hydratedEl || instance.subTree.el), // anchor will not be used if this is hydration, so only need to
                // consider the comment placeholder case.
                hydratedEl ? null : next(instance.subTree), suspense, namespace, optimized2);
                if (placeholder) remove(placeholder);
                updateHOCHostEl(instance, vnode2.el);
                popWarningContext();
                if (isInPendingSuspense && --suspense.deps === 0) suspense.resolve();
            });
        },
        unmount (parentSuspense2, doRemove) {
            suspense.isUnmounted = true;
            if (suspense.activeBranch) unmount(suspense.activeBranch, parentComponent, parentSuspense2, doRemove);
            if (suspense.pendingBranch) unmount(suspense.pendingBranch, parentComponent, parentSuspense2, doRemove);
        }
    };
    return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
    const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, // eslint-disable-next-line no-restricted-globals
    document.createElement("div"), null, namespace, slotScopeIds, optimized, rendererInternals, true);
    const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
    if (suspense.deps === 0) suspense.resolve(false, true);
    return result;
}
function normalizeSuspenseChildren(vnode) {
    const { shapeFlag , children  } = vnode;
    const isSlotChildren = shapeFlag & 32;
    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
    vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
    let block;
    if ((0, _shared.isFunction)(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
            s._d = false;
            openBlock();
        }
        s = s();
        if (trackBlock) {
            s._d = true;
            block = currentBlock;
            closeBlock();
        }
    }
    if ((0, _shared.isArray)(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild && s.filter((child)=>child !== NULL_DYNAMIC_COMPONENT).length > 0) warn$1(`<Suspense> slots expect a single root node.`);
        s = singleChild;
    }
    s = normalizeVNode(s);
    if (block && !s.dynamicChildren) s.dynamicChildren = block.filter((c)=>c !== s);
    return s;
}
function queueEffectWithSuspense(fn, suspense) {
    if (suspense && suspense.pendingBranch) {
        if ((0, _shared.isArray)(fn)) suspense.effects.push(...fn);
        else suspense.effects.push(fn);
    } else queuePostFlushCb(fn);
}
function setActiveBranch(suspense, branch) {
    suspense.activeBranch = branch;
    const { vnode , parentComponent  } = suspense;
    let el = branch.el;
    while(!el && branch.component){
        branch = branch.component.subTree;
        el = branch.el;
    }
    vnode.el = el;
    if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
    }
}
function isVNodeSuspensible(vnode) {
    const suspensible = vnode.props && vnode.props.suspensible;
    return suspensible != null && suspensible !== false;
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
    blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
    blockStack.pop();
    currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value, inVOnce = false) {
    isBlockTreeEnabled += value;
    if (value < 0 && currentBlock && inVOnce) currentBlock.hasOnce = true;
}
function setupBlock(vnode) {
    vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || (0, _shared.EMPTY_ARR) : null;
    closeBlock();
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(vnode);
    return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
}
function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
    if (n2.shapeFlag & 6 && n1.component) {
        const dirtyInstances = hmrDirtyComponents.get(n2.type);
        if (dirtyInstances && dirtyInstances.has(n1.component)) {
            n1.shapeFlag &= -257;
            n2.shapeFlag &= -513;
            return false;
        }
    }
    return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
    vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args)=>{
    return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
};
const normalizeKey = ({ key  })=>key != null ? key : null;
const normalizeRef = ({ ref , ref_key , ref_for  })=>{
    if (typeof ref === "number") ref = "" + ref;
    return ref != null ? (0, _shared.isString)(ref) || (0, _reactivity.isRef)(ref) || (0, _shared.isFunction)(ref) ? {
        i: currentRenderingInstance,
        r: ref,
        k: ref_key,
        f: !!ref_for
    } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
    const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetStart: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null,
        ctx: currentRenderingInstance
    };
    if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        if (shapeFlag & 128) type.normalize(vnode);
    } else if (children) vnode.shapeFlag |= (0, _shared.isString)(children) ? 8 : 16;
    if (vnode.key !== vnode.key) warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
    if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
    !isBlockNode && // has current parent block
    currentBlock && // presence of a patch flag indicates this node needs patching on updates.
    // component nodes also should always be patched, because even if the
    // component doesn't need to update, it needs to persist the instance on to
    // the next vnode so that it can be properly unmounted later.
    (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
    // vnode should not be considered dynamic due to handler caching.
    vnode.patchFlag !== 32) currentBlock.push(vnode);
    return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
    if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) warn$1(`Invalid vnode type when creating vnode: ${type}.`);
        type = Comment;
    }
    if (isVNode(type)) {
        const cloned = cloneVNode(type, props, true);
        if (children) normalizeChildren(cloned, children);
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
            if (cloned.shapeFlag & 6) currentBlock[currentBlock.indexOf(type)] = cloned;
            else currentBlock.push(cloned);
        }
        cloned.patchFlag = -2;
        return cloned;
    }
    if (isClassComponent(type)) type = type.__vccOpts;
    if (props) {
        props = guardReactiveProps(props);
        let { class: klass , style  } = props;
        if (klass && !(0, _shared.isString)(klass)) props.class = (0, _shared.normalizeClass)(klass);
        if ((0, _shared.isObject)(style)) {
            if ((0, _reactivity.isProxy)(style) && !(0, _shared.isArray)(style)) style = (0, _shared.extend)({}, style);
            props.style = (0, _shared.normalizeStyle)(style);
        }
    }
    const shapeFlag = (0, _shared.isString)(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : (0, _shared.isObject)(type) ? 4 : (0, _shared.isFunction)(type) ? 2 : 0;
    if (shapeFlag & 4 && (0, _reactivity.isProxy)(type)) {
        type = (0, _reactivity.toRaw)(type);
        warn$1(`Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
    }
    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
    if (!props) return null;
    return (0, _reactivity.isProxy)(props) || isInternalObject(props) ? (0, _shared.extend)({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
    const { props , ref , patchFlag , children , transition  } = vnode;
    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
    const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? // #2078 in the case of <component :is="vnode" ref="extra"/>
        // if the vnode itself already has a ref, cloneVNode will need to merge
        // the refs so the single vnode can be set on multiple refs
        mergeRef && ref ? (0, _shared.isArray)(ref) ? ref.concat(normalizeRef(extraProps)) : [
            ref,
            normalizeRef(extraProps)
        ] : normalizeRef(extraProps) : ref,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 && (0, _shared.isArray)(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetStart: vnode.targetStart,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        // if the vnode is cloned with extra props, we can no longer assume its
        // existing patch flag to be reliable and need to add the FULL_PROPS flag.
        // note: preserve flag for fragments since they use the flag for children
        // fast paths only.
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition,
        // These should technically only be non-null on mounted VNodes. However,
        // they *should* be copied for kept-alive vnodes. So we just always copy
        // them since them being non-null during a mount doesn't affect the logic as
        // they will simply be overwritten.
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor,
        ctx: vnode.ctx,
        ce: vnode.ce
    };
    if (transition && cloneTransition) setTransitionHooks(cloned, transition.clone(cloned));
    return cloned;
}
function deepCloneVNode(vnode) {
    const cloned = cloneVNode(vnode);
    if ((0, _shared.isArray)(vnode.children)) cloned.children = vnode.children.map(deepCloneVNode);
    return cloned;
}
function createTextVNode(text = " ", flag = 0) {
    return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
    const vnode = createVNode(Static, null, content);
    vnode.staticCount = numberOfNodes;
    return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
    return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
    if (child == null || typeof child === "boolean") return createVNode(Comment);
    else if ((0, _shared.isArray)(child)) return createVNode(Fragment, null, // #3666, avoid reference pollution when reusing vnode
    child.slice());
    else if (isVNode(child)) return cloneIfMounted(child);
    else return createVNode(Text, null, String(child));
}
function cloneIfMounted(child) {
    return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
    let type = 0;
    const { shapeFlag  } = vnode;
    if (children == null) children = null;
    else if ((0, _shared.isArray)(children)) type = 16;
    else if (typeof children === "object") {
        if (shapeFlag & 65) {
            const slot = children.default;
            if (slot) {
                slot._c && (slot._d = false);
                normalizeChildren(vnode, slot());
                slot._c && (slot._d = true);
            }
            return;
        } else {
            type = 32;
            const slotFlag = children._;
            if (!slotFlag && !isInternalObject(children)) children._ctx = currentRenderingInstance;
            else if (slotFlag === 3 && currentRenderingInstance) {
                if (currentRenderingInstance.slots._ === 1) children._ = 1;
                else {
                    children._ = 2;
                    vnode.patchFlag |= 1024;
                }
            }
        }
    } else if ((0, _shared.isFunction)(children)) {
        children = {
            default: children,
            _ctx: currentRenderingInstance
        };
        type = 32;
    } else {
        children = String(children);
        if (shapeFlag & 64) {
            type = 16;
            children = [
                createTextVNode(children)
            ];
        } else type = 8;
    }
    vnode.children = children;
    vnode.shapeFlag |= type;
}
function mergeProps(...args) {
    const ret = {};
    for(let i = 0; i < args.length; i++){
        const toMerge = args[i];
        for(const key in toMerge){
            if (key === "class") {
                if (ret.class !== toMerge.class) ret.class = (0, _shared.normalizeClass)([
                    ret.class,
                    toMerge.class
                ]);
            } else if (key === "style") ret.style = (0, _shared.normalizeStyle)([
                ret.style,
                toMerge.style
            ]);
            else if ((0, _shared.isOn)(key)) {
                const existing = ret[key];
                const incoming = toMerge[key];
                if (incoming && existing !== incoming && !((0, _shared.isArray)(existing) && existing.includes(incoming))) ret[key] = existing ? [].concat(existing, incoming) : incoming;
            } else if (key !== "") ret[key] = toMerge[key];
        }
    }
    return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
    callWithAsyncErrorHandling(hook, instance, 7, [
        vnode,
        prevVNode
    ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
    const type = vnode.type;
    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
    const instance = {
        uid: uid++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        // to be immediately set
        next: null,
        subTree: null,
        // will be set synchronously right after creation
        effect: null,
        update: null,
        // will be set synchronously right after creation
        job: null,
        scope: new (0, _reactivity.EffectScope)(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        ids: parent ? parent.ids : [
            "",
            0,
            0
        ],
        accessCache: null,
        renderCache: [],
        // local resolved assets
        components: null,
        directives: null,
        // resolved props and emits options
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        // emit
        emit: null,
        // to be set immediately
        emitted: null,
        // props default value
        propsDefaults: (0, _shared.EMPTY_OBJ),
        // inheritAttrs
        inheritAttrs: type.inheritAttrs,
        // state
        ctx: (0, _shared.EMPTY_OBJ),
        data: (0, _shared.EMPTY_OBJ),
        props: (0, _shared.EMPTY_OBJ),
        attrs: (0, _shared.EMPTY_OBJ),
        slots: (0, _shared.EMPTY_OBJ),
        refs: (0, _shared.EMPTY_OBJ),
        setupState: (0, _shared.EMPTY_OBJ),
        setupContext: null,
        // suspense related
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        // lifecycle hooks
        // not using enums here because it results in computed properties
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
    };
    instance.ctx = createDevRenderContext(instance);
    instance.root = parent ? parent.root : instance;
    instance.emit = emit.bind(null, instance);
    if (vnode.ce) vnode.ce(instance);
    return instance;
}
let currentInstance = null;
const getCurrentInstance = ()=>currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
    const g = (0, _shared.getGlobalThis)();
    const registerGlobalSetter = (key, setter)=>{
        let setters;
        if (!(setters = g[key])) setters = g[key] = [];
        setters.push(setter);
        return (v1)=>{
            if (setters.length > 1) setters.forEach((set)=>set(v1));
            else setters[0](v1);
        };
    };
    internalSetCurrentInstance = registerGlobalSetter(`__VUE_INSTANCE_SETTERS__`, (v1)=>currentInstance = v1);
    setInSSRSetupState = registerGlobalSetter(`__VUE_SSR_SETTERS__`, (v1)=>isInSSRComponentSetup = v1);
}const setCurrentInstance = (instance)=>{
    const prev = currentInstance;
    internalSetCurrentInstance(instance);
    instance.scope.on();
    return ()=>{
        instance.scope.off();
        internalSetCurrentInstance(prev);
    };
};
const unsetCurrentInstance = ()=>{
    currentInstance && currentInstance.scope.off();
    internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ (0, _shared.makeMap)("slot,component");
function validateComponentName(name, { isNativeTag  }) {
    if (isBuiltInTag(name) || isNativeTag(name)) warn$1("Do not use built-in or reserved HTML elements as component id: " + name);
}
function isStatefulComponent(instance) {
    return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false, optimized = false) {
    isSSR && setInSSRSetupState(isSSR);
    const { props , children  } = instance.vnode;
    const isStateful = isStatefulComponent(instance);
    initProps(instance, props, isStateful, isSSR);
    initSlots(instance, children, optimized || isSSR);
    const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
    isSSR && setInSSRSetupState(false);
    return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
    var _a;
    const Component = instance.type;
    if (Component.name) validateComponentName(Component.name, instance.appContext.config);
    if (Component.components) {
        const names = Object.keys(Component.components);
        for(let i = 0; i < names.length; i++)validateComponentName(names[i], instance.appContext.config);
    }
    if (Component.directives) {
        const names = Object.keys(Component.directives);
        for(let i = 0; i < names.length; i++)validateDirectiveName(names[i]);
    }
    if (Component.compilerOptions && isRuntimeOnly()) warn$1(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
    instance.accessCache = /* @__PURE__ */ Object.create(null);
    instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
    exposePropsOnRenderContext(instance);
    const { setup  } = Component;
    if (setup) {
        (0, _reactivity.pauseTracking)();
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        const reset = setCurrentInstance(instance);
        const setupResult = callWithErrorHandling(setup, instance, 0, [
            (0, _reactivity.shallowReadonly)(instance.props),
            setupContext
        ]);
        const isAsyncSetup = (0, _shared.isPromise)(setupResult);
        (0, _reactivity.resetTracking)();
        reset();
        if ((isAsyncSetup || instance.sp) && !isAsyncWrapper(instance)) markAsyncBoundary(instance);
        if (isAsyncSetup) {
            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
            if (isSSR) return setupResult.then((resolvedResult)=>{
                handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e)=>{
                handleError(e, instance, 0);
            });
            else {
                instance.asyncDep = setupResult;
                if (!instance.suspense) {
                    const name = (_a = Component.name) != null ? _a : "Anonymous";
                    warn$1(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
                }
            }
        } else handleSetupResult(instance, setupResult, isSSR);
    } else finishComponentSetup(instance, isSSR);
}
function handleSetupResult(instance, setupResult, isSSR) {
    if ((0, _shared.isFunction)(setupResult)) {
        if (instance.type.__ssrInlineRender) instance.ssrRender = setupResult;
        else instance.render = setupResult;
    } else if ((0, _shared.isObject)(setupResult)) {
        if (isVNode(setupResult)) warn$1(`setup() should not return VNodes directly - return a render function instead.`);
        instance.devtoolsRawSetupState = setupResult;
        instance.setupState = (0, _reactivity.proxyRefs)(setupResult);
        exposeSetupStateOnRenderContext(instance);
    } else if (setupResult !== void 0) warn$1(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
    finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
    compile = _compile;
    installWithProxy = (i)=>{
        if (i.render._rc) i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    };
}
const isRuntimeOnly = ()=>!compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
    const Component = instance.type;
    if (!instance.render) {
        if (!isSSR && compile && !Component.render) {
            const template = Component.template || __VUE_OPTIONS_API__ && resolveMergedOptions(instance).template;
            if (template) {
                startMeasure(instance, `compile`);
                const { isCustomElement , compilerOptions  } = instance.appContext.config;
                const { delimiters , compilerOptions: componentCompilerOptions  } = Component;
                const finalCompilerOptions = (0, _shared.extend)((0, _shared.extend)({
                    isCustomElement,
                    delimiters
                }, compilerOptions), componentCompilerOptions);
                Component.render = compile(template, finalCompilerOptions);
                endMeasure(instance, `compile`);
            }
        }
        instance.render = Component.render || (0, _shared.NOOP);
        if (installWithProxy) installWithProxy(instance);
    }
    if (__VUE_OPTIONS_API__ && true) {
        const reset = setCurrentInstance(instance);
        (0, _reactivity.pauseTracking)();
        try {
            applyOptions(instance);
        } finally{
            (0, _reactivity.resetTracking)();
            reset();
        }
    }
    if (!Component.render && instance.render === (0, _shared.NOOP) && !isSSR) {
        if (!compile && Component.template) warn$1(`Component provided template option but runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`);
        else warn$1(`Component is missing template or render function: `, Component);
    }
}
const attrsProxyHandlers = {
    get (target, key) {
        markAttrsAccessed();
        (0, _reactivity.track)(target, "get", "");
        return target[key];
    },
    set () {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
    },
    deleteProperty () {
        warn$1(`setupContext.attrs is readonly.`);
        return false;
    }
};
function getSlotsProxy(instance) {
    return new Proxy(instance.slots, {
        get (target, key) {
            (0, _reactivity.track)(instance, "get", "$slots");
            return target[key];
        }
    });
}
function createSetupContext(instance) {
    const expose = (exposed)=>{
        if (instance.exposed) warn$1(`expose() should be called only once per setup().`);
        if (exposed != null) {
            let exposedType = typeof exposed;
            if (exposedType === "object") {
                if ((0, _shared.isArray)(exposed)) exposedType = "array";
                else if ((0, _reactivity.isRef)(exposed)) exposedType = "ref";
            }
            if (exposedType !== "object") warn$1(`expose() should be passed a plain object, received ${exposedType}.`);
        }
        instance.exposed = exposed || {};
    };
    {
        let attrsProxy;
        let slotsProxy;
        return Object.freeze({
            get attrs () {
                return attrsProxy || (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers));
            },
            get slots () {
                return slotsProxy || (slotsProxy = getSlotsProxy(instance));
            },
            get emit () {
                return (event, ...args)=>instance.emit(event, ...args);
            },
            expose
        });
    }
}
function getComponentPublicInstance(instance) {
    if (instance.exposed) return instance.exposeProxy || (instance.exposeProxy = new Proxy((0, _reactivity.proxyRefs)((0, _reactivity.markRaw)(instance.exposed)), {
        get (target, key) {
            if (key in target) return target[key];
            else if (key in publicPropertiesMap) return publicPropertiesMap[key](instance);
        },
        has (target, key) {
            return key in target || key in publicPropertiesMap;
        }
    }));
    else return instance.proxy;
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str)=>str.replace(classifyRE, (c)=>c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
    return (0, _shared.isFunction)(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
    let name = getComponentName(Component);
    if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) name = match[1];
    }
    if (!name && instance && instance.parent) {
        const inferFromRegistry = (registry)=>{
            for(const key in registry){
                if (registry[key] === Component) return key;
            }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
    }
    return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
    return (0, _shared.isFunction)(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions)=>{
    const c = (0, _reactivity.computed)(getterOrOptions, debugOptions, isInSSRComponentSetup);
    {
        const i = getCurrentInstance();
        if (i && i.appContext.config.warnRecursiveComputed) c._warnRecursive = true;
    }
    return c;
};
function h(type, propsOrChildren, children) {
    const l = arguments.length;
    if (l === 2) {
        if ((0, _shared.isObject)(propsOrChildren) && !(0, _shared.isArray)(propsOrChildren)) {
            if (isVNode(propsOrChildren)) return createVNode(type, null, [
                propsOrChildren
            ]);
            return createVNode(type, propsOrChildren);
        } else return createVNode(type, null, propsOrChildren);
    } else {
        if (l > 3) children = Array.prototype.slice.call(arguments, 2);
        else if (l === 3 && isVNode(children)) children = [
            children
        ];
        return createVNode(type, propsOrChildren, children);
    }
}
function initCustomFormatter() {
    if (typeof window === "undefined") return;
    const vueStyle = {
        style: "color:#3ba776"
    };
    const numberStyle = {
        style: "color:#1677ff"
    };
    const stringStyle = {
        style: "color:#f5222d"
    };
    const keywordStyle = {
        style: "color:#eb2f96"
    };
    const formatter = {
        __vue_custom_formatter: true,
        header (obj) {
            if (!(0, _shared.isObject)(obj)) return null;
            if (obj.__isVue) return [
                "div",
                vueStyle,
                `VueInstance`
            ];
            else if ((0, _reactivity.isRef)(obj)) {
                (0, _reactivity.pauseTracking)();
                const value = obj.value;
                (0, _reactivity.resetTracking)();
                return [
                    "div",
                    {},
                    [
                        "span",
                        vueStyle,
                        genRefFlag(obj)
                    ],
                    "<",
                    formatValue(value),
                    `>`
                ];
            } else if ((0, _reactivity.isReactive)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    (0, _reactivity.isShallow)(obj) ? "ShallowReactive" : "Reactive"
                ],
                "<",
                formatValue(obj),
                `>${(0, _reactivity.isReadonly)(obj) ? ` (readonly)` : ``}`
            ];
            else if ((0, _reactivity.isReadonly)(obj)) return [
                "div",
                {},
                [
                    "span",
                    vueStyle,
                    (0, _reactivity.isShallow)(obj) ? "ShallowReadonly" : "Readonly"
                ],
                "<",
                formatValue(obj),
                ">"
            ];
            return null;
        },
        hasBody (obj) {
            return obj && obj.__isVue;
        },
        body (obj) {
            if (obj && obj.__isVue) return [
                "div",
                {},
                ...formatInstance(obj.$)
            ];
        }
    };
    function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) blocks.push(createInstanceBlock("props", (0, _reactivity.toRaw)(instance.props)));
        if (instance.setupState !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("setup", instance.setupState));
        if (instance.data !== (0, _shared.EMPTY_OBJ)) blocks.push(createInstanceBlock("data", (0, _reactivity.toRaw)(instance.data)));
        const computed = extractKeys(instance, "computed");
        if (computed) blocks.push(createInstanceBlock("computed", computed));
        const injected = extractKeys(instance, "inject");
        if (injected) blocks.push(createInstanceBlock("injected", injected));
        blocks.push([
            "div",
            {},
            [
                "span",
                {
                    style: keywordStyle.style + ";opacity:0.66"
                },
                "$ (internal): "
            ],
            [
                "object",
                {
                    object: instance
                }
            ]
        ]);
        return blocks;
    }
    function createInstanceBlock(type, target) {
        target = (0, _shared.extend)({}, target);
        if (!Object.keys(target).length) return [
            "span",
            {}
        ];
        return [
            "div",
            {
                style: "line-height:1.25em;margin-bottom:0.6em"
            },
            [
                "div",
                {
                    style: "color:#476582"
                },
                type
            ],
            [
                "div",
                {
                    style: "padding-left:1.25em"
                },
                ...Object.keys(target).map((key)=>{
                    return [
                        "div",
                        {},
                        [
                            "span",
                            keywordStyle,
                            key + ": "
                        ],
                        formatValue(target[key], false)
                    ];
                })
            ]
        ];
    }
    function formatValue(v1, asRaw = true) {
        if (typeof v1 === "number") return [
            "span",
            numberStyle,
            v1
        ];
        else if (typeof v1 === "string") return [
            "span",
            stringStyle,
            JSON.stringify(v1)
        ];
        else if (typeof v1 === "boolean") return [
            "span",
            keywordStyle,
            v1
        ];
        else if ((0, _shared.isObject)(v1)) return [
            "object",
            {
                object: asRaw ? (0, _reactivity.toRaw)(v1) : v1
            }
        ];
        else return [
            "span",
            stringStyle,
            String(v1)
        ];
    }
    function extractKeys(instance, type) {
        const Comp = instance.type;
        if ((0, _shared.isFunction)(Comp)) return;
        const extracted = {};
        for(const key in instance.ctx)if (isKeyOfType(Comp, key, type)) extracted[key] = instance.ctx[key];
        return extracted;
    }
    function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if ((0, _shared.isArray)(opts) && opts.includes(key) || (0, _shared.isObject)(opts) && key in opts) return true;
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) return true;
        if (Comp.mixins && Comp.mixins.some((m)=>isKeyOfType(m, key, type))) return true;
    }
    function genRefFlag(v1) {
        if ((0, _reactivity.isShallow)(v1)) return `ShallowRef`;
        if (v1.effect) return `ComputedRef`;
        return `Ref`;
    }
    if (window.devtoolsFormatters) window.devtoolsFormatters.push(formatter);
    else window.devtoolsFormatters = [
        formatter
    ];
}
function withMemo(memo, render, cache, index) {
    const cached = cache[index];
    if (cached && isMemoSame(cached, memo)) return cached;
    const ret = render();
    ret.memo = memo.slice();
    ret.cacheIndex = index;
    return cache[index] = ret;
}
function isMemoSame(cached, memo) {
    const prev = cached.memo;
    if (prev.length != memo.length) return false;
    for(let i = 0; i < prev.length; i++){
        if ((0, _shared.hasChanged)(prev[i], memo[i])) return false;
    }
    if (isBlockTreeEnabled > 0 && currentBlock) currentBlock.push(cached);
    return true;
}
const version = "3.5.16";
const warn = warn$1;
const ErrorTypeStrings = ErrorTypeStrings$1;
const devtools = devtools$1;
const setDevtoolsHook = setDevtoolsHook$1;
const _ssrUtils = {
    createComponentInstance,
    setupComponent,
    renderComponentRoot,
    setCurrentRenderingInstance,
    isVNode: isVNode,
    normalizeVNode,
    getComponentPublicInstance,
    ensureValidVNode,
    pushWarningContext,
    popWarningContext
};
const ssrUtils = _ssrUtils;
const resolveFilter = null;
const compatUtils = null;
const DeprecationTypes = null;

},{"@vue/reactivity":"fQHlL","@vue/shared":"g6heP","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"fQHlL":[function(require,module,exports) {
/**
* @vue/reactivity v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ARRAY_ITERATE_KEY", ()=>ARRAY_ITERATE_KEY);
parcelHelpers.export(exports, "EffectFlags", ()=>EffectFlags);
parcelHelpers.export(exports, "EffectScope", ()=>EffectScope);
parcelHelpers.export(exports, "ITERATE_KEY", ()=>ITERATE_KEY);
parcelHelpers.export(exports, "MAP_KEY_ITERATE_KEY", ()=>MAP_KEY_ITERATE_KEY);
parcelHelpers.export(exports, "ReactiveEffect", ()=>ReactiveEffect);
parcelHelpers.export(exports, "ReactiveFlags", ()=>ReactiveFlags);
parcelHelpers.export(exports, "TrackOpTypes", ()=>TrackOpTypes);
parcelHelpers.export(exports, "TriggerOpTypes", ()=>TriggerOpTypes);
parcelHelpers.export(exports, "WatchErrorCodes", ()=>WatchErrorCodes);
parcelHelpers.export(exports, "computed", ()=>computed);
parcelHelpers.export(exports, "customRef", ()=>customRef);
parcelHelpers.export(exports, "effect", ()=>effect);
parcelHelpers.export(exports, "effectScope", ()=>effectScope);
parcelHelpers.export(exports, "enableTracking", ()=>enableTracking);
parcelHelpers.export(exports, "getCurrentScope", ()=>getCurrentScope);
parcelHelpers.export(exports, "getCurrentWatcher", ()=>getCurrentWatcher);
parcelHelpers.export(exports, "isProxy", ()=>isProxy);
parcelHelpers.export(exports, "isReactive", ()=>isReactive);
parcelHelpers.export(exports, "isReadonly", ()=>isReadonly);
parcelHelpers.export(exports, "isRef", ()=>isRef);
parcelHelpers.export(exports, "isShallow", ()=>isShallow);
parcelHelpers.export(exports, "markRaw", ()=>markRaw);
parcelHelpers.export(exports, "onEffectCleanup", ()=>onEffectCleanup);
parcelHelpers.export(exports, "onScopeDispose", ()=>onScopeDispose);
parcelHelpers.export(exports, "onWatcherCleanup", ()=>onWatcherCleanup);
parcelHelpers.export(exports, "pauseTracking", ()=>pauseTracking);
parcelHelpers.export(exports, "proxyRefs", ()=>proxyRefs);
parcelHelpers.export(exports, "reactive", ()=>reactive);
parcelHelpers.export(exports, "reactiveReadArray", ()=>reactiveReadArray);
parcelHelpers.export(exports, "readonly", ()=>readonly);
parcelHelpers.export(exports, "ref", ()=>ref);
parcelHelpers.export(exports, "resetTracking", ()=>resetTracking);
parcelHelpers.export(exports, "shallowReactive", ()=>shallowReactive);
parcelHelpers.export(exports, "shallowReadArray", ()=>shallowReadArray);
parcelHelpers.export(exports, "shallowReadonly", ()=>shallowReadonly);
parcelHelpers.export(exports, "shallowRef", ()=>shallowRef);
parcelHelpers.export(exports, "stop", ()=>stop);
parcelHelpers.export(exports, "toRaw", ()=>toRaw);
parcelHelpers.export(exports, "toReactive", ()=>toReactive);
parcelHelpers.export(exports, "toReadonly", ()=>toReadonly);
parcelHelpers.export(exports, "toRef", ()=>toRef);
parcelHelpers.export(exports, "toRefs", ()=>toRefs);
parcelHelpers.export(exports, "toValue", ()=>toValue);
parcelHelpers.export(exports, "track", ()=>track);
parcelHelpers.export(exports, "traverse", ()=>traverse);
parcelHelpers.export(exports, "trigger", ()=>trigger);
parcelHelpers.export(exports, "triggerRef", ()=>triggerRef);
parcelHelpers.export(exports, "unref", ()=>unref);
parcelHelpers.export(exports, "watch", ()=>watch);
var _shared = require("@vue/shared");
function warn(msg, ...args) {
    console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
    constructor(detached = false){
        this.detached = detached;
        /**
     * @internal
     */ this._active = true;
        /**
     * @internal track `on` calls, allow `on` call multiple times
     */ this._on = 0;
        /**
     * @internal
     */ this.effects = [];
        /**
     * @internal
     */ this.cleanups = [];
        this._isPaused = false;
        this.parent = activeEffectScope;
        if (!detached && activeEffectScope) this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
    get active() {
        return this._active;
    }
    pause() {
        if (this._active) {
            this._isPaused = true;
            let i, l;
            if (this.scopes) for(i = 0, l = this.scopes.length; i < l; i++)this.scopes[i].pause();
            for(i = 0, l = this.effects.length; i < l; i++)this.effects[i].pause();
        }
    }
    /**
   * Resumes the effect scope, including all child scopes and effects.
   */ resume() {
        if (this._active) {
            if (this._isPaused) {
                this._isPaused = false;
                let i, l;
                if (this.scopes) for(i = 0, l = this.scopes.length; i < l; i++)this.scopes[i].resume();
                for(i = 0, l = this.effects.length; i < l; i++)this.effects[i].resume();
            }
        }
    }
    run(fn) {
        if (this._active) {
            const currentEffectScope = activeEffectScope;
            try {
                activeEffectScope = this;
                return fn();
            } finally{
                activeEffectScope = currentEffectScope;
            }
        } else warn(`cannot run an inactive effect scope.`);
    }
    /**
   * This should only be called on non-detached scopes
   * @internal
   */ on() {
        if (++this._on === 1) {
            this.prevScope = activeEffectScope;
            activeEffectScope = this;
        }
    }
    /**
   * This should only be called on non-detached scopes
   * @internal
   */ off() {
        if (this._on > 0 && --this._on === 0) {
            activeEffectScope = this.prevScope;
            this.prevScope = void 0;
        }
    }
    stop(fromParent) {
        if (this._active) {
            this._active = false;
            let i, l;
            for(i = 0, l = this.effects.length; i < l; i++)this.effects[i].stop();
            this.effects.length = 0;
            for(i = 0, l = this.cleanups.length; i < l; i++)this.cleanups[i]();
            this.cleanups.length = 0;
            if (this.scopes) {
                for(i = 0, l = this.scopes.length; i < l; i++)this.scopes[i].stop(true);
                this.scopes.length = 0;
            }
            if (!this.detached && this.parent && !fromParent) {
                const last = this.parent.scopes.pop();
                if (last && last !== this) {
                    this.parent.scopes[this.index] = last;
                    last.index = this.index;
                }
            }
            this.parent = void 0;
        }
    }
}
function effectScope(detached) {
    return new EffectScope(detached);
}
function getCurrentScope() {
    return activeEffectScope;
}
function onScopeDispose(fn, failSilently = false) {
    if (activeEffectScope) activeEffectScope.cleanups.push(fn);
    else if (!failSilently) warn(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
}
let activeSub;
const EffectFlags = {
    "ACTIVE": 1,
    "1": "ACTIVE",
    "RUNNING": 2,
    "2": "RUNNING",
    "TRACKING": 4,
    "4": "TRACKING",
    "NOTIFIED": 8,
    "8": "NOTIFIED",
    "DIRTY": 16,
    "16": "DIRTY",
    "ALLOW_RECURSE": 32,
    "32": "ALLOW_RECURSE",
    "PAUSED": 64,
    "64": "PAUSED",
    "EVALUATED": 128,
    "128": "EVALUATED"
};
const pausedQueueEffects = /* @__PURE__ */ new WeakSet();
class ReactiveEffect {
    constructor(fn){
        this.fn = fn;
        /**
     * @internal
     */ this.deps = void 0;
        /**
     * @internal
     */ this.depsTail = void 0;
        /**
     * @internal
     */ this.flags = 5;
        /**
     * @internal
     */ this.next = void 0;
        /**
     * @internal
     */ this.cleanup = void 0;
        this.scheduler = void 0;
        if (activeEffectScope && activeEffectScope.active) activeEffectScope.effects.push(this);
    }
    pause() {
        this.flags |= 64;
    }
    resume() {
        if (this.flags & 64) {
            this.flags &= -65;
            if (pausedQueueEffects.has(this)) {
                pausedQueueEffects.delete(this);
                this.trigger();
            }
        }
    }
    /**
   * @internal
   */ notify() {
        if (this.flags & 2 && !(this.flags & 32)) return;
        if (!(this.flags & 8)) batch(this);
    }
    run() {
        if (!(this.flags & 1)) return this.fn();
        this.flags |= 2;
        cleanupEffect(this);
        prepareDeps(this);
        const prevEffect = activeSub;
        const prevShouldTrack = shouldTrack;
        activeSub = this;
        shouldTrack = true;
        try {
            return this.fn();
        } finally{
            if (activeSub !== this) warn("Active effect was not restored correctly - this is likely a Vue internal bug.");
            cleanupDeps(this);
            activeSub = prevEffect;
            shouldTrack = prevShouldTrack;
            this.flags &= -3;
        }
    }
    stop() {
        if (this.flags & 1) {
            for(let link = this.deps; link; link = link.nextDep)removeSub(link);
            this.deps = this.depsTail = void 0;
            cleanupEffect(this);
            this.onStop && this.onStop();
            this.flags &= -2;
        }
    }
    trigger() {
        if (this.flags & 64) pausedQueueEffects.add(this);
        else if (this.scheduler) this.scheduler();
        else this.runIfDirty();
    }
    /**
   * @internal
   */ runIfDirty() {
        if (isDirty(this)) this.run();
    }
    get dirty() {
        return isDirty(this);
    }
}
let batchDepth = 0;
let batchedSub;
let batchedComputed;
function batch(sub, isComputed = false) {
    sub.flags |= 8;
    if (isComputed) {
        sub.next = batchedComputed;
        batchedComputed = sub;
        return;
    }
    sub.next = batchedSub;
    batchedSub = sub;
}
function startBatch() {
    batchDepth++;
}
function endBatch() {
    if (--batchDepth > 0) return;
    if (batchedComputed) {
        let e = batchedComputed;
        batchedComputed = void 0;
        while(e){
            const next = e.next;
            e.next = void 0;
            e.flags &= -9;
            e = next;
        }
    }
    let error;
    while(batchedSub){
        let e = batchedSub;
        batchedSub = void 0;
        while(e){
            const next = e.next;
            e.next = void 0;
            e.flags &= -9;
            if (e.flags & 1) try {
                e.trigger();
            } catch (err) {
                if (!error) error = err;
            }
            e = next;
        }
    }
    if (error) throw error;
}
function prepareDeps(sub) {
    for(let link = sub.deps; link; link = link.nextDep){
        link.version = -1;
        link.prevActiveLink = link.dep.activeLink;
        link.dep.activeLink = link;
    }
}
function cleanupDeps(sub) {
    let head;
    let tail = sub.depsTail;
    let link = tail;
    while(link){
        const prev = link.prevDep;
        if (link.version === -1) {
            if (link === tail) tail = prev;
            removeSub(link);
            removeDep(link);
        } else head = link;
        link.dep.activeLink = link.prevActiveLink;
        link.prevActiveLink = void 0;
        link = prev;
    }
    sub.deps = head;
    sub.depsTail = tail;
}
function isDirty(sub) {
    for(let link = sub.deps; link; link = link.nextDep){
        if (link.dep.version !== link.version || link.dep.computed && (refreshComputed(link.dep.computed) || link.dep.version !== link.version)) return true;
    }
    if (sub._dirty) return true;
    return false;
}
function refreshComputed(computed) {
    if (computed.flags & 4 && !(computed.flags & 16)) return;
    computed.flags &= -17;
    if (computed.globalVersion === globalVersion) return;
    computed.globalVersion = globalVersion;
    if (!computed.isSSR && computed.flags & 128 && (!computed.deps && !computed._dirty || !isDirty(computed))) return;
    computed.flags |= 2;
    const dep = computed.dep;
    const prevSub = activeSub;
    const prevShouldTrack = shouldTrack;
    activeSub = computed;
    shouldTrack = true;
    try {
        prepareDeps(computed);
        const value = computed.fn(computed._value);
        if (dep.version === 0 || (0, _shared.hasChanged)(value, computed._value)) {
            computed.flags |= 128;
            computed._value = value;
            dep.version++;
        }
    } catch (err) {
        dep.version++;
        throw err;
    } finally{
        activeSub = prevSub;
        shouldTrack = prevShouldTrack;
        cleanupDeps(computed);
        computed.flags &= -3;
    }
}
function removeSub(link, soft = false) {
    const { dep , prevSub , nextSub  } = link;
    if (prevSub) {
        prevSub.nextSub = nextSub;
        link.prevSub = void 0;
    }
    if (nextSub) {
        nextSub.prevSub = prevSub;
        link.nextSub = void 0;
    }
    if (dep.subsHead === link) dep.subsHead = nextSub;
    if (dep.subs === link) {
        dep.subs = prevSub;
        if (!prevSub && dep.computed) {
            dep.computed.flags &= -5;
            for(let l = dep.computed.deps; l; l = l.nextDep)removeSub(l, true);
        }
    }
    if (!soft && !--dep.sc && dep.map) dep.map.delete(dep.key);
}
function removeDep(link) {
    const { prevDep , nextDep  } = link;
    if (prevDep) {
        prevDep.nextDep = nextDep;
        link.prevDep = void 0;
    }
    if (nextDep) {
        nextDep.prevDep = prevDep;
        link.nextDep = void 0;
    }
}
function effect(fn, options) {
    if (fn.effect instanceof ReactiveEffect) fn = fn.effect.fn;
    const e = new ReactiveEffect(fn);
    if (options) (0, _shared.extend)(e, options);
    try {
        e.run();
    } catch (err) {
        e.stop();
        throw err;
    }
    const runner = e.run.bind(e);
    runner.effect = e;
    return runner;
}
function stop(runner) {
    runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = false;
}
function enableTracking() {
    trackStack.push(shouldTrack);
    shouldTrack = true;
}
function resetTracking() {
    const last = trackStack.pop();
    shouldTrack = last === void 0 ? true : last;
}
function onEffectCleanup(fn, failSilently = false) {
    if (activeSub instanceof ReactiveEffect) activeSub.cleanup = fn;
    else if (!failSilently) warn(`onEffectCleanup() was called when there was no active effect to associate with.`);
}
function cleanupEffect(e) {
    const { cleanup  } = e;
    e.cleanup = void 0;
    if (cleanup) {
        const prevSub = activeSub;
        activeSub = void 0;
        try {
            cleanup();
        } finally{
            activeSub = prevSub;
        }
    }
}
let globalVersion = 0;
class Link {
    constructor(sub, dep){
        this.sub = sub;
        this.dep = dep;
        this.version = dep.version;
        this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
    }
}
class Dep {
    constructor(computed){
        this.computed = computed;
        this.version = 0;
        /**
     * Link between this dep and the current active effect
     */ this.activeLink = void 0;
        /**
     * Doubly linked list representing the subscribing effects (tail)
     */ this.subs = void 0;
        /**
     * For object property deps cleanup
     */ this.map = void 0;
        this.key = void 0;
        /**
     * Subscriber counter
     */ this.sc = 0;
        this.subsHead = void 0;
    }
    track(debugInfo) {
        if (!activeSub || !shouldTrack || activeSub === this.computed) return;
        let link = this.activeLink;
        if (link === void 0 || link.sub !== activeSub) {
            link = this.activeLink = new Link(activeSub, this);
            if (!activeSub.deps) activeSub.deps = activeSub.depsTail = link;
            else {
                link.prevDep = activeSub.depsTail;
                activeSub.depsTail.nextDep = link;
                activeSub.depsTail = link;
            }
            addSub(link);
        } else if (link.version === -1) {
            link.version = this.version;
            if (link.nextDep) {
                const next = link.nextDep;
                next.prevDep = link.prevDep;
                if (link.prevDep) link.prevDep.nextDep = next;
                link.prevDep = activeSub.depsTail;
                link.nextDep = void 0;
                activeSub.depsTail.nextDep = link;
                activeSub.depsTail = link;
                if (activeSub.deps === link) activeSub.deps = next;
            }
        }
        if (0, activeSub.onTrack) activeSub.onTrack((0, _shared.extend)({
            effect: activeSub
        }, debugInfo));
        return link;
    }
    trigger(debugInfo) {
        this.version++;
        globalVersion++;
        this.notify(debugInfo);
    }
    notify(debugInfo) {
        startBatch();
        try {
            for(let head = this.subsHead; head; head = head.nextSub)if (head.sub.onTrigger && !(head.sub.flags & 8)) head.sub.onTrigger((0, _shared.extend)({
                effect: head.sub
            }, debugInfo));
            for(let link = this.subs; link; link = link.prevSub)if (link.sub.notify()) link.sub.dep.notify();
        } finally{
            endBatch();
        }
    }
}
function addSub(link) {
    link.dep.sc++;
    if (link.sub.flags & 4) {
        const computed = link.dep.computed;
        if (computed && !link.dep.subs) {
            computed.flags |= 20;
            for(let l = computed.deps; l; l = l.nextDep)addSub(l);
        }
        const currentTail = link.dep.subs;
        if (currentTail !== link) {
            link.prevSub = currentTail;
            if (currentTail) currentTail.nextSub = link;
        }
        if (link.dep.subsHead === void 0) link.dep.subsHead = link;
        link.dep.subs = link;
    }
}
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol("Object iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map keys iterate");
const ARRAY_ITERATE_KEY = Symbol("Array iterate");
function track(target, type, key) {
    if (shouldTrack && activeSub) {
        let depsMap = targetMap.get(target);
        if (!depsMap) targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        let dep = depsMap.get(key);
        if (!dep) {
            depsMap.set(key, dep = new Dep());
            dep.map = depsMap;
            dep.key = key;
        }
        dep.track({
            target,
            type,
            key
        });
    }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
    const depsMap = targetMap.get(target);
    if (!depsMap) {
        globalVersion++;
        return;
    }
    const run = (dep)=>{
        if (dep) dep.trigger({
            target,
            type,
            key,
            newValue,
            oldValue,
            oldTarget
        });
    };
    startBatch();
    if (type === "clear") depsMap.forEach(run);
    else {
        const targetIsArray = (0, _shared.isArray)(target);
        const isArrayIndex = targetIsArray && (0, _shared.isIntegerKey)(key);
        if (targetIsArray && key === "length") {
            const newLength = Number(newValue);
            depsMap.forEach((dep, key2)=>{
                if (key2 === "length" || key2 === ARRAY_ITERATE_KEY || !(0, _shared.isSymbol)(key2) && key2 >= newLength) run(dep);
            });
        } else {
            if (key !== void 0 || depsMap.has(void 0)) run(depsMap.get(key));
            if (isArrayIndex) run(depsMap.get(ARRAY_ITERATE_KEY));
            switch(type){
                case "add":
                    if (!targetIsArray) {
                        run(depsMap.get(ITERATE_KEY));
                        if ((0, _shared.isMap)(target)) run(depsMap.get(MAP_KEY_ITERATE_KEY));
                    } else if (isArrayIndex) run(depsMap.get("length"));
                    break;
                case "delete":
                    if (!targetIsArray) {
                        run(depsMap.get(ITERATE_KEY));
                        if ((0, _shared.isMap)(target)) run(depsMap.get(MAP_KEY_ITERATE_KEY));
                    }
                    break;
                case "set":
                    if ((0, _shared.isMap)(target)) run(depsMap.get(ITERATE_KEY));
                    break;
            }
        }
    }
    endBatch();
}
function getDepFromReactive(object, key) {
    const depMap = targetMap.get(object);
    return depMap && depMap.get(key);
}
function reactiveReadArray(array) {
    const raw = toRaw(array);
    if (raw === array) return raw;
    track(raw, "iterate", ARRAY_ITERATE_KEY);
    return isShallow(array) ? raw : raw.map(toReactive);
}
function shallowReadArray(arr) {
    track(arr = toRaw(arr), "iterate", ARRAY_ITERATE_KEY);
    return arr;
}
const arrayInstrumentations = {
    __proto__: null,
    [Symbol.iterator] () {
        return iterator(this, Symbol.iterator, toReactive);
    },
    concat (...args) {
        return reactiveReadArray(this).concat(...args.map((x)=>(0, _shared.isArray)(x) ? reactiveReadArray(x) : x));
    },
    entries () {
        return iterator(this, "entries", (value)=>{
            value[1] = toReactive(value[1]);
            return value;
        });
    },
    every (fn, thisArg) {
        return apply(this, "every", fn, thisArg, void 0, arguments);
    },
    filter (fn, thisArg) {
        return apply(this, "filter", fn, thisArg, (v)=>v.map(toReactive), arguments);
    },
    find (fn, thisArg) {
        return apply(this, "find", fn, thisArg, toReactive, arguments);
    },
    findIndex (fn, thisArg) {
        return apply(this, "findIndex", fn, thisArg, void 0, arguments);
    },
    findLast (fn, thisArg) {
        return apply(this, "findLast", fn, thisArg, toReactive, arguments);
    },
    findLastIndex (fn, thisArg) {
        return apply(this, "findLastIndex", fn, thisArg, void 0, arguments);
    },
    // flat, flatMap could benefit from ARRAY_ITERATE but are not straight-forward to implement
    forEach (fn, thisArg) {
        return apply(this, "forEach", fn, thisArg, void 0, arguments);
    },
    includes (...args) {
        return searchProxy(this, "includes", args);
    },
    indexOf (...args) {
        return searchProxy(this, "indexOf", args);
    },
    join (separator) {
        return reactiveReadArray(this).join(separator);
    },
    // keys() iterator only reads `length`, no optimisation required
    lastIndexOf (...args) {
        return searchProxy(this, "lastIndexOf", args);
    },
    map (fn, thisArg) {
        return apply(this, "map", fn, thisArg, void 0, arguments);
    },
    pop () {
        return noTracking(this, "pop");
    },
    push (...args) {
        return noTracking(this, "push", args);
    },
    reduce (fn, ...args) {
        return reduce(this, "reduce", fn, args);
    },
    reduceRight (fn, ...args) {
        return reduce(this, "reduceRight", fn, args);
    },
    shift () {
        return noTracking(this, "shift");
    },
    // slice could use ARRAY_ITERATE but also seems to beg for range tracking
    some (fn, thisArg) {
        return apply(this, "some", fn, thisArg, void 0, arguments);
    },
    splice (...args) {
        return noTracking(this, "splice", args);
    },
    toReversed () {
        return reactiveReadArray(this).toReversed();
    },
    toSorted (comparer) {
        return reactiveReadArray(this).toSorted(comparer);
    },
    toSpliced (...args) {
        return reactiveReadArray(this).toSpliced(...args);
    },
    unshift (...args) {
        return noTracking(this, "unshift", args);
    },
    values () {
        return iterator(this, "values", toReactive);
    }
};
function iterator(self, method, wrapValue) {
    const arr = shallowReadArray(self);
    const iter = arr[method]();
    if (arr !== self && !isShallow(self)) {
        iter._next = iter.next;
        iter.next = ()=>{
            const result = iter._next();
            if (result.value) result.value = wrapValue(result.value);
            return result;
        };
    }
    return iter;
}
const arrayProto = Array.prototype;
function apply(self, method, fn, thisArg, wrappedRetFn, args) {
    const arr = shallowReadArray(self);
    const needsWrap = arr !== self && !isShallow(self);
    const methodFn = arr[method];
    if (methodFn !== arrayProto[method]) {
        const result2 = methodFn.apply(self, args);
        return needsWrap ? toReactive(result2) : result2;
    }
    let wrappedFn = fn;
    if (arr !== self) {
        if (needsWrap) wrappedFn = function(item, index) {
            return fn.call(this, toReactive(item), index, self);
        };
        else if (fn.length > 2) wrappedFn = function(item, index) {
            return fn.call(this, item, index, self);
        };
    }
    const result = methodFn.call(arr, wrappedFn, thisArg);
    return needsWrap && wrappedRetFn ? wrappedRetFn(result) : result;
}
function reduce(self, method, fn, args) {
    const arr = shallowReadArray(self);
    let wrappedFn = fn;
    if (arr !== self) {
        if (!isShallow(self)) wrappedFn = function(acc, item, index) {
            return fn.call(this, acc, toReactive(item), index, self);
        };
        else if (fn.length > 3) wrappedFn = function(acc, item, index) {
            return fn.call(this, acc, item, index, self);
        };
    }
    return arr[method](wrappedFn, ...args);
}
function searchProxy(self, method, args) {
    const arr = toRaw(self);
    track(arr, "iterate", ARRAY_ITERATE_KEY);
    const res = arr[method](...args);
    if ((res === -1 || res === false) && isProxy(args[0])) {
        args[0] = toRaw(args[0]);
        return arr[method](...args);
    }
    return res;
}
function noTracking(self, method, args = []) {
    pauseTracking();
    startBatch();
    const res = toRaw(self)[method].apply(self, args);
    endBatch();
    resetTracking();
    return res;
}
const isNonTrackableKeys = /* @__PURE__ */ (0, _shared.makeMap)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(/* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key)=>key !== "arguments" && key !== "caller").map((key)=>Symbol[key]).filter((0, _shared.isSymbol)));
function hasOwnProperty(key) {
    if (!(0, _shared.isSymbol)(key)) key = String(key);
    const obj = toRaw(this);
    track(obj, "has", key);
    return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
    constructor(_isReadonly = false, _isShallow = false){
        this._isReadonly = _isReadonly;
        this._isShallow = _isShallow;
    }
    get(target, key, receiver) {
        if (key === "__v_skip") return target["__v_skip"];
        const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
        if (key === "__v_isReactive") return !isReadonly2;
        else if (key === "__v_isReadonly") return isReadonly2;
        else if (key === "__v_isShallow") return isShallow2;
        else if (key === "__v_raw") {
            if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
            // this means the receiver is a user proxy of the reactive proxy
            Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) return target;
            return;
        }
        const targetIsArray = (0, _shared.isArray)(target);
        if (!isReadonly2) {
            let fn;
            if (targetIsArray && (fn = arrayInstrumentations[key])) return fn;
            if (key === "hasOwnProperty") return hasOwnProperty;
        }
        const res = Reflect.get(target, key, // if this is a proxy wrapping a ref, return methods using the raw ref
        // as receiver so that we don't have to call `toRaw` on the ref in all
        // its class methods
        isRef(target) ? target : receiver);
        if ((0, _shared.isSymbol)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) return res;
        if (!isReadonly2) track(target, "get", key);
        if (isShallow2) return res;
        if (isRef(res)) return targetIsArray && (0, _shared.isIntegerKey)(key) ? res : res.value;
        if ((0, _shared.isObject)(res)) return isReadonly2 ? readonly(res) : reactive(res);
        return res;
    }
}
class MutableReactiveHandler extends BaseReactiveHandler {
    constructor(isShallow2 = false){
        super(false, isShallow2);
    }
    set(target, key, value, receiver) {
        let oldValue = target[key];
        if (!this._isShallow) {
            const isOldValueReadonly = isReadonly(oldValue);
            if (!isShallow(value) && !isReadonly(value)) {
                oldValue = toRaw(oldValue);
                value = toRaw(value);
            }
            if (!(0, _shared.isArray)(target) && isRef(oldValue) && !isRef(value)) {
                if (isOldValueReadonly) return false;
                else {
                    oldValue.value = value;
                    return true;
                }
            }
        }
        const hadKey = (0, _shared.isArray)(target) && (0, _shared.isIntegerKey)(key) ? Number(key) < target.length : (0, _shared.hasOwn)(target, key);
        const result = Reflect.set(target, key, value, isRef(target) ? target : receiver);
        if (target === toRaw(receiver)) {
            if (!hadKey) trigger(target, "add", key, value);
            else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set", key, value, oldValue);
        }
        return result;
    }
    deleteProperty(target, key) {
        const hadKey = (0, _shared.hasOwn)(target, key);
        const oldValue = target[key];
        const result = Reflect.deleteProperty(target, key);
        if (result && hadKey) trigger(target, "delete", key, void 0, oldValue);
        return result;
    }
    has(target, key) {
        const result = Reflect.has(target, key);
        if (!(0, _shared.isSymbol)(key) || !builtInSymbols.has(key)) track(target, "has", key);
        return result;
    }
    ownKeys(target) {
        track(target, "iterate", (0, _shared.isArray)(target) ? "length" : ITERATE_KEY);
        return Reflect.ownKeys(target);
    }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
    constructor(isShallow2 = false){
        super(true, isShallow2);
    }
    set(target, key) {
        warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
    deleteProperty(target, key) {
        warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        return true;
    }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(true);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value)=>value;
const getProto = (v)=>Reflect.getPrototypeOf(v);
function createIterableMethod(method, isReadonly2, isShallow2) {
    return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = (0, _shared.isMap)(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
            // iterator protocol
            next () {
                const { value , done  } = innerIterator.next();
                return done ? {
                    value,
                    done
                } : {
                    value: isPair ? [
                        wrap(value[0]),
                        wrap(value[1])
                    ] : wrap(value),
                    done
                };
            },
            // iterable protocol
            [Symbol.iterator] () {
                return this;
            }
        };
    };
}
function createReadonlyMethod(type) {
    return function(...args) {
        {
            const key = args[0] ? `on key "${args[0]}" ` : ``;
            warn(`${(0, _shared.capitalize)(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" ? false : type === "clear" ? void 0 : this;
    };
}
function createInstrumentations(readonly, shallow) {
    const instrumentations = {
        get (key) {
            const target = this["__v_raw"];
            const rawTarget = toRaw(target);
            const rawKey = toRaw(key);
            if (!readonly) {
                if ((0, _shared.hasChanged)(key, rawKey)) track(rawTarget, "get", key);
                track(rawTarget, "get", rawKey);
            }
            const { has  } = getProto(rawTarget);
            const wrap = shallow ? toShallow : readonly ? toReadonly : toReactive;
            if (has.call(rawTarget, key)) return wrap(target.get(key));
            else if (has.call(rawTarget, rawKey)) return wrap(target.get(rawKey));
            else if (target !== rawTarget) target.get(key);
        },
        get size () {
            const target = this["__v_raw"];
            !readonly && track(toRaw(target), "iterate", ITERATE_KEY);
            return Reflect.get(target, "size", target);
        },
        has (key) {
            const target = this["__v_raw"];
            const rawTarget = toRaw(target);
            const rawKey = toRaw(key);
            if (!readonly) {
                if ((0, _shared.hasChanged)(key, rawKey)) track(rawTarget, "has", key);
                track(rawTarget, "has", rawKey);
            }
            return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
        },
        forEach (callback, thisArg) {
            const observed = this;
            const target = observed["__v_raw"];
            const rawTarget = toRaw(target);
            const wrap = shallow ? toShallow : readonly ? toReadonly : toReactive;
            !readonly && track(rawTarget, "iterate", ITERATE_KEY);
            return target.forEach((value, key)=>{
                return callback.call(thisArg, wrap(value), wrap(key), observed);
            });
        }
    };
    (0, _shared.extend)(instrumentations, readonly ? {
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear")
    } : {
        add (value) {
            if (!shallow && !isShallow(value) && !isReadonly(value)) value = toRaw(value);
            const target = toRaw(this);
            const proto = getProto(target);
            const hadKey = proto.has.call(target, value);
            if (!hadKey) {
                target.add(value);
                trigger(target, "add", value, value);
            }
            return this;
        },
        set (key, value) {
            if (!shallow && !isShallow(value) && !isReadonly(value)) value = toRaw(value);
            const target = toRaw(this);
            const { has , get  } = getProto(target);
            let hadKey = has.call(target, key);
            if (!hadKey) {
                key = toRaw(key);
                hadKey = has.call(target, key);
            } else checkIdentityKeys(target, has, key);
            const oldValue = get.call(target, key);
            target.set(key, value);
            if (!hadKey) trigger(target, "add", key, value);
            else if ((0, _shared.hasChanged)(value, oldValue)) trigger(target, "set", key, value, oldValue);
            return this;
        },
        delete (key) {
            const target = toRaw(this);
            const { has , get  } = getProto(target);
            let hadKey = has.call(target, key);
            if (!hadKey) {
                key = toRaw(key);
                hadKey = has.call(target, key);
            } else checkIdentityKeys(target, has, key);
            const oldValue = get ? get.call(target, key) : void 0;
            const result = target.delete(key);
            if (hadKey) trigger(target, "delete", key, void 0, oldValue);
            return result;
        },
        clear () {
            const target = toRaw(this);
            const hadItems = target.size !== 0;
            const oldTarget = (0, _shared.isMap)(target) ? new Map(target) : new Set(target);
            const result = target.clear();
            if (hadItems) trigger(target, "clear", void 0, void 0, oldTarget);
            return result;
        }
    });
    const iteratorMethods = [
        "keys",
        "values",
        "entries",
        Symbol.iterator
    ];
    iteratorMethods.forEach((method)=>{
        instrumentations[method] = createIterableMethod(method, readonly, shallow);
    });
    return instrumentations;
}
function createInstrumentationGetter(isReadonly2, shallow) {
    const instrumentations = createInstrumentations(isReadonly2, shallow);
    return (target, key, receiver)=>{
        if (key === "__v_isReactive") return !isReadonly2;
        else if (key === "__v_isReadonly") return isReadonly2;
        else if (key === "__v_raw") return target;
        return Reflect.get((0, _shared.hasOwn)(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
    };
}
const mutableCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
    get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has, key) {
    const rawKey = toRaw(key);
    if (rawKey !== key && has.call(target, rawKey)) {
        const type = (0, _shared.toRawType)(target);
        warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
    }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
    switch(rawType){
        case "Object":
        case "Array":
            return 1 /* COMMON */ ;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
            return 2 /* COLLECTION */ ;
        default:
            return 0 /* INVALID */ ;
    }
}
function getTargetType(value) {
    return value["__v_skip"] || !Object.isExtensible(value) ? 0 /* INVALID */  : targetTypeMap((0, _shared.toRawType)(value));
}
function reactive(target) {
    if (isReadonly(target)) return target;
    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function shallowReadonly(target) {
    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
    if (!(0, _shared.isObject)(target)) {
        warn(`value cannot be made ${isReadonly2 ? "readonly" : "reactive"}: ${String(target)}`);
        return target;
    }
    if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) return target;
    const targetType = getTargetType(target);
    if (targetType === 0 /* INVALID */ ) return target;
    const existingProxy = proxyMap.get(target);
    if (existingProxy) return existingProxy;
    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */  ? collectionHandlers : baseHandlers);
    proxyMap.set(target, proxy);
    return proxy;
}
function isReactive(value) {
    if (isReadonly(value)) return isReactive(value["__v_raw"]);
    return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
    return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
    return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
    return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
    const raw = observed && observed["__v_raw"];
    return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
    if (!(0, _shared.hasOwn)(value, "__v_skip") && Object.isExtensible(value)) (0, _shared.def)(value, "__v_skip", true);
    return value;
}
const toReactive = (value)=>(0, _shared.isObject)(value) ? reactive(value) : value;
const toReadonly = (value)=>(0, _shared.isObject)(value) ? readonly(value) : value;
function isRef(r) {
    return r ? r["__v_isRef"] === true : false;
}
function ref(value) {
    return createRef(value, false);
}
function shallowRef(value) {
    return createRef(value, true);
}
function createRef(rawValue, shallow) {
    if (isRef(rawValue)) return rawValue;
    return new RefImpl(rawValue, shallow);
}
class RefImpl {
    constructor(value, isShallow2){
        this.dep = new Dep();
        this["__v_isRef"] = true;
        this["__v_isShallow"] = false;
        this._rawValue = isShallow2 ? value : toRaw(value);
        this._value = isShallow2 ? value : toReactive(value);
        this["__v_isShallow"] = isShallow2;
    }
    get value() {
        this.dep.track({
            target: this,
            type: "get",
            key: "value"
        });
        return this._value;
    }
    set value(newValue) {
        const oldValue = this._rawValue;
        const useDirectValue = this["__v_isShallow"] || isShallow(newValue) || isReadonly(newValue);
        newValue = useDirectValue ? newValue : toRaw(newValue);
        if ((0, _shared.hasChanged)(newValue, oldValue)) {
            this._rawValue = newValue;
            this._value = useDirectValue ? newValue : toReactive(newValue);
            this.dep.trigger({
                target: this,
                type: "set",
                key: "value",
                newValue,
                oldValue
            });
        }
    }
}
function triggerRef(ref2) {
    if (ref2.dep) ref2.dep.trigger({
        target: ref2,
        type: "set",
        key: "value",
        newValue: ref2._value
    });
}
function unref(ref2) {
    return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
    return (0, _shared.isFunction)(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
    get: (target, key, receiver)=>key === "__v_raw" ? target : unref(Reflect.get(target, key, receiver)),
    set: (target, key, value, receiver)=>{
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
        } else return Reflect.set(target, key, value, receiver);
    }
};
function proxyRefs(objectWithRefs) {
    return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
    constructor(factory){
        this["__v_isRef"] = true;
        this._value = void 0;
        const dep = this.dep = new Dep();
        const { get , set  } = factory(dep.track.bind(dep), dep.trigger.bind(dep));
        this._get = get;
        this._set = set;
    }
    get value() {
        return this._value = this._get();
    }
    set value(newVal) {
        this._set(newVal);
    }
}
function customRef(factory) {
    return new CustomRefImpl(factory);
}
function toRefs(object) {
    if (!isProxy(object)) warn(`toRefs() expects a reactive object but received a plain one.`);
    const ret = (0, _shared.isArray)(object) ? new Array(object.length) : {};
    for(const key in object)ret[key] = propertyToRef(object, key);
    return ret;
}
class ObjectRefImpl {
    constructor(_object, _key, _defaultValue){
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this["__v_isRef"] = true;
        this._value = void 0;
    }
    get value() {
        const val = this._object[this._key];
        return this._value = val === void 0 ? this._defaultValue : val;
    }
    set value(newVal) {
        this._object[this._key] = newVal;
    }
    get dep() {
        return getDepFromReactive(toRaw(this._object), this._key);
    }
}
class GetterRefImpl {
    constructor(_getter){
        this._getter = _getter;
        this["__v_isRef"] = true;
        this["__v_isReadonly"] = true;
        this._value = void 0;
    }
    get value() {
        return this._value = this._getter();
    }
}
function toRef(source, key, defaultValue) {
    if (isRef(source)) return source;
    else if ((0, _shared.isFunction)(source)) return new GetterRefImpl(source);
    else if ((0, _shared.isObject)(source) && arguments.length > 1) return propertyToRef(source, key, defaultValue);
    else return ref(source);
}
function propertyToRef(source, key, defaultValue) {
    const val = source[key];
    return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}
class ComputedRefImpl {
    constructor(fn, setter, isSSR){
        this.fn = fn;
        this.setter = setter;
        /**
     * @internal
     */ this._value = void 0;
        /**
     * @internal
     */ this.dep = new Dep(this);
        /**
     * @internal
     */ this.__v_isRef = true;
        // TODO isolatedDeclarations "__v_isReadonly"
        // A computed is also a subscriber that tracks other deps
        /**
     * @internal
     */ this.deps = void 0;
        /**
     * @internal
     */ this.depsTail = void 0;
        /**
     * @internal
     */ this.flags = 16;
        /**
     * @internal
     */ this.globalVersion = globalVersion - 1;
        /**
     * @internal
     */ this.next = void 0;
        // for backwards compat
        this.effect = this;
        this["__v_isReadonly"] = !setter;
        this.isSSR = isSSR;
    }
    /**
   * @internal
   */ notify() {
        this.flags |= 16;
        if (!(this.flags & 8) && // avoid infinite self recursion
        activeSub !== this) {
            batch(this, true);
            return true;
        }
    }
    get value() {
        const link = this.dep.track({
            target: this,
            type: "get",
            key: "value"
        });
        refreshComputed(this);
        if (link) link.version = this.dep.version;
        return this._value;
    }
    set value(newValue) {
        if (this.setter) this.setter(newValue);
        else warn("Write operation failed: computed value is readonly");
    }
}
function computed(getterOrOptions, debugOptions, isSSR = false) {
    let getter;
    let setter;
    if ((0, _shared.isFunction)(getterOrOptions)) getter = getterOrOptions;
    else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
    }
    const cRef = new ComputedRefImpl(getter, setter, isSSR);
    if (debugOptions && !isSSR) {
        cRef.onTrack = debugOptions.onTrack;
        cRef.onTrigger = debugOptions.onTrigger;
    }
    return cRef;
}
const TrackOpTypes = {
    "GET": "get",
    "HAS": "has",
    "ITERATE": "iterate"
};
const TriggerOpTypes = {
    "SET": "set",
    "ADD": "add",
    "DELETE": "delete",
    "CLEAR": "clear"
};
const ReactiveFlags = {
    "SKIP": "__v_skip",
    "IS_REACTIVE": "__v_isReactive",
    "IS_READONLY": "__v_isReadonly",
    "IS_SHALLOW": "__v_isShallow",
    "RAW": "__v_raw",
    "IS_REF": "__v_isRef"
};
const WatchErrorCodes = {
    "WATCH_GETTER": 2,
    "2": "WATCH_GETTER",
    "WATCH_CALLBACK": 3,
    "3": "WATCH_CALLBACK",
    "WATCH_CLEANUP": 4,
    "4": "WATCH_CLEANUP"
};
const INITIAL_WATCHER_VALUE = {};
const cleanupMap = /* @__PURE__ */ new WeakMap();
let activeWatcher = void 0;
function getCurrentWatcher() {
    return activeWatcher;
}
function onWatcherCleanup(cleanupFn, failSilently = false, owner = activeWatcher) {
    if (owner) {
        let cleanups = cleanupMap.get(owner);
        if (!cleanups) cleanupMap.set(owner, cleanups = []);
        cleanups.push(cleanupFn);
    } else if (!failSilently) warn(`onWatcherCleanup() was called when there was no active watcher to associate with.`);
}
function watch(source, cb, options = (0, _shared.EMPTY_OBJ)) {
    const { immediate , deep , once , scheduler , augmentJob , call  } = options;
    const warnInvalidSource = (s)=>{
        (options.onWarn || warn)(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
    };
    const reactiveGetter = (source2)=>{
        if (deep) return source2;
        if (isShallow(source2) || deep === false || deep === 0) return traverse(source2, 1);
        return traverse(source2);
    };
    let effect;
    let getter;
    let cleanup;
    let boundCleanup;
    let forceTrigger = false;
    let isMultiSource = false;
    if (isRef(source)) {
        getter = ()=>source.value;
        forceTrigger = isShallow(source);
    } else if (isReactive(source)) {
        getter = ()=>reactiveGetter(source);
        forceTrigger = true;
    } else if ((0, _shared.isArray)(source)) {
        isMultiSource = true;
        forceTrigger = source.some((s)=>isReactive(s) || isShallow(s));
        getter = ()=>source.map((s)=>{
                if (isRef(s)) return s.value;
                else if (isReactive(s)) return reactiveGetter(s);
                else if ((0, _shared.isFunction)(s)) return call ? call(s, 2) : s();
                else warnInvalidSource(s);
            });
    } else if ((0, _shared.isFunction)(source)) {
        if (cb) getter = call ? ()=>call(source, 2) : source;
        else getter = ()=>{
            if (cleanup) {
                pauseTracking();
                try {
                    cleanup();
                } finally{
                    resetTracking();
                }
            }
            const currentEffect = activeWatcher;
            activeWatcher = effect;
            try {
                return call ? call(source, 3, [
                    boundCleanup
                ]) : source(boundCleanup);
            } finally{
                activeWatcher = currentEffect;
            }
        };
    } else {
        getter = (0, _shared.NOOP);
        warnInvalidSource(source);
    }
    if (cb && deep) {
        const baseGetter = getter;
        const depth = deep === true ? Infinity : deep;
        getter = ()=>traverse(baseGetter(), depth);
    }
    const scope = getCurrentScope();
    const watchHandle = ()=>{
        effect.stop();
        if (scope && scope.active) (0, _shared.remove)(scope.effects, effect);
    };
    if (once && cb) {
        const _cb = cb;
        cb = (...args)=>{
            _cb(...args);
            watchHandle();
        };
    }
    let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
    const job = (immediateFirstRun)=>{
        if (!(effect.flags & 1) || !effect.dirty && !immediateFirstRun) return;
        if (cb) {
            const newValue = effect.run();
            if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i)=>(0, _shared.hasChanged)(v, oldValue[i])) : (0, _shared.hasChanged)(newValue, oldValue))) {
                if (cleanup) cleanup();
                const currentWatcher = activeWatcher;
                activeWatcher = effect;
                try {
                    const args = [
                        newValue,
                        // pass undefined as the old value when it's changed for the first time
                        oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
                        boundCleanup
                    ];
                    oldValue = newValue;
                    call ? call(cb, 3, args) : // @ts-expect-error
                    cb(...args);
                } finally{
                    activeWatcher = currentWatcher;
                }
            }
        } else effect.run();
    };
    if (augmentJob) augmentJob(job);
    effect = new ReactiveEffect(getter);
    effect.scheduler = scheduler ? ()=>scheduler(job, false) : job;
    boundCleanup = (fn)=>onWatcherCleanup(fn, false, effect);
    cleanup = effect.onStop = ()=>{
        const cleanups = cleanupMap.get(effect);
        if (cleanups) {
            if (call) call(cleanups, 4);
            else for (const cleanup2 of cleanups)cleanup2();
            cleanupMap.delete(effect);
        }
    };
    effect.onTrack = options.onTrack;
    effect.onTrigger = options.onTrigger;
    if (cb) {
        if (immediate) job(true);
        else oldValue = effect.run();
    } else if (scheduler) scheduler(job.bind(null, true), true);
    else effect.run();
    watchHandle.pause = effect.pause.bind(effect);
    watchHandle.resume = effect.resume.bind(effect);
    watchHandle.stop = watchHandle;
    return watchHandle;
}
function traverse(value, depth = Infinity, seen) {
    if (depth <= 0 || !(0, _shared.isObject)(value) || value["__v_skip"]) return value;
    seen = seen || /* @__PURE__ */ new Set();
    if (seen.has(value)) return value;
    seen.add(value);
    depth--;
    if (isRef(value)) traverse(value.value, depth, seen);
    else if ((0, _shared.isArray)(value)) for(let i = 0; i < value.length; i++)traverse(value[i], depth, seen);
    else if ((0, _shared.isSet)(value) || (0, _shared.isMap)(value)) value.forEach((v)=>{
        traverse(v, depth, seen);
    });
    else if ((0, _shared.isPlainObject)(value)) {
        for(const key in value)traverse(value[key], depth, seen);
        for (const key of Object.getOwnPropertySymbols(value))if (Object.prototype.propertyIsEnumerable.call(value, key)) traverse(value[key], depth, seen);
    }
    return value;
}

},{"@vue/shared":"dLq0X","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"dLq0X":[function(require,module,exports) {
/**
* @vue/shared v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ /*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "PatchFlags", ()=>PatchFlags);
parcelHelpers.export(exports, "ShapeFlags", ()=>ShapeFlags);
parcelHelpers.export(exports, "SlotFlags", ()=>SlotFlags);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "cssVarNameEscapeSymbolsRE", ()=>cssVarNameEscapeSymbolsRE);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "genCacheKey", ()=>genCacheKey);
parcelHelpers.export(exports, "genPropsAccessExp", ()=>genPropsAccessExp);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getEscapedCssVarName", ()=>getEscapedCssVarName);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isBuiltInDirective", ()=>isBuiltInDirective);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyAllowed", ()=>isGloballyAllowed);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownMathMLAttr", ()=>isKnownMathMLAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isMathMLTag", ()=>isMathMLTag);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
parcelHelpers.export(exports, "isRenderableAttrValue", ()=>isRenderableAttrValue);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "looseToNumber", ()=>looseToNumber);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
function makeMap(str) {
    const map = /* @__PURE__ */ Object.create(null);
    for (const key of str.split(","))map[key] = 1;
    return (val)=>val in map;
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
const NO = ()=>false;
const isOn = (key)=>key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
    (key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>toTypeString(val) === "[object Date]";
const isRegExp = (val)=>toTypeString(val) === "[object RegExp]";
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction = (fn)=>{
    const cache = /* @__PURE__ */ Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str)=>{
    return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str)=>{
    const s = str ? `on${capitalize(str)}` : ``;
    return s;
});
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](...arg);
};
const def = (obj, key, value, writable = false)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        writable,
        value
    });
};
const looseToNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
const toNumber = (val)=>{
    const n = isString(val) ? Number(val) : NaN;
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
    return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}
function genCacheKey(source, options) {
    return source + JSON.stringify(options, (_, val)=>typeof val === "function" ? val.toString() : val);
}
const PatchFlags = {
    "TEXT": 1,
    "1": "TEXT",
    "CLASS": 2,
    "2": "CLASS",
    "STYLE": 4,
    "4": "STYLE",
    "PROPS": 8,
    "8": "PROPS",
    "FULL_PROPS": 16,
    "16": "FULL_PROPS",
    "NEED_HYDRATION": 32,
    "32": "NEED_HYDRATION",
    "STABLE_FRAGMENT": 64,
    "64": "STABLE_FRAGMENT",
    "KEYED_FRAGMENT": 128,
    "128": "KEYED_FRAGMENT",
    "UNKEYED_FRAGMENT": 256,
    "256": "UNKEYED_FRAGMENT",
    "NEED_PATCH": 512,
    "512": "NEED_PATCH",
    "DYNAMIC_SLOTS": 1024,
    "1024": "DYNAMIC_SLOTS",
    "DEV_ROOT_FRAGMENT": 2048,
    "2048": "DEV_ROOT_FRAGMENT",
    "CACHED": -1,
    "-1": "CACHED",
    "BAIL": -2,
    "-2": "BAIL"
};
const PatchFlagNames = {
    [1]: `TEXT`,
    [2]: `CLASS`,
    [4]: `STYLE`,
    [8]: `PROPS`,
    [16]: `FULL_PROPS`,
    [32]: `NEED_HYDRATION`,
    [64]: `STABLE_FRAGMENT`,
    [128]: `KEYED_FRAGMENT`,
    [256]: `UNKEYED_FRAGMENT`,
    [512]: `NEED_PATCH`,
    [1024]: `DYNAMIC_SLOTS`,
    [2048]: `DEV_ROOT_FRAGMENT`,
    [-1]: `HOISTED`,
    [-2]: `BAIL`
};
const ShapeFlags = {
    "ELEMENT": 1,
    "1": "ELEMENT",
    "FUNCTIONAL_COMPONENT": 2,
    "2": "FUNCTIONAL_COMPONENT",
    "STATEFUL_COMPONENT": 4,
    "4": "STATEFUL_COMPONENT",
    "TEXT_CHILDREN": 8,
    "8": "TEXT_CHILDREN",
    "ARRAY_CHILDREN": 16,
    "16": "ARRAY_CHILDREN",
    "SLOTS_CHILDREN": 32,
    "32": "SLOTS_CHILDREN",
    "TELEPORT": 64,
    "64": "TELEPORT",
    "SUSPENSE": 128,
    "128": "SUSPENSE",
    "COMPONENT_SHOULD_KEEP_ALIVE": 256,
    "256": "COMPONENT_SHOULD_KEEP_ALIVE",
    "COMPONENT_KEPT_ALIVE": 512,
    "512": "COMPONENT_KEPT_ALIVE",
    "COMPONENT": 6,
    "6": "COMPONENT"
};
const SlotFlags = {
    "STABLE": 1,
    "1": "STABLE",
    "DYNAMIC": 2,
    "2": "DYNAMIC",
    "FORWARDED": 3,
    "3": "FORWARDED"
};
const slotFlagsText = {
    [1]: "STABLE",
    [2]: "DYNAMIC",
    [3]: "FORWARDED"
};
const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
const isGloballyWhitelisted = isGloballyAllowed;
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    start = Math.max(0, Math.min(start, source.length));
    end = Math.max(0, Math.min(end, source.length));
    if (start > end) return "";
    let lines = source.split(/(\r?\n)/);
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value) || isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    if (!styles) return "";
    if (isString(styles)) return styles;
    let ret = "";
    for(const key in styles){
        const value = styles[key];
        if (isString(value) || typeof value === "number") {
            const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
            ret += `${normalizedKey}:${value};`;
        }
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
const isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
const isKnownHtmlAttr = /* @__PURE__ */ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
const isKnownSvgAttr = /* @__PURE__ */ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
const isKnownMathMLAttr = /* @__PURE__ */ makeMap(`accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns`);
function isRenderableAttrValue(value) {
    if (value == null) return false;
    const type = typeof value;
    return type === "string" || type === "number" || type === "boolean";
}
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.slice(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
const cssVarNameEscapeSymbolsRE = /[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;
function getEscapedCssVarName(key, doubleEscape) {
    return key.replace(cssVarNameEscapeSymbolsRE, (s)=>doubleEscape ? s === '"' ? '\\\\\\"' : `\\\\${s}` : `\\${s}`);
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) return a === b;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
const isRef = (val)=>{
    return !!(val && val["__v_isRef"] === true);
};
const toDisplayString = (val)=>{
    return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val)=>{
    if (isRef(val)) return replacer(_key, val.value);
    else if (isMap(val)) return {
        [`Map(${val.size})`]: [
            ...val.entries()
        ].reduce((entries, [key, val2], i)=>{
            entries[stringifySymbol(key, i) + " =>"] = val2;
            return entries;
        }, {})
    };
    else if (isSet(val)) return {
        [`Set(${val.size})`]: [
            ...val.values()
        ].map((v)=>stringifySymbol(v))
    };
    else if (isSymbol(val)) return stringifySymbol(val);
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) return String(val);
    return val;
};
const stringifySymbol = (v, i = "")=>{
    var _a;
    return(// Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"boKlo":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"g6heP":[function(require,module,exports) {
/**
* @vue/shared v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ /*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "PatchFlags", ()=>PatchFlags);
parcelHelpers.export(exports, "ShapeFlags", ()=>ShapeFlags);
parcelHelpers.export(exports, "SlotFlags", ()=>SlotFlags);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "cssVarNameEscapeSymbolsRE", ()=>cssVarNameEscapeSymbolsRE);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "genCacheKey", ()=>genCacheKey);
parcelHelpers.export(exports, "genPropsAccessExp", ()=>genPropsAccessExp);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getEscapedCssVarName", ()=>getEscapedCssVarName);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isBuiltInDirective", ()=>isBuiltInDirective);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyAllowed", ()=>isGloballyAllowed);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownMathMLAttr", ()=>isKnownMathMLAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isMathMLTag", ()=>isMathMLTag);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
parcelHelpers.export(exports, "isRenderableAttrValue", ()=>isRenderableAttrValue);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "looseToNumber", ()=>looseToNumber);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
function makeMap(str) {
    const map = /* @__PURE__ */ Object.create(null);
    for (const key of str.split(","))map[key] = 1;
    return (val)=>val in map;
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
const NO = ()=>false;
const isOn = (key)=>key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
    (key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>toTypeString(val) === "[object Date]";
const isRegExp = (val)=>toTypeString(val) === "[object RegExp]";
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction = (fn)=>{
    const cache = /* @__PURE__ */ Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str)=>{
    return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str)=>{
    const s = str ? `on${capitalize(str)}` : ``;
    return s;
});
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](...arg);
};
const def = (obj, key, value, writable = false)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        writable,
        value
    });
};
const looseToNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
const toNumber = (val)=>{
    const n = isString(val) ? Number(val) : NaN;
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
    return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}
function genCacheKey(source, options) {
    return source + JSON.stringify(options, (_, val)=>typeof val === "function" ? val.toString() : val);
}
const PatchFlags = {
    "TEXT": 1,
    "1": "TEXT",
    "CLASS": 2,
    "2": "CLASS",
    "STYLE": 4,
    "4": "STYLE",
    "PROPS": 8,
    "8": "PROPS",
    "FULL_PROPS": 16,
    "16": "FULL_PROPS",
    "NEED_HYDRATION": 32,
    "32": "NEED_HYDRATION",
    "STABLE_FRAGMENT": 64,
    "64": "STABLE_FRAGMENT",
    "KEYED_FRAGMENT": 128,
    "128": "KEYED_FRAGMENT",
    "UNKEYED_FRAGMENT": 256,
    "256": "UNKEYED_FRAGMENT",
    "NEED_PATCH": 512,
    "512": "NEED_PATCH",
    "DYNAMIC_SLOTS": 1024,
    "1024": "DYNAMIC_SLOTS",
    "DEV_ROOT_FRAGMENT": 2048,
    "2048": "DEV_ROOT_FRAGMENT",
    "CACHED": -1,
    "-1": "CACHED",
    "BAIL": -2,
    "-2": "BAIL"
};
const PatchFlagNames = {
    [1]: `TEXT`,
    [2]: `CLASS`,
    [4]: `STYLE`,
    [8]: `PROPS`,
    [16]: `FULL_PROPS`,
    [32]: `NEED_HYDRATION`,
    [64]: `STABLE_FRAGMENT`,
    [128]: `KEYED_FRAGMENT`,
    [256]: `UNKEYED_FRAGMENT`,
    [512]: `NEED_PATCH`,
    [1024]: `DYNAMIC_SLOTS`,
    [2048]: `DEV_ROOT_FRAGMENT`,
    [-1]: `HOISTED`,
    [-2]: `BAIL`
};
const ShapeFlags = {
    "ELEMENT": 1,
    "1": "ELEMENT",
    "FUNCTIONAL_COMPONENT": 2,
    "2": "FUNCTIONAL_COMPONENT",
    "STATEFUL_COMPONENT": 4,
    "4": "STATEFUL_COMPONENT",
    "TEXT_CHILDREN": 8,
    "8": "TEXT_CHILDREN",
    "ARRAY_CHILDREN": 16,
    "16": "ARRAY_CHILDREN",
    "SLOTS_CHILDREN": 32,
    "32": "SLOTS_CHILDREN",
    "TELEPORT": 64,
    "64": "TELEPORT",
    "SUSPENSE": 128,
    "128": "SUSPENSE",
    "COMPONENT_SHOULD_KEEP_ALIVE": 256,
    "256": "COMPONENT_SHOULD_KEEP_ALIVE",
    "COMPONENT_KEPT_ALIVE": 512,
    "512": "COMPONENT_KEPT_ALIVE",
    "COMPONENT": 6,
    "6": "COMPONENT"
};
const SlotFlags = {
    "STABLE": 1,
    "1": "STABLE",
    "DYNAMIC": 2,
    "2": "DYNAMIC",
    "FORWARDED": 3,
    "3": "FORWARDED"
};
const slotFlagsText = {
    [1]: "STABLE",
    [2]: "DYNAMIC",
    [3]: "FORWARDED"
};
const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
const isGloballyWhitelisted = isGloballyAllowed;
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    start = Math.max(0, Math.min(start, source.length));
    end = Math.max(0, Math.min(end, source.length));
    if (start > end) return "";
    let lines = source.split(/(\r?\n)/);
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value) || isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    if (!styles) return "";
    if (isString(styles)) return styles;
    let ret = "";
    for(const key in styles){
        const value = styles[key];
        if (isString(value) || typeof value === "number") {
            const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
            ret += `${normalizedKey}:${value};`;
        }
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
const isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
const isKnownHtmlAttr = /* @__PURE__ */ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
const isKnownSvgAttr = /* @__PURE__ */ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
const isKnownMathMLAttr = /* @__PURE__ */ makeMap(`accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns`);
function isRenderableAttrValue(value) {
    if (value == null) return false;
    const type = typeof value;
    return type === "string" || type === "number" || type === "boolean";
}
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.slice(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
const cssVarNameEscapeSymbolsRE = /[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;
function getEscapedCssVarName(key, doubleEscape) {
    return key.replace(cssVarNameEscapeSymbolsRE, (s)=>doubleEscape ? s === '"' ? '\\\\\\"' : `\\\\${s}` : `\\${s}`);
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) return a === b;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
const isRef = (val)=>{
    return !!(val && val["__v_isRef"] === true);
};
const toDisplayString = (val)=>{
    return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val)=>{
    if (isRef(val)) return replacer(_key, val.value);
    else if (isMap(val)) return {
        [`Map(${val.size})`]: [
            ...val.entries()
        ].reduce((entries, [key, val2], i)=>{
            entries[stringifySymbol(key, i) + " =>"] = val2;
            return entries;
        }, {})
    };
    else if (isSet(val)) return {
        [`Set(${val.size})`]: [
            ...val.values()
        ].map((v)=>stringifySymbol(v))
    };
    else if (isSymbol(val)) return stringifySymbol(val);
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) return String(val);
    return val;
};
const stringifySymbol = (v, i = "")=>{
    var _a;
    return(// Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"din1v":[function(require,module,exports) {
/**
* @vue/shared v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/ /*! #__NO_SIDE_EFFECTS__ */ // @__NO_SIDE_EFFECTS__
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EMPTY_ARR", ()=>EMPTY_ARR);
parcelHelpers.export(exports, "EMPTY_OBJ", ()=>EMPTY_OBJ);
parcelHelpers.export(exports, "NO", ()=>NO);
parcelHelpers.export(exports, "NOOP", ()=>NOOP);
parcelHelpers.export(exports, "PatchFlagNames", ()=>PatchFlagNames);
parcelHelpers.export(exports, "PatchFlags", ()=>PatchFlags);
parcelHelpers.export(exports, "ShapeFlags", ()=>ShapeFlags);
parcelHelpers.export(exports, "SlotFlags", ()=>SlotFlags);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "cssVarNameEscapeSymbolsRE", ()=>cssVarNameEscapeSymbolsRE);
parcelHelpers.export(exports, "def", ()=>def);
parcelHelpers.export(exports, "escapeHtml", ()=>escapeHtml);
parcelHelpers.export(exports, "escapeHtmlComment", ()=>escapeHtmlComment);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "genCacheKey", ()=>genCacheKey);
parcelHelpers.export(exports, "genPropsAccessExp", ()=>genPropsAccessExp);
parcelHelpers.export(exports, "generateCodeFrame", ()=>generateCodeFrame);
parcelHelpers.export(exports, "getEscapedCssVarName", ()=>getEscapedCssVarName);
parcelHelpers.export(exports, "getGlobalThis", ()=>getGlobalThis);
parcelHelpers.export(exports, "hasChanged", ()=>hasChanged);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "includeBooleanAttr", ()=>includeBooleanAttr);
parcelHelpers.export(exports, "invokeArrayFns", ()=>invokeArrayFns);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "isBooleanAttr", ()=>isBooleanAttr);
parcelHelpers.export(exports, "isBuiltInDirective", ()=>isBuiltInDirective);
parcelHelpers.export(exports, "isDate", ()=>isDate);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
parcelHelpers.export(exports, "isGloballyAllowed", ()=>isGloballyAllowed);
parcelHelpers.export(exports, "isGloballyWhitelisted", ()=>isGloballyWhitelisted);
parcelHelpers.export(exports, "isHTMLTag", ()=>isHTMLTag);
parcelHelpers.export(exports, "isIntegerKey", ()=>isIntegerKey);
parcelHelpers.export(exports, "isKnownHtmlAttr", ()=>isKnownHtmlAttr);
parcelHelpers.export(exports, "isKnownMathMLAttr", ()=>isKnownMathMLAttr);
parcelHelpers.export(exports, "isKnownSvgAttr", ()=>isKnownSvgAttr);
parcelHelpers.export(exports, "isMap", ()=>isMap);
parcelHelpers.export(exports, "isMathMLTag", ()=>isMathMLTag);
parcelHelpers.export(exports, "isModelListener", ()=>isModelListener);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isOn", ()=>isOn);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
parcelHelpers.export(exports, "isRegExp", ()=>isRegExp);
parcelHelpers.export(exports, "isRenderableAttrValue", ()=>isRenderableAttrValue);
parcelHelpers.export(exports, "isReservedProp", ()=>isReservedProp);
parcelHelpers.export(exports, "isSSRSafeAttrName", ()=>isSSRSafeAttrName);
parcelHelpers.export(exports, "isSVGTag", ()=>isSVGTag);
parcelHelpers.export(exports, "isSet", ()=>isSet);
parcelHelpers.export(exports, "isSpecialBooleanAttr", ()=>isSpecialBooleanAttr);
parcelHelpers.export(exports, "isString", ()=>isString);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "isVoidTag", ()=>isVoidTag);
parcelHelpers.export(exports, "looseEqual", ()=>looseEqual);
parcelHelpers.export(exports, "looseIndexOf", ()=>looseIndexOf);
parcelHelpers.export(exports, "looseToNumber", ()=>looseToNumber);
parcelHelpers.export(exports, "makeMap", ()=>makeMap);
parcelHelpers.export(exports, "normalizeClass", ()=>normalizeClass);
parcelHelpers.export(exports, "normalizeProps", ()=>normalizeProps);
parcelHelpers.export(exports, "normalizeStyle", ()=>normalizeStyle);
parcelHelpers.export(exports, "objectToString", ()=>objectToString);
parcelHelpers.export(exports, "parseStringStyle", ()=>parseStringStyle);
parcelHelpers.export(exports, "propsToAttrMap", ()=>propsToAttrMap);
parcelHelpers.export(exports, "remove", ()=>remove);
parcelHelpers.export(exports, "slotFlagsText", ()=>slotFlagsText);
parcelHelpers.export(exports, "stringifyStyle", ()=>stringifyStyle);
parcelHelpers.export(exports, "toDisplayString", ()=>toDisplayString);
parcelHelpers.export(exports, "toHandlerKey", ()=>toHandlerKey);
parcelHelpers.export(exports, "toNumber", ()=>toNumber);
parcelHelpers.export(exports, "toRawType", ()=>toRawType);
parcelHelpers.export(exports, "toTypeString", ()=>toTypeString);
var global = arguments[3];
function makeMap(str) {
    const map = /* @__PURE__ */ Object.create(null);
    for (const key of str.split(","))map[key] = 1;
    return (val)=>val in map;
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = ()=>{};
const NO = ()=>false;
const isOn = (key)=>key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
    (key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key)=>key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el)=>{
    const i = arr.indexOf(el);
    if (i > -1) arr.splice(i, 1);
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key)=>hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val)=>toTypeString(val) === "[object Map]";
const isSet = (val)=>toTypeString(val) === "[object Set]";
const isDate = (val)=>toTypeString(val) === "[object Date]";
const isRegExp = (val)=>toTypeString(val) === "[object RegExp]";
const isFunction = (val)=>typeof val === "function";
const isString = (val)=>typeof val === "string";
const isSymbol = (val)=>typeof val === "symbol";
const isObject = (val)=>val !== null && typeof val === "object";
const isPromise = (val)=>{
    return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value)=>objectToString.call(value);
const toRawType = (value)=>{
    return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val)=>toTypeString(val) === "[object Object]";
const isIntegerKey = (key)=>isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(// the leading comma is intentional so empty string "" is also included
",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
const cacheStringFunction = (fn)=>{
    const cache = /* @__PURE__ */ Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str)=>{
    return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str)=>{
    const s = str ? `on${capitalize(str)}` : ``;
    return s;
});
const hasChanged = (value, oldValue)=>!Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg)=>{
    for(let i = 0; i < fns.length; i++)fns[i](...arg);
};
const def = (obj, key, value, writable = false)=>{
    Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        writable,
        value
    });
};
const looseToNumber = (val)=>{
    const n = parseFloat(val);
    return isNaN(n) ? val : n;
};
const toNumber = (val)=>{
    const n = isString(val) ? Number(val) : NaN;
    return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = ()=>{
    return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
    return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}
function genCacheKey(source, options) {
    return source + JSON.stringify(options, (_, val)=>typeof val === "function" ? val.toString() : val);
}
const PatchFlags = {
    "TEXT": 1,
    "1": "TEXT",
    "CLASS": 2,
    "2": "CLASS",
    "STYLE": 4,
    "4": "STYLE",
    "PROPS": 8,
    "8": "PROPS",
    "FULL_PROPS": 16,
    "16": "FULL_PROPS",
    "NEED_HYDRATION": 32,
    "32": "NEED_HYDRATION",
    "STABLE_FRAGMENT": 64,
    "64": "STABLE_FRAGMENT",
    "KEYED_FRAGMENT": 128,
    "128": "KEYED_FRAGMENT",
    "UNKEYED_FRAGMENT": 256,
    "256": "UNKEYED_FRAGMENT",
    "NEED_PATCH": 512,
    "512": "NEED_PATCH",
    "DYNAMIC_SLOTS": 1024,
    "1024": "DYNAMIC_SLOTS",
    "DEV_ROOT_FRAGMENT": 2048,
    "2048": "DEV_ROOT_FRAGMENT",
    "CACHED": -1,
    "-1": "CACHED",
    "BAIL": -2,
    "-2": "BAIL"
};
const PatchFlagNames = {
    [1]: `TEXT`,
    [2]: `CLASS`,
    [4]: `STYLE`,
    [8]: `PROPS`,
    [16]: `FULL_PROPS`,
    [32]: `NEED_HYDRATION`,
    [64]: `STABLE_FRAGMENT`,
    [128]: `KEYED_FRAGMENT`,
    [256]: `UNKEYED_FRAGMENT`,
    [512]: `NEED_PATCH`,
    [1024]: `DYNAMIC_SLOTS`,
    [2048]: `DEV_ROOT_FRAGMENT`,
    [-1]: `HOISTED`,
    [-2]: `BAIL`
};
const ShapeFlags = {
    "ELEMENT": 1,
    "1": "ELEMENT",
    "FUNCTIONAL_COMPONENT": 2,
    "2": "FUNCTIONAL_COMPONENT",
    "STATEFUL_COMPONENT": 4,
    "4": "STATEFUL_COMPONENT",
    "TEXT_CHILDREN": 8,
    "8": "TEXT_CHILDREN",
    "ARRAY_CHILDREN": 16,
    "16": "ARRAY_CHILDREN",
    "SLOTS_CHILDREN": 32,
    "32": "SLOTS_CHILDREN",
    "TELEPORT": 64,
    "64": "TELEPORT",
    "SUSPENSE": 128,
    "128": "SUSPENSE",
    "COMPONENT_SHOULD_KEEP_ALIVE": 256,
    "256": "COMPONENT_SHOULD_KEEP_ALIVE",
    "COMPONENT_KEPT_ALIVE": 512,
    "512": "COMPONENT_KEPT_ALIVE",
    "COMPONENT": 6,
    "6": "COMPONENT"
};
const SlotFlags = {
    "STABLE": 1,
    "1": "STABLE",
    "DYNAMIC": 2,
    "2": "DYNAMIC",
    "FORWARDED": 3,
    "3": "FORWARDED"
};
const slotFlagsText = {
    [1]: "STABLE",
    [2]: "DYNAMIC",
    [3]: "FORWARDED"
};
const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
const isGloballyWhitelisted = isGloballyAllowed;
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
    start = Math.max(0, Math.min(start, source.length));
    end = Math.max(0, Math.min(end, source.length));
    if (start > end) return "";
    let lines = source.split(/(\r?\n)/);
    const newlineSequences = lines.filter((_, idx)=>idx % 2 === 1);
    lines = lines.filter((_, idx)=>idx % 2 === 0);
    let count = 0;
    const res = [];
    for(let i = 0; i < lines.length; i++){
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
            for(let j = i - range; j <= i + range || end > count; j++){
                if (j < 0 || j >= lines.length) continue;
                const line = j + 1;
                res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
                const lineLength = lines[j].length;
                const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
                if (j === i) {
                    const pad = start - (count - (lineLength + newLineSeqLength));
                    const length = Math.max(1, end > count ? lineLength - pad : end - start);
                    res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
                } else if (j > i) {
                    if (end > count) {
                        const length = Math.max(Math.min(end - count, lineLength), 1);
                        res.push(`   |  ` + "^".repeat(length));
                    }
                    count += lineLength + newLineSeqLength;
                }
            }
            break;
        }
    }
    return res.join("\n");
}
function normalizeStyle(value) {
    if (isArray(value)) {
        const res = {};
        for(let i = 0; i < value.length; i++){
            const item = value[i];
            const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
            if (normalized) for(const key in normalized)res[key] = normalized[key];
        }
        return res;
    } else if (isString(value) || isObject(value)) return value;
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
    const ret = {};
    cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item)=>{
        if (item) {
            const tmp = item.split(propertyDelimiterRE);
            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
    });
    return ret;
}
function stringifyStyle(styles) {
    if (!styles) return "";
    if (isString(styles)) return styles;
    let ret = "";
    for(const key in styles){
        const value = styles[key];
        if (isString(value) || typeof value === "number") {
            const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
            ret += `${normalizedKey}:${value};`;
        }
    }
    return ret;
}
function normalizeClass(value) {
    let res = "";
    if (isString(value)) res = value;
    else if (isArray(value)) for(let i = 0; i < value.length; i++){
        const normalized = normalizeClass(value[i]);
        if (normalized) res += normalized + " ";
    }
    else if (isObject(value)) {
        for(const name in value)if (value[name]) res += name + " ";
    }
    return res.trim();
}
function normalizeProps(props) {
    if (!props) return null;
    let { class: klass , style  } = props;
    if (klass && !isString(klass)) props.class = normalizeClass(klass);
    if (style) props.style = normalizeStyle(style);
    return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
const isBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
function includeBooleanAttr(value) {
    return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
    if (attrValidationCache.hasOwnProperty(name)) return attrValidationCache[name];
    const isUnsafe = unsafeAttrCharRE.test(name);
    if (isUnsafe) console.error(`unsafe attribute name: ${name}`);
    return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
    acceptCharset: "accept-charset",
    className: "class",
    htmlFor: "for",
    httpEquiv: "http-equiv"
};
const isKnownHtmlAttr = /* @__PURE__ */ makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
const isKnownSvgAttr = /* @__PURE__ */ makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
const isKnownMathMLAttr = /* @__PURE__ */ makeMap(`accent,accentunder,actiontype,align,alignmentscope,altimg,altimg-height,altimg-valign,altimg-width,alttext,bevelled,close,columnsalign,columnlines,columnspan,denomalign,depth,dir,display,displaystyle,encoding,equalcolumns,equalrows,fence,fontstyle,fontweight,form,frame,framespacing,groupalign,height,href,id,indentalign,indentalignfirst,indentalignlast,indentshift,indentshiftfirst,indentshiftlast,indextype,justify,largetop,largeop,lquote,lspace,mathbackground,mathcolor,mathsize,mathvariant,maxsize,minlabelspacing,mode,other,overflow,position,rowalign,rowlines,rowspan,rquote,rspace,scriptlevel,scriptminsize,scriptsizemultiplier,selection,separator,separators,shift,side,src,stackalign,stretchy,subscriptshift,superscriptshift,symmetric,voffset,width,widths,xlink:href,xlink:show,xlink:type,xmlns`);
function isRenderableAttrValue(value) {
    if (value == null) return false;
    const type = typeof value;
    return type === "string" || type === "number" || type === "boolean";
}
const escapeRE = /["'&<>]/;
function escapeHtml(string) {
    const str = "" + string;
    const match = escapeRE.exec(str);
    if (!match) return str;
    let html = "";
    let escaped;
    let index;
    let lastIndex = 0;
    for(index = match.index; index < str.length; index++){
        switch(str.charCodeAt(index)){
            case 34:
                escaped = "&quot;";
                break;
            case 38:
                escaped = "&amp;";
                break;
            case 39:
                escaped = "&#39;";
                break;
            case 60:
                escaped = "&lt;";
                break;
            case 62:
                escaped = "&gt;";
                break;
            default:
                continue;
        }
        if (lastIndex !== index) html += str.slice(lastIndex, index);
        lastIndex = index + 1;
        html += escaped;
    }
    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
    return src.replace(commentStripRE, "");
}
const cssVarNameEscapeSymbolsRE = /[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;
function getEscapedCssVarName(key, doubleEscape) {
    return key.replace(cssVarNameEscapeSymbolsRE, (s)=>doubleEscape ? s === '"' ? '\\\\\\"' : `\\\\${s}` : `\\${s}`);
}
function looseCompareArrays(a, b) {
    if (a.length !== b.length) return false;
    let equal = true;
    for(let i = 0; equal && i < a.length; i++)equal = looseEqual(a[i], b[i]);
    return equal;
}
function looseEqual(a, b) {
    if (a === b) return true;
    let aValidType = isDate(a);
    let bValidType = isDate(b);
    if (aValidType || bValidType) return aValidType && bValidType ? a.getTime() === b.getTime() : false;
    aValidType = isSymbol(a);
    bValidType = isSymbol(b);
    if (aValidType || bValidType) return a === b;
    aValidType = isArray(a);
    bValidType = isArray(b);
    if (aValidType || bValidType) return aValidType && bValidType ? looseCompareArrays(a, b) : false;
    aValidType = isObject(a);
    bValidType = isObject(b);
    if (aValidType || bValidType) {
        if (!aValidType || !bValidType) return false;
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b).length;
        if (aKeysCount !== bKeysCount) return false;
        for(const key in a){
            const aHasKey = a.hasOwnProperty(key);
            const bHasKey = b.hasOwnProperty(key);
            if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) return false;
        }
    }
    return String(a) === String(b);
}
function looseIndexOf(arr, val) {
    return arr.findIndex((item)=>looseEqual(item, val));
}
const isRef = (val)=>{
    return !!(val && val["__v_isRef"] === true);
};
const toDisplayString = (val)=>{
    return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val)=>{
    if (isRef(val)) return replacer(_key, val.value);
    else if (isMap(val)) return {
        [`Map(${val.size})`]: [
            ...val.entries()
        ].reduce((entries, [key, val2], i)=>{
            entries[stringifySymbol(key, i) + " =>"] = val2;
            return entries;
        }, {})
    };
    else if (isSet(val)) return {
        [`Set(${val.size})`]: [
            ...val.values()
        ].map((v)=>stringifySymbol(v))
    };
    else if (isSymbol(val)) return stringifySymbol(val);
    else if (isObject(val) && !isArray(val) && !isPlainObject(val)) return String(val);
    return val;
};
const stringifySymbol = (v, i = "")=>{
    var _a;
    return(// Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"afUQj":[function(require,module,exports) {
/*!
 * pinia v2.3.1
 * (c) 2025 Eduardo San Martin Morote
 * @license MIT
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MutationType", ()=>MutationType);
parcelHelpers.export(exports, "PiniaVuePlugin", ()=>PiniaVuePlugin);
parcelHelpers.export(exports, "acceptHMRUpdate", ()=>acceptHMRUpdate);
parcelHelpers.export(exports, "createPinia", ()=>createPinia);
parcelHelpers.export(exports, "defineStore", ()=>defineStore);
parcelHelpers.export(exports, "disposePinia", ()=>disposePinia);
parcelHelpers.export(exports, "getActivePinia", ()=>getActivePinia);
parcelHelpers.export(exports, "mapActions", ()=>mapActions);
parcelHelpers.export(exports, "mapGetters", ()=>mapGetters);
parcelHelpers.export(exports, "mapState", ()=>mapState);
parcelHelpers.export(exports, "mapStores", ()=>mapStores);
parcelHelpers.export(exports, "mapWritableState", ()=>mapWritableState);
parcelHelpers.export(exports, "setActivePinia", ()=>setActivePinia);
parcelHelpers.export(exports, "setMapStoreSuffix", ()=>setMapStoreSuffix);
parcelHelpers.export(exports, "shouldHydrate", ()=>shouldHydrate);
parcelHelpers.export(exports, "skipHydrate", ()=>skipHydrate);
parcelHelpers.export(exports, "storeToRefs", ()=>storeToRefs);
var _vueDemi = require("vue-demi");
var _devtoolsApi = require("@vue/devtools-api");
var global = arguments[3];
/**
 * setActivePinia must be called to handle SSR at the top of functions like
 * `fetch`, `setup`, `serverPrefetch` and others
 */ let activePinia;
/**
 * Sets or unsets the active pinia. Used in SSR and internally when calling
 * actions and getters
 *
 * @param pinia - Pinia instance
 */ // @ts-expect-error: cannot constrain the type of the return
const setActivePinia = (pinia)=>activePinia = pinia;
/**
 * Get the currently active pinia if there is any.
 */ const getActivePinia = ()=>(0, _vueDemi.hasInjectionContext)() && (0, _vueDemi.inject)(piniaSymbol) || activePinia;
const piniaSymbol = Symbol("pinia");
function isPlainObject(// eslint-disable-next-line @typescript-eslint/no-explicit-any
o) {
    return o && typeof o === "object" && Object.prototype.toString.call(o) === "[object Object]" && typeof o.toJSON !== "function";
}
// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }
// TODO: can we change these to numbers?
/**
 * Possible types for SubscriptionCallback
 */ var MutationType;
(function(MutationType) {
    /**
     * Direct mutation of the state:
     *
     * - `store.name = 'new name'`
     * - `store.$state.name = 'new name'`
     * - `store.list.push('new item')`
     */ MutationType["direct"] = "direct";
    /**
     * Mutated the state with `$patch` and an object
     *
     * - `store.$patch({ name: 'newName' })`
     */ MutationType["patchObject"] = "patch object";
    /**
     * Mutated the state with `$patch` and a function
     *
     * - `store.$patch(state => state.name = 'newName')`
     */ MutationType["patchFunction"] = "patch function";
// maybe reset? for $state = {} and $reset
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
/*
 * FileSaver.js A saveAs() FileSaver implementation.
 *
 * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin
 * Morote.
 *
 * License : MIT
 */ // The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
const _global = /*#__PURE__*/ (()=>typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : {
        HTMLElement: null
    })();
function bom(blob, { autoBom =false  } = {}) {
    // prepend BOM for UTF-8 XML and text/* types (including HTML)
    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
    if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) return new Blob([
        String.fromCharCode(0xfeff),
        blob
    ], {
        type: blob.type
    });
    return blob;
}
function download(url, name, opts) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.responseType = "blob";
    xhr.onload = function() {
        saveAs(xhr.response, name, opts);
    };
    xhr.onerror = function() {
        console.error("could not download file");
    };
    xhr.send();
}
function corsEnabled(url) {
    const xhr = new XMLHttpRequest();
    // use sync to avoid popup blocker
    xhr.open("HEAD", url, false);
    try {
        xhr.send();
    } catch (e) {}
    return xhr.status >= 200 && xhr.status <= 299;
}
// `a.click()` doesn't work for all browsers (#465)
function click(node) {
    try {
        node.dispatchEvent(new MouseEvent("click"));
    } catch (e) {
        const evt = document.createEvent("MouseEvents");
        evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
        node.dispatchEvent(evt);
    }
}
const _navigator = typeof navigator === "object" ? navigator : {
    userAgent: ""
};
// Detect WebView inside a native macOS app by ruling out all browsers
// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
const isMacOSWebView = /*#__PURE__*/ (()=>/Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT ? ()=>{} // noop
 : typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : "msSaveOrOpenBlob" in _navigator ? msSaveAs : fileSaverSaveAs;
function downloadSaveAs(blob, name = "download", opts) {
    const a = document.createElement("a");
    a.download = name;
    a.rel = "noopener"; // tabnabbing
    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'
    if (typeof blob === "string") {
        // Support regular links
        a.href = blob;
        if (a.origin !== location.origin) {
            if (corsEnabled(a.href)) download(blob, name, opts);
            else {
                a.target = "_blank";
                click(a);
            }
        } else click(a);
    } else {
        // Support blobs
        a.href = URL.createObjectURL(blob);
        setTimeout(function() {
            URL.revokeObjectURL(a.href);
        }, 4e4); // 40s
        setTimeout(function() {
            click(a);
        }, 0);
    }
}
function msSaveAs(blob, name = "download", opts) {
    if (typeof blob === "string") {
        if (corsEnabled(blob)) download(blob, name, opts);
        else {
            const a = document.createElement("a");
            a.href = blob;
            a.target = "_blank";
            setTimeout(function() {
                click(a);
            });
        }
    } else // @ts-ignore: works on windows
    navigator.msSaveOrOpenBlob(bom(blob, opts), name);
}
function fileSaverSaveAs(blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open("", "_blank");
    if (popup) popup.document.title = popup.document.body.innerText = "downloading...";
    if (typeof blob === "string") return download(blob, name, opts);
    const force = blob.type === "application/octet-stream";
    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || "safari" in _global;
    const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== "undefined") {
        // Safari doesn't allow downloading of blob URLs
        const reader = new FileReader();
        reader.onloadend = function() {
            let url = reader.result;
            if (typeof url !== "string") {
                popup = null;
                throw new Error("Wrong reader.result type");
            }
            url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
            if (popup) popup.location.href = url;
            else location.assign(url);
            popup = null; // reverse-tabnabbing #460
        };
        reader.readAsDataURL(blob);
    } else {
        const url = URL.createObjectURL(blob);
        if (popup) popup.location.assign(url);
        else location.href = url;
        popup = null; // reverse-tabnabbing #460
        setTimeout(function() {
            URL.revokeObjectURL(url);
        }, 4e4); // 40s
    }
}
/**
 * Shows a toast or console.log
 *
 * @param message - message to log
 * @param type - different color of the tooltip
 */ function toastMessage(message, type) {
    const piniaMessage = "\uD83C\uDF4D " + message;
    if (typeof __VUE_DEVTOOLS_TOAST__ === "function") // No longer available :(
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
    else if (type === "error") console.error(piniaMessage);
    else if (type === "warn") console.warn(piniaMessage);
    else console.log(piniaMessage);
}
function isPinia(o) {
    return "_a" in o && "install" in o;
}
/**
 * This file contain devtools actions, they are not Pinia actions.
 */ // ---
function checkClipboardAccess() {
    if (!("clipboard" in navigator)) {
        toastMessage(`Your browser doesn't support the Clipboard API`, "error");
        return true;
    }
}
function checkNotFocusedError(error) {
    if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
        toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
        return true;
    }
    return false;
}
async function actionGlobalCopyState(pinia) {
    if (checkClipboardAccess()) return;
    try {
        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
        toastMessage("Global state copied to clipboard.");
    } catch (error) {
        if (checkNotFocusedError(error)) return;
        toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
        console.error(error);
    }
}
async function actionGlobalPasteState(pinia) {
    if (checkClipboardAccess()) return;
    try {
        loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));
        toastMessage("Global state pasted from clipboard.");
    } catch (error) {
        if (checkNotFocusedError(error)) return;
        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
        console.error(error);
    }
}
async function actionGlobalSaveState(pinia) {
    try {
        saveAs(new Blob([
            JSON.stringify(pinia.state.value)
        ], {
            type: "text/plain;charset=utf-8"
        }), "pinia-state.json");
    } catch (error) {
        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
        console.error(error);
    }
}
let fileInput;
function getFileOpener() {
    if (!fileInput) {
        fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
    }
    function openFile() {
        return new Promise((resolve, reject)=>{
            fileInput.onchange = async ()=>{
                const files = fileInput.files;
                if (!files) return resolve(null);
                const file = files.item(0);
                if (!file) return resolve(null);
                return resolve({
                    text: await file.text(),
                    file
                });
            };
            // @ts-ignore: TODO: changed from 4.3 to 4.4
            fileInput.oncancel = ()=>resolve(null);
            fileInput.onerror = reject;
            fileInput.click();
        });
    }
    return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
    try {
        const open1 = getFileOpener();
        const result = await open1();
        if (!result) return;
        const { text , file  } = result;
        loadStoresState(pinia, JSON.parse(text));
        toastMessage(`Global state imported from "${file.name}".`);
    } catch (error) {
        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, "error");
        console.error(error);
    }
}
function loadStoresState(pinia, state) {
    for(const key in state){
        const storeState = pinia.state.value[key];
        // store is already instantiated, patch it
        if (storeState) Object.assign(storeState, state[key]);
        else // store is not instantiated, set the initial state
        pinia.state.value[key] = state[key];
    }
}
function formatDisplay(display) {
    return {
        _custom: {
            display
        }
    };
}
const PINIA_ROOT_LABEL = "\uD83C\uDF4D Pinia (root)";
const PINIA_ROOT_ID = "_root";
function formatStoreForInspectorTree(store) {
    return isPinia(store) ? {
        id: PINIA_ROOT_ID,
        label: PINIA_ROOT_LABEL
    } : {
        id: store.$id,
        label: store.$id
    };
}
function formatStoreForInspectorState(store) {
    if (isPinia(store)) {
        const storeNames = Array.from(store._s.keys());
        const storeMap = store._s;
        const state = {
            state: storeNames.map((storeId)=>({
                    editable: true,
                    key: storeId,
                    value: store.state.value[storeId]
                })),
            getters: storeNames.filter((id)=>storeMap.get(id)._getters).map((id)=>{
                const store = storeMap.get(id);
                return {
                    editable: false,
                    key: id,
                    value: store._getters.reduce((getters, key)=>{
                        getters[key] = store[key];
                        return getters;
                    }, {})
                };
            })
        };
        return state;
    }
    const state = {
        state: Object.keys(store.$state).map((key)=>({
                editable: true,
                key,
                value: store.$state[key]
            }))
    };
    // avoid adding empty getters
    if (store._getters && store._getters.length) state.getters = store._getters.map((getterName)=>({
            editable: false,
            key: getterName,
            value: store[getterName]
        }));
    if (store._customProperties.size) state.customProperties = Array.from(store._customProperties).map((key)=>({
            editable: true,
            key,
            value: store[key]
        }));
    return state;
}
function formatEventData(events) {
    if (!events) return {};
    if (Array.isArray(events)) // TODO: handle add and delete for arrays and objects
    return events.reduce((data, event)=>{
        data.keys.push(event.key);
        data.operations.push(event.type);
        data.oldValue[event.key] = event.oldValue;
        data.newValue[event.key] = event.newValue;
        return data;
    }, {
        oldValue: {},
        keys: [],
        operations: [],
        newValue: {}
    });
    else return {
        operation: formatDisplay(events.type),
        key: formatDisplay(events.key),
        oldValue: events.oldValue,
        newValue: events.newValue
    };
}
function formatMutationType(type) {
    switch(type){
        case MutationType.direct:
            return "mutation";
        case MutationType.patchFunction:
            return "$patch";
        case MutationType.patchObject:
            return "$patch";
        default:
            return "unknown";
    }
}
// timeline can be paused when directly changing the state
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = "pinia:mutations";
const INSPECTOR_ID = "pinia";
const { assign: assign$1  } = Object;
/**
 * Gets the displayed name of a store in devtools
 *
 * @param id - id of the store
 * @returns a formatted string
 */ const getStoreType = (id)=>"\uD83C\uDF4D " + id;
/**
 * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab
 * as soon as it is added to the application.
 *
 * @param app - Vue application
 * @param pinia - pinia instance
 */ function registerPiniaDevtools(app, pinia) {
    (0, _devtoolsApi.setupDevtoolsPlugin)({
        id: "dev.esm.pinia",
        label: "Pinia \uD83C\uDF4D",
        logo: "https://pinia.vuejs.org/logo.svg",
        packageName: "pinia",
        homepage: "https://pinia.vuejs.org",
        componentStateTypes,
        app
    }, (api)=>{
        if (typeof api.now !== "function") toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
        api.addTimelineLayer({
            id: MUTATIONS_LAYER_ID,
            label: `Pinia \ud83c`,
            color: 0xe5df88
        });
        api.addInspector({
            id: INSPECTOR_ID,
            label: "Pinia \uD83C\uDF4D",
            icon: "storage",
            treeFilterPlaceholder: "Search stores",
            actions: [
                {
                    icon: "content_copy",
                    action: ()=>{
                        actionGlobalCopyState(pinia);
                    },
                    tooltip: "Serialize and copy the state"
                },
                {
                    icon: "content_paste",
                    action: async ()=>{
                        await actionGlobalPasteState(pinia);
                        api.sendInspectorTree(INSPECTOR_ID);
                        api.sendInspectorState(INSPECTOR_ID);
                    },
                    tooltip: "Replace the state with the content of your clipboard"
                },
                {
                    icon: "save",
                    action: ()=>{
                        actionGlobalSaveState(pinia);
                    },
                    tooltip: "Save the state as a JSON file"
                },
                {
                    icon: "folder_open",
                    action: async ()=>{
                        await actionGlobalOpenStateFile(pinia);
                        api.sendInspectorTree(INSPECTOR_ID);
                        api.sendInspectorState(INSPECTOR_ID);
                    },
                    tooltip: "Import the state from a JSON file"
                }
            ],
            nodeActions: [
                {
                    icon: "restore",
                    tooltip: 'Reset the state (with "$reset")',
                    action: (nodeId)=>{
                        const store = pinia._s.get(nodeId);
                        if (!store) toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
                        else if (typeof store.$reset !== "function") toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
                        else {
                            store.$reset();
                            toastMessage(`Store "${nodeId}" reset.`);
                        }
                    }
                }
            ]
        });
        api.on.inspectComponent((payload, ctx)=>{
            const proxy = payload.componentInstance && payload.componentInstance.proxy;
            if (proxy && proxy._pStores) {
                const piniaStores = payload.componentInstance.proxy._pStores;
                Object.values(piniaStores).forEach((store)=>{
                    payload.instanceData.state.push({
                        type: getStoreType(store.$id),
                        key: "state",
                        editable: true,
                        value: store._isOptionsAPI ? {
                            _custom: {
                                value: (0, _vueDemi.toRaw)(store.$state),
                                actions: [
                                    {
                                        icon: "restore",
                                        tooltip: "Reset the state of this store",
                                        action: ()=>store.$reset()
                                    }
                                ]
                            }
                        } : Object.keys(store.$state).reduce((state, key)=>{
                            state[key] = store.$state[key];
                            return state;
                        }, {})
                    });
                    if (store._getters && store._getters.length) payload.instanceData.state.push({
                        type: getStoreType(store.$id),
                        key: "getters",
                        editable: false,
                        value: store._getters.reduce((getters, key)=>{
                            try {
                                getters[key] = store[key];
                            } catch (error) {
                                // @ts-expect-error: we just want to show it in devtools
                                getters[key] = error;
                            }
                            return getters;
                        }, {})
                    });
                });
            }
        });
        api.on.getInspectorTree((payload)=>{
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                let stores = [
                    pinia
                ];
                stores = stores.concat(Array.from(pinia._s.values()));
                payload.rootNodes = (payload.filter ? stores.filter((store)=>"$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
            }
        });
        // Expose pinia instance as $pinia to window
        globalThis.$pinia = pinia;
        api.on.getInspectorState((payload)=>{
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
                if (!inspectedStore) // this could be the selected store restored for a different project
                // so it's better not to say anything here
                return;
                if (inspectedStore) {
                    // Expose selected store as $store to window
                    if (payload.nodeId !== PINIA_ROOT_ID) globalThis.$store = (0, _vueDemi.toRaw)(inspectedStore);
                    payload.state = formatStoreForInspectorState(inspectedStore);
                }
            }
        });
        api.on.editInspectorState((payload, ctx)=>{
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
                if (!inspectedStore) return toastMessage(`store "${payload.nodeId}" not found`, "error");
                const { path  } = payload;
                if (!isPinia(inspectedStore)) // access only the state
                {
                    if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) path.unshift("$state");
                } else // Root access, we can omit the `.value` because the devtools API does it for us
                path.unshift("state");
                isTimelineActive = false;
                payload.set(inspectedStore, path, payload.state.value);
                isTimelineActive = true;
            }
        });
        api.on.editComponentState((payload)=>{
            if (payload.type.startsWith("\uD83C\uDF4D")) {
                const storeId = payload.type.replace(/^\ud83c\s*/, "");
                const store = pinia._s.get(storeId);
                if (!store) return toastMessage(`store "${storeId}" not found`, "error");
                const { path  } = payload;
                if (path[0] !== "state") return toastMessage(`Invalid path for store "${storeId}":\n${path}\nOnly state can be modified.`);
                // rewrite the first entry to be able to directly set the state as
                // well as any other path
                path[0] = "$state";
                isTimelineActive = false;
                payload.set(store, path, payload.state.value);
                isTimelineActive = true;
            }
        });
    });
}
function addStoreToDevtools(app, store) {
    if (!componentStateTypes.includes(getStoreType(store.$id))) componentStateTypes.push(getStoreType(store.$id));
    (0, _devtoolsApi.setupDevtoolsPlugin)({
        id: "dev.esm.pinia",
        label: "Pinia \uD83C\uDF4D",
        logo: "https://pinia.vuejs.org/logo.svg",
        packageName: "pinia",
        homepage: "https://pinia.vuejs.org",
        componentStateTypes,
        app,
        settings: {
            logStoreChanges: {
                label: "Notify about new/deleted stores",
                type: "boolean",
                defaultValue: true
            }
        }
    }, (api)=>{
        // gracefully handle errors
        const now = typeof api.now === "function" ? api.now.bind(api) : Date.now;
        store.$onAction(({ after , onError , name , args  })=>{
            const groupId = runningActionId++;
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: now(),
                    title: "\uD83D\uDEEB " + name,
                    subtitle: "start",
                    data: {
                        store: formatDisplay(store.$id),
                        action: formatDisplay(name),
                        args
                    },
                    groupId
                }
            });
            after((result)=>{
                activeAction = undefined;
                api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                        time: now(),
                        title: "\uD83D\uDEEC " + name,
                        subtitle: "end",
                        data: {
                            store: formatDisplay(store.$id),
                            action: formatDisplay(name),
                            args,
                            result
                        },
                        groupId
                    }
                });
            });
            onError((error)=>{
                activeAction = undefined;
                api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                        time: now(),
                        logType: "error",
                        title: "\uD83D\uDCA5 " + name,
                        subtitle: "end",
                        data: {
                            store: formatDisplay(store.$id),
                            action: formatDisplay(name),
                            args,
                            error
                        },
                        groupId
                    }
                });
            });
        }, true);
        store._customProperties.forEach((name)=>{
            (0, _vueDemi.watch)(()=>(0, _vueDemi.unref)(store[name]), (newValue, oldValue)=>{
                api.notifyComponentUpdate();
                api.sendInspectorState(INSPECTOR_ID);
                if (isTimelineActive) api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                        time: now(),
                        title: "Change",
                        subtitle: name,
                        data: {
                            newValue,
                            oldValue
                        },
                        groupId: activeAction
                    }
                });
            }, {
                deep: true
            });
        });
        store.$subscribe(({ events , type  }, state)=>{
            api.notifyComponentUpdate();
            api.sendInspectorState(INSPECTOR_ID);
            if (!isTimelineActive) return;
            // rootStore.state[store.id] = state
            const eventData = {
                time: now(),
                title: formatMutationType(type),
                data: assign$1({
                    store: formatDisplay(store.$id)
                }, formatEventData(events)),
                groupId: activeAction
            };
            if (type === MutationType.patchFunction) eventData.subtitle = "\u2935\ufe0f";
            else if (type === MutationType.patchObject) eventData.subtitle = "\uD83E\uDDE9";
            else if (events && !Array.isArray(events)) eventData.subtitle = events.type;
            if (events) eventData.data["rawEvent(s)"] = {
                _custom: {
                    display: "DebuggerEvent",
                    type: "object",
                    tooltip: "raw DebuggerEvent[]",
                    value: events
                }
            };
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: eventData
            });
        }, {
            detached: true,
            flush: "sync"
        });
        const hotUpdate = store._hotUpdate;
        store._hotUpdate = (0, _vueDemi.markRaw)((newStore)=>{
            hotUpdate(newStore);
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: now(),
                    title: "\uD83D\uDD25 " + store.$id,
                    subtitle: "HMR update",
                    data: {
                        store: formatDisplay(store.$id),
                        info: formatDisplay(`HMR update`)
                    }
                }
            });
            // update the devtools too
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
        });
        const { $dispose  } = store;
        store.$dispose = ()=>{
            $dispose();
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
            api.getSettings().logStoreChanges && toastMessage(`Disposed "${store.$id}" store \ud83d`);
        };
        // trigger an update so it can display new registered stores
        api.notifyComponentUpdate();
        api.sendInspectorTree(INSPECTOR_ID);
        api.sendInspectorState(INSPECTOR_ID);
        api.getSettings().logStoreChanges && toastMessage(`"${store.$id}" store installed \ud83c`);
    });
}
let runningActionId = 0;
let activeAction;
/**
 * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the
 * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state
 * mutation to the action.
 *
 * @param store - store to patch
 * @param actionNames - list of actionst to patch
 */ function patchActionForGrouping(store, actionNames, wrapWithProxy) {
    // original actions of the store as they are given by pinia. We are going to override them
    const actions = actionNames.reduce((storeActions, actionName)=>{
        // use toRaw to avoid tracking #541
        storeActions[actionName] = (0, _vueDemi.toRaw)(store)[actionName];
        return storeActions;
    }, {});
    for(const actionName in actions)store[actionName] = function() {
        // the running action id is incremented in a before action hook
        const _actionId = runningActionId;
        const trackedStore = wrapWithProxy ? new Proxy(store, {
            get (...args) {
                activeAction = _actionId;
                return Reflect.get(...args);
            },
            set (...args) {
                activeAction = _actionId;
                return Reflect.set(...args);
            }
        }) : store;
        // For Setup Stores we need https://github.com/tc39/proposal-async-context
        activeAction = _actionId;
        const retValue = actions[actionName].apply(trackedStore, arguments);
        // this is safer as async actions in Setup Stores would associate mutations done outside of the action
        activeAction = undefined;
        return retValue;
    };
}
/**
 * pinia.use(devtoolsPlugin)
 */ function devtoolsPlugin({ app , store , options  }) {
    // HMR module
    if (store.$id.startsWith("__hot:")) return;
    // detect option api vs setup api
    store._isOptionsAPI = !!options.state;
    // Do not overwrite actions mocked by @pinia/testing (#2298)
    if (!store._p._testing) {
        patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);
        // Upgrade the HMR to also update the new actions
        const originalHotUpdate = store._hotUpdate;
        (0, _vueDemi.toRaw)(store)._hotUpdate = function(newStore) {
            originalHotUpdate.apply(this, arguments);
            patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
        };
    }
    addStoreToDevtools(app, // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store);
}
/**
 * Creates a Pinia instance to be used by the application
 */ function createPinia() {
    const scope = (0, _vueDemi.effectScope)(true);
    // NOTE: here we could check the window object for a state and directly set it
    // if there is anything like it with Vue 3 SSR
    const state = scope.run(()=>(0, _vueDemi.ref)({}));
    let _p = [];
    // plugins added before calling app.use(pinia)
    let toBeInstalled = [];
    const pinia = (0, _vueDemi.markRaw)({
        install (app) {
            // this allows calling useStore() outside of a component setup after
            // installing pinia's plugin
            setActivePinia(pinia);
            if (!(0, _vueDemi.isVue2)) {
                pinia._a = app;
                app.provide(piniaSymbol, pinia);
                app.config.globalProperties.$pinia = pinia;
                /* istanbul ignore else */ if (IS_CLIENT) registerPiniaDevtools(app, pinia);
                toBeInstalled.forEach((plugin)=>_p.push(plugin));
                toBeInstalled = [];
            }
        },
        use (plugin) {
            if (!this._a && !(0, _vueDemi.isVue2)) toBeInstalled.push(plugin);
            else _p.push(plugin);
            return this;
        },
        _p,
        // it's actually undefined here
        // @ts-expect-error
        _a: null,
        _e: scope,
        _s: new Map(),
        state
    });
    // pinia devtools rely on dev only features so they cannot be forced unless
    // the dev build of Vue is used. Avoid old browsers like IE11.
    if (IS_CLIENT && typeof Proxy !== "undefined") pinia.use(devtoolsPlugin);
    return pinia;
}
/**
 * Dispose a Pinia instance by stopping its effectScope and removing the state, plugins and stores. This is mostly
 * useful in tests, with both a testing pinia or a regular pinia and in applications that use multiple pinia instances.
 * Once disposed, the pinia instance cannot be used anymore.
 *
 * @param pinia - pinia instance
 */ function disposePinia(pinia) {
    pinia._e.stop();
    pinia._s.clear();
    pinia._p.splice(0);
    pinia.state.value = {};
    // @ts-expect-error: non valid
    pinia._a = null;
}
/**
 * Checks if a function is a `StoreDefinition`.
 *
 * @param fn - object to test
 * @returns true if `fn` is a StoreDefinition
 */ const isUseStore = (fn)=>{
    return typeof fn === "function" && typeof fn.$id === "string";
};
/**
 * Mutates in place `newState` with `oldState` to _hot update_ it. It will
 * remove any key not existing in `newState` and recursively merge plain
 * objects.
 *
 * @param newState - new state object to be patched
 * @param oldState - old state that should be used to patch newState
 * @returns - newState
 */ function patchObject(newState, oldState) {
    // no need to go through symbols because they cannot be serialized anyway
    for(const key in oldState){
        const subPatch = oldState[key];
        // skip the whole sub tree
        if (!(key in newState)) continue;
        const targetValue = newState[key];
        if (isPlainObject(targetValue) && isPlainObject(subPatch) && !(0, _vueDemi.isRef)(subPatch) && !(0, _vueDemi.isReactive)(subPatch)) newState[key] = patchObject(targetValue, subPatch);
        else // objects are either a bit more complex (e.g. refs) or primitives, so we
        // just set the whole thing
        if (0, _vueDemi.isVue2) (0, _vueDemi.set)(newState, key, subPatch);
        else newState[key] = subPatch;
    }
    return newState;
}
/**
 * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.
 *
 * @example
 * ```js
 * const useUser = defineStore(...)
 * if (import.meta.hot) {
 *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))
 * }
 * ```
 *
 * @param initialUseStore - return of the defineStore to hot update
 * @param hot - `import.meta.hot`
 */ function acceptHMRUpdate(initialUseStore, hot) {
    return (newModule)=>{
        const pinia = hot.data.pinia || initialUseStore._pinia;
        if (!pinia) // this store is still not used
        return;
        // preserve the pinia instance across loads
        hot.data.pinia = pinia;
        // console.log('got data', newStore)
        for(const exportName in newModule){
            const useStore = newModule[exportName];
            // console.log('checking for', exportName)
            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {
                // console.log('Accepting update for', useStore.$id)
                const id = useStore.$id;
                if (id !== initialUseStore.$id) {
                    console.warn(`The id of the store changed from "${initialUseStore.$id}" to "${id}". Reloading.`);
                    // return import.meta.hot.invalidate()
                    return hot.invalidate();
                }
                const existingStore = pinia._s.get(id);
                if (!existingStore) {
                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);
                    return;
                }
                useStore(pinia, existingStore);
            }
        }
    };
}
const noop = ()=>{};
function addSubscription(subscriptions, callback, detached, onCleanup = noop) {
    subscriptions.push(callback);
    const removeSubscription = ()=>{
        const idx = subscriptions.indexOf(callback);
        if (idx > -1) {
            subscriptions.splice(idx, 1);
            onCleanup();
        }
    };
    if (!detached && (0, _vueDemi.getCurrentScope)()) (0, _vueDemi.onScopeDispose)(removeSubscription);
    return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
    subscriptions.slice().forEach((callback)=>{
        callback(...args);
    });
}
const fallbackRunWithContext = (fn)=>fn();
/**
 * Marks a function as an action for `$onAction`
 * @internal
 */ const ACTION_MARKER = Symbol();
/**
 * Action name symbol. Allows to add a name to an action after defining it
 * @internal
 */ const ACTION_NAME = Symbol();
function mergeReactiveObjects(target, patchToApply) {
    // Handle Map instances
    if (target instanceof Map && patchToApply instanceof Map) patchToApply.forEach((value, key)=>target.set(key, value));
    else if (target instanceof Set && patchToApply instanceof Set) // Handle Set instances
    patchToApply.forEach(target.add, target);
    // no need to go through symbols because they cannot be serialized anyway
    for(const key in patchToApply){
        if (!patchToApply.hasOwnProperty(key)) continue;
        const subPatch = patchToApply[key];
        const targetValue = target[key];
        if (isPlainObject(targetValue) && isPlainObject(subPatch) && target.hasOwnProperty(key) && !(0, _vueDemi.isRef)(subPatch) && !(0, _vueDemi.isReactive)(subPatch)) // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might
        // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that
        // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.
        target[key] = mergeReactiveObjects(targetValue, subPatch);
        else // @ts-expect-error: subPatch is a valid value
        target[key] = subPatch;
    }
    return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
/**
 * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a
 * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.
 *
 * @param obj - target object
 * @returns obj
 */ function skipHydrate(obj) {
    return Object.defineProperty(obj, skipHydrateSymbol, {});
}
/**
 * Returns whether a value should be hydrated
 *
 * @param obj - target variable
 * @returns true if `obj` should be hydrated
 */ function shouldHydrate(obj) {
    return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign  } = Object;
function isComputed(o) {
    return !!((0, _vueDemi.isRef)(o) && o.effect);
}
function createOptionsStore(id, options, pinia, hot) {
    const { state , actions , getters  } = options;
    const initialState = pinia.state.value[id];
    let store;
    function setup() {
        if (!initialState && !hot) {
            /* istanbul ignore if */ if (0, _vueDemi.isVue2) (0, _vueDemi.set)(pinia.state.value, id, state ? state() : {});
            else pinia.state.value[id] = state ? state() : {};
        }
        // avoid creating a state in pinia.state.value
        const localState = hot ? (0, _vueDemi.toRefs)((0, _vueDemi.ref)(state ? state() : {}).value) : (0, _vueDemi.toRefs)(pinia.state.value[id]);
        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name)=>{
            if (name in localState) console.warn(`[\ud83c]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id}".`);
            computedGetters[name] = (0, _vueDemi.markRaw)((0, _vueDemi.computed)(()=>{
                setActivePinia(pinia);
                // it was created just before
                const store = pinia._s.get(id);
                // allow cross using stores
                /* istanbul ignore if */ if ((0, _vueDemi.isVue2) && !store._r) return;
                // @ts-expect-error
                // return getters![name].call(context, context)
                // TODO: avoid reading the getter while assigning with a global variable
                return getters[name].call(store, store);
            }));
            return computedGetters;
        }, {}));
    }
    store = createSetupStore(id, setup, options, pinia, hot, true);
    return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
    let scope;
    const optionsForPlugin = assign({
        actions: {}
    }, options);
    /* istanbul ignore if */ if (!pinia._e.active) throw new Error("Pinia destroyed");
    // watcher options for $subscribe
    const $subscribeOptions = {
        deep: true
    };
    /* istanbul ignore else */ if (!(0, _vueDemi.isVue2)) $subscribeOptions.onTrigger = (event)=>{
        /* istanbul ignore else */ if (isListening) debuggerEvents = event;
        else if (isListening == false && !store._hotUpdating) {
            // let patch send all the events together later
            /* istanbul ignore else */ if (Array.isArray(debuggerEvents)) debuggerEvents.push(event);
            else console.error("\uD83C\uDF4D debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
    };
    // internal state
    let isListening; // set to true at the end
    let isSyncListening; // set to true at the end
    let subscriptions = [];
    let actionSubscriptions = [];
    let debuggerEvents;
    const initialState = pinia.state.value[$id];
    // avoid setting the state for option stores if it is set
    // by the setup
    if (!isOptionsStore && !initialState && !hot) {
        /* istanbul ignore if */ if (0, _vueDemi.isVue2) (0, _vueDemi.set)(pinia.state.value, $id, {});
        else pinia.state.value[$id] = {};
    }
    const hotState = (0, _vueDemi.ref)({});
    // avoid triggering too many listeners
    // https://github.com/vuejs/pinia/issues/1129
    let activeListener;
    function $patch(partialStateOrMutator) {
        let subscriptionMutation;
        isListening = isSyncListening = false;
        debuggerEvents = [];
        if (typeof partialStateOrMutator === "function") {
            partialStateOrMutator(pinia.state.value[$id]);
            subscriptionMutation = {
                type: MutationType.patchFunction,
                storeId: $id,
                events: debuggerEvents
            };
        } else {
            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
            subscriptionMutation = {
                type: MutationType.patchObject,
                payload: partialStateOrMutator,
                storeId: $id,
                events: debuggerEvents
            };
        }
        const myListenerId = activeListener = Symbol();
        (0, _vueDemi.nextTick)().then(()=>{
            if (activeListener === myListenerId) isListening = true;
        });
        isSyncListening = true;
        // because we paused the watcher, we need to manually call the subscriptions
        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
    }
    const $reset = isOptionsStore ? function $reset() {
        const { state  } = options;
        const newState = state ? state() : {};
        // we use a patch to group all changes into one single subscription
        this.$patch(($state)=>{
            // @ts-expect-error: FIXME: shouldn't error?
            assign($state, newState);
        });
    } : ()=>{
        throw new Error(`\ud83c: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
    };
    function $dispose() {
        scope.stop();
        subscriptions = [];
        actionSubscriptions = [];
        pinia._s.delete($id);
    }
    /**
     * Helper that wraps function so it can be tracked with $onAction
     * @param fn - action to wrap
     * @param name - name of the action
     */ const action = (fn, name = "")=>{
        if (ACTION_MARKER in fn) {
            fn[ACTION_NAME] = name;
            return fn;
        }
        const wrappedAction = function() {
            setActivePinia(pinia);
            const args = Array.from(arguments);
            const afterCallbackList = [];
            const onErrorCallbackList = [];
            function after(callback) {
                afterCallbackList.push(callback);
            }
            function onError(callback) {
                onErrorCallbackList.push(callback);
            }
            // @ts-expect-error
            triggerSubscriptions(actionSubscriptions, {
                args,
                name: wrappedAction[ACTION_NAME],
                store,
                after,
                onError
            });
            let ret;
            try {
                ret = fn.apply(this && this.$id === $id ? this : store, args);
            // handle sync errors
            } catch (error) {
                triggerSubscriptions(onErrorCallbackList, error);
                throw error;
            }
            if (ret instanceof Promise) return ret.then((value)=>{
                triggerSubscriptions(afterCallbackList, value);
                return value;
            }).catch((error)=>{
                triggerSubscriptions(onErrorCallbackList, error);
                return Promise.reject(error);
            });
            // trigger after callbacks
            triggerSubscriptions(afterCallbackList, ret);
            return ret;
        };
        wrappedAction[ACTION_MARKER] = true;
        wrappedAction[ACTION_NAME] = name; // will be set later
        // @ts-expect-error: we are intentionally limiting the returned type to just Fn
        // because all the added properties are internals that are exposed through `$onAction()` only
        return wrappedAction;
    };
    const _hmrPayload = /*#__PURE__*/ (0, _vueDemi.markRaw)({
        actions: {},
        getters: {},
        state: [],
        hotState
    });
    const partialStore = {
        _p: pinia,
        // _s: scope,
        $id,
        $onAction: addSubscription.bind(null, actionSubscriptions),
        $patch,
        $reset,
        $subscribe (callback, options = {}) {
            const removeSubscription = addSubscription(subscriptions, callback, options.detached, ()=>stopWatcher());
            const stopWatcher = scope.run(()=>(0, _vueDemi.watch)(()=>pinia.state.value[$id], (state)=>{
                    if (options.flush === "sync" ? isSyncListening : isListening) callback({
                        storeId: $id,
                        type: MutationType.direct,
                        events: debuggerEvents
                    }, state);
                }, assign({}, $subscribeOptions, options)));
            return removeSubscription;
        },
        $dispose
    };
    /* istanbul ignore if */ if (0, _vueDemi.isVue2) // start as non ready
    partialStore._r = false;
    const store = (0, _vueDemi.reactive)(assign({
        _hmrPayload,
        _customProperties: (0, _vueDemi.markRaw)(new Set())
    }, partialStore));
    // store the partial store now so the setup of stores can instantiate each other before they are finished without
    // creating infinite loops.
    pinia._s.set($id, store);
    const runWithContext = pinia._a && pinia._a.runWithContext || fallbackRunWithContext;
    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped
    const setupStore = runWithContext(()=>pinia._e.run(()=>(scope = (0, _vueDemi.effectScope)()).run(()=>setup({
                    action
                }))));
    // overwrite existing actions to support $onAction
    for(const key in setupStore){
        const prop = setupStore[key];
        if ((0, _vueDemi.isRef)(prop) && !isComputed(prop) || (0, _vueDemi.isReactive)(prop)) {
            // mark it as a piece of state to be serialized
            if (hot) (0, _vueDemi.set)(hotState.value, key, (0, _vueDemi.toRef)(setupStore, key));
            else if (!isOptionsStore) {
                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created
                if (initialState && shouldHydrate(prop)) {
                    if ((0, _vueDemi.isRef)(prop)) prop.value = initialState[key];
                    else // probably a reactive object, lets recursively assign
                    // @ts-expect-error: prop is unknown
                    mergeReactiveObjects(prop, initialState[key]);
                }
                // transfer the ref to the pinia state to keep everything in sync
                /* istanbul ignore if */ if (0, _vueDemi.isVue2) (0, _vueDemi.set)(pinia.state.value[$id], key, prop);
                else pinia.state.value[$id][key] = prop;
            }
            _hmrPayload.state.push(key);
        // action
        } else if (typeof prop === "function") {
            const actionValue = hot ? prop : action(prop, key);
            // this a hot module replacement store because the hotUpdate method needs
            // to do it with the right context
            /* istanbul ignore if */ if (0, _vueDemi.isVue2) (0, _vueDemi.set)(setupStore, key, actionValue);
            else // @ts-expect-error
            setupStore[key] = actionValue;
            _hmrPayload.actions[key] = prop;
            // list actions so they can be used in plugins
            // @ts-expect-error
            optionsForPlugin.actions[key] = prop;
        } else // add getters for devtools
        if (isComputed(prop)) {
            _hmrPayload.getters[key] = isOptionsStore ? options.getters[key] : prop;
            if (IS_CLIENT) {
                const getters = setupStore._getters || // @ts-expect-error: same
                (setupStore._getters = (0, _vueDemi.markRaw)([]));
                getters.push(key);
            }
        }
    }
    // add the state, getters, and action properties
    /* istanbul ignore if */ if (0, _vueDemi.isVue2) Object.keys(setupStore).forEach((key)=>{
        (0, _vueDemi.set)(store, key, setupStore[key]);
    });
    else {
        assign(store, setupStore);
        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.
        // Make `storeToRefs()` work with `reactive()` #799
        assign((0, _vueDemi.toRaw)(store), setupStore);
    }
    // use this instead of a computed with setter to be able to create it anywhere
    // without linking the computed lifespan to wherever the store is first
    // created.
    Object.defineProperty(store, "$state", {
        get: ()=>hot ? hotState.value : pinia.state.value[$id],
        set: (state)=>{
            /* istanbul ignore if */ if (hot) throw new Error("cannot set hotState");
            $patch(($state)=>{
                // @ts-expect-error: FIXME: shouldn't error?
                assign($state, state);
            });
        }
    });
    store._hotUpdate = (0, _vueDemi.markRaw)((newStore)=>{
        store._hotUpdating = true;
        newStore._hmrPayload.state.forEach((stateKey)=>{
            if (stateKey in store.$state) {
                const newStateTarget = newStore.$state[stateKey];
                const oldStateSource = store.$state[stateKey];
                if (typeof newStateTarget === "object" && isPlainObject(newStateTarget) && isPlainObject(oldStateSource)) patchObject(newStateTarget, oldStateSource);
                else // transfer the ref
                newStore.$state[stateKey] = oldStateSource;
            }
            // patch direct access properties to allow store.stateProperty to work as
            // store.$state.stateProperty
            (0, _vueDemi.set)(store, stateKey, (0, _vueDemi.toRef)(newStore.$state, stateKey));
        });
        // remove deleted state properties
        Object.keys(store.$state).forEach((stateKey)=>{
            if (!(stateKey in newStore.$state)) (0, _vueDemi.del)(store, stateKey);
        });
        // avoid devtools logging this as a mutation
        isListening = false;
        isSyncListening = false;
        pinia.state.value[$id] = (0, _vueDemi.toRef)(newStore._hmrPayload, "hotState");
        isSyncListening = true;
        (0, _vueDemi.nextTick)().then(()=>{
            isListening = true;
        });
        for(const actionName in newStore._hmrPayload.actions){
            const actionFn = newStore[actionName];
            (0, _vueDemi.set)(store, actionName, action(actionFn, actionName));
        }
        // TODO: does this work in both setup and option store?
        for(const getterName in newStore._hmrPayload.getters){
            const getter = newStore._hmrPayload.getters[getterName];
            const getterValue = isOptionsStore ? (0, _vueDemi.computed)(()=>{
                setActivePinia(pinia);
                return getter.call(store, store);
            }) : getter;
            (0, _vueDemi.set)(store, getterName, getterValue);
        }
        // remove deleted getters
        Object.keys(store._hmrPayload.getters).forEach((key)=>{
            if (!(key in newStore._hmrPayload.getters)) (0, _vueDemi.del)(store, key);
        });
        // remove old actions
        Object.keys(store._hmrPayload.actions).forEach((key)=>{
            if (!(key in newStore._hmrPayload.actions)) (0, _vueDemi.del)(store, key);
        });
        // update the values used in devtools and to allow deleting new properties later on
        store._hmrPayload = newStore._hmrPayload;
        store._getters = newStore._getters;
        store._hotUpdating = false;
    });
    if (IS_CLIENT) {
        const nonEnumerable = {
            writable: true,
            configurable: true,
            // avoid warning on devtools trying to display this property
            enumerable: false
        };
        [
            "_p",
            "_hmrPayload",
            "_getters",
            "_customProperties"
        ].forEach((p)=>{
            Object.defineProperty(store, p, assign({
                value: store[p]
            }, nonEnumerable));
        });
    }
    /* istanbul ignore if */ if (0, _vueDemi.isVue2) // mark the store as ready before plugins
    store._r = true;
    // apply all plugins
    pinia._p.forEach((extender)=>{
        /* istanbul ignore else */ if (IS_CLIENT) {
            const extensions = scope.run(()=>extender({
                    store: store,
                    app: pinia._a,
                    pinia,
                    options: optionsForPlugin
                }));
            Object.keys(extensions || {}).forEach((key)=>store._customProperties.add(key));
            assign(store, extensions);
        } else assign(store, scope.run(()=>extender({
                store: store,
                app: pinia._a,
                pinia,
                options: optionsForPlugin
            })));
    });
    if ((0, store.$state) && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) console.warn(`[\ud83c]: The "state" must be a plain object. It cannot be\n` + `\tstate: () => new MyClass()\n` + `Found in store "${store.$id}".`);
    // only apply hydrate to option stores with an initial state in pinia
    if (initialState && isOptionsStore && options.hydrate) options.hydrate(store.$state, initialState);
    isListening = true;
    isSyncListening = true;
    return store;
}
// allows unused stores to be tree shaken
/*! #__NO_SIDE_EFFECTS__ */ function defineStore(// TODO: add proper types from above
idOrOptions, setup, setupOptions) {
    let id;
    let options;
    const isSetupStore = typeof setup === "function";
    if (typeof idOrOptions === "string") {
        id = idOrOptions;
        // the option store setup will contain the actual options in this case
        options = isSetupStore ? setupOptions : setup;
    } else {
        options = idOrOptions;
        id = idOrOptions.id;
        if (typeof id !== "string") throw new Error(`[\ud83c]: "defineStore()" must be passed a store id as its first argument.`);
    }
    function useStore(pinia, hot) {
        const hasContext = (0, _vueDemi.hasInjectionContext)();
        pinia = pinia || (hasContext ? (0, _vueDemi.inject)(piniaSymbol, null) : null);
        if (pinia) setActivePinia(pinia);
        if (!activePinia) throw new Error(`[\ud83c]: "getActivePinia()" was called but there was no active Pinia. Are you trying to use a store before calling "app.use(pinia)"?\n` + `See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.\n` + `This will fail in production.`);
        pinia = activePinia;
        if (!pinia._s.has(id)) {
            // creating the store registers it in `pinia._s`
            if (isSetupStore) createSetupStore(id, setup, options, pinia);
            else createOptionsStore(id, options, pinia);
            // @ts-expect-error: not the right inferred type
            useStore._pinia = pinia;
        }
        const store = pinia._s.get(id);
        if (hot) {
            const hotId = "__hot:" + id;
            const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign({}, options), pinia, true);
            hot._hotUpdate(newStore);
            // cleanup the state properties and the store from the cache
            delete pinia.state.value[hotId];
            pinia._s.delete(hotId);
        }
        if (IS_CLIENT) {
            const currentInstance = (0, _vueDemi.getCurrentInstance)();
            // save stores in instances to access them devtools
            if (currentInstance && currentInstance.proxy && // avoid adding stores that are just built for hot module replacement
            !hot) {
                const vm = currentInstance.proxy;
                const cache = "_pStores" in vm ? vm._pStores : vm._pStores = {};
                cache[id] = store;
            }
        }
        // StoreGeneric cannot be casted towards Store
        return store;
    }
    useStore.$id = id;
    return useStore;
}
let mapStoreSuffix = "Store";
/**
 * Changes the suffix added by `mapStores()`. Can be set to an empty string.
 * Defaults to `"Store"`. Make sure to extend the MapStoresCustomization
 * interface if you are using TypeScript.
 *
 * @param suffix - new suffix
 */ function setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS
) {
    mapStoreSuffix = suffix;
}
/**
 * Allows using stores without the composition API (`setup()`) by generating an
 * object to be spread in the `computed` field of a component. It accepts a list
 * of store definitions.
 *
 * @example
 * ```js
 * export default {
 *   computed: {
 *     // other computed properties
 *     ...mapStores(useUserStore, useCartStore)
 *   },
 *
 *   created() {
 *     this.userStore // store with id "user"
 *     this.cartStore // store with id "cart"
 *   }
 * }
 * ```
 *
 * @param stores - list of stores to map to an object
 */ function mapStores(...stores) {
    if (Array.isArray(stores[0])) {
        console.warn(`[\ud83c]: Directly pass all stores to "mapStores()" without putting them in an array:\n` + `Replace\n` + `\tmapStores([useAuthStore, useCartStore])\n` + `with\n` + `\tmapStores(useAuthStore, useCartStore)\n` + `This will fail in production if not fixed.`);
        stores = stores[0];
    }
    return stores.reduce((reduced, useStore)=>{
        // @ts-expect-error: $id is added by defineStore
        reduced[useStore.$id + mapStoreSuffix] = function() {
            return useStore(this.$pinia);
        };
        return reduced;
    }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */ function mapState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key)=>{
        reduced[key] = function() {
            // @ts-expect-error: FIXME: should work?
            return useStore(this.$pinia)[key];
        };
        return reduced;
    }, {}) : Object.keys(keysOrMapper).reduce((reduced, key)=>{
        // @ts-expect-error
        reduced[key] = function() {
            const store = useStore(this.$pinia);
            const storeKey = keysOrMapper[key];
            // for some reason TS is unable to infer the type of storeKey to be a
            // function
            return typeof storeKey === "function" ? storeKey.call(this, store) : store[storeKey];
        };
        return reduced;
    }, {});
}
/**
 * Alias for `mapState()`. You should use `mapState()` instead.
 * @deprecated use `mapState()` instead.
 */ const mapGetters = mapState;
/**
 * Allows directly using actions from your store without using the composition
 * API (`setup()`) by generating an object to be spread in the `methods` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */ function mapActions(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key)=>{
        // @ts-expect-error
        reduced[key] = function(...args) {
            // @ts-expect-error: FIXME: should work?
            return useStore(this.$pinia)[key](...args);
        };
        return reduced;
    }, {}) : Object.keys(keysOrMapper).reduce((reduced, key)=>{
        // @ts-expect-error
        reduced[key] = function(...args) {
            // @ts-expect-error: FIXME: should work?
            return useStore(this.$pinia)[keysOrMapper[key]](...args);
        };
        return reduced;
    }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */ function mapWritableState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper) ? keysOrMapper.reduce((reduced, key)=>{
        reduced[key] = {
            get () {
                return useStore(this.$pinia)[key];
            },
            set (value) {
                return useStore(this.$pinia)[key] = value;
            }
        };
        return reduced;
    }, {}) : Object.keys(keysOrMapper).reduce((reduced, key)=>{
        reduced[key] = {
            get () {
                return useStore(this.$pinia)[keysOrMapper[key]];
            },
            set (value) {
                return useStore(this.$pinia)[keysOrMapper[key]] = value;
            }
        };
        return reduced;
    }, {});
}
/**
 * Creates an object of references with all the state, getters, and plugin-added
 * state properties of the store. Similar to `toRefs()` but specifically
 * designed for Pinia stores so methods and non reactive properties are
 * completely ignored.
 *
 * @param store - store to extract the refs from
 */ function storeToRefs(store) {
    // See https://github.com/vuejs/pinia/issues/852
    // It's easier to just use toRefs() even if it includes more stuff
    if (0, _vueDemi.isVue2) // @ts-expect-error: toRefs include methods and others
    return (0, _vueDemi.toRefs)(store);
    else {
        const rawStore = (0, _vueDemi.toRaw)(store);
        const refs = {};
        for(const key in rawStore){
            const value = rawStore[key];
            // There is no native method to check for a computed
            // https://github.com/vuejs/core/pull/4165
            if (value.effect) // @ts-expect-error: too hard to type correctly
            refs[key] = // ...
            (0, _vueDemi.computed)({
                get: ()=>store[key],
                set (value) {
                    store[key] = value;
                }
            });
            else if ((0, _vueDemi.isRef)(value) || (0, _vueDemi.isReactive)(value)) // @ts-expect-error: the key is state or getter
            refs[key] = // ---
            (0, _vueDemi.toRef)(store, key);
        }
        return refs;
    }
}
/**
 * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need
 * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:
 * https://pinia.vuejs.org/ssr/nuxt.html.
 *
 * @example
 * ```js
 * import Vue from 'vue'
 * import { PiniaVuePlugin, createPinia } from 'pinia'
 *
 * Vue.use(PiniaVuePlugin)
 * const pinia = createPinia()
 *
 * new Vue({
 *   el: '#app',
 *   // ...
 *   pinia,
 * })
 * ```
 *
 * @param _Vue - `Vue` imported from 'vue'.
 */ const PiniaVuePlugin = function(_Vue) {
    // Equivalent of
    // app.config.globalProperties.$pinia = pinia
    _Vue.mixin({
        beforeCreate () {
            const options = this.$options;
            if (options.pinia) {
                const pinia = options.pinia;
                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31
                /* istanbul ignore else */ if (!this._provided) {
                    const provideCache = {};
                    Object.defineProperty(this, "_provided", {
                        get: ()=>provideCache,
                        set: (v)=>Object.assign(provideCache, v)
                    });
                }
                this._provided[piniaSymbol] = pinia;
                // propagate the pinia instance in an SSR friendly way
                // avoid adding it to nuxt twice
                /* istanbul ignore else */ if (!this.$pinia) this.$pinia = pinia;
                pinia._a = this;
                if (IS_CLIENT) // this allows calling useStore() outside of a component setup after
                // installing pinia's plugin
                setActivePinia(pinia);
                if (IS_CLIENT) registerPiniaDevtools(pinia._a, pinia);
            } else if (!this.$pinia && options.parent && options.parent.$pinia) this.$pinia = options.parent.$pinia;
        },
        destroyed () {
            delete this._pStores;
        }
    });
};

},{"vue-demi":"1O62H","@vue/devtools-api":"6123S","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"1O62H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "set", ()=>set);
parcelHelpers.export(exports, "del", ()=>del);
parcelHelpers.export(exports, "Vue", ()=>_vue);
parcelHelpers.export(exports, "Vue2", ()=>Vue2);
parcelHelpers.export(exports, "isVue2", ()=>isVue2);
parcelHelpers.export(exports, "isVue3", ()=>isVue3);
parcelHelpers.export(exports, "install", ()=>install);
var _vue = require("vue");
parcelHelpers.exportAll(_vue, exports);
var isVue2 = false;
var isVue3 = true;
var Vue2 = undefined;
function install() {}
function set(target, key, val) {
    if (Array.isArray(target)) {
        target.length = Math.max(target.length, key);
        target.splice(key, 1, val);
        return val;
    }
    target[key] = val;
    return val;
}
function del(target, key) {
    if (Array.isArray(target)) {
        target.splice(key, 1);
        return;
    }
    delete target[key];
}

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6123S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setupDevtoolsPlugin", ()=>setupDevtoolsPlugin);
var _envJs = require("./env.js");
var _constJs = require("./const.js");
var _proxyJs = require("./proxy.js");
var _indexJs = require("./api/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var _pluginJs = require("./plugin.js");
parcelHelpers.exportAll(_pluginJs, exports);
var _timeJs = require("./time.js");
parcelHelpers.exportAll(_timeJs, exports);
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const descriptor = pluginDescriptor;
    const target = (0, _envJs.getTarget)();
    const hook = (0, _envJs.getDevtoolsGlobalHook)();
    const enableProxy = (0, _envJs.isProxyAvailable) && descriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) hook.emit((0, _constJs.HOOK_SETUP), pluginDescriptor, setupFn);
    else {
        const proxy = enableProxy ? new (0, _proxyJs.ApiProxy)(descriptor, hook) : null;
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor: descriptor,
            setupFn,
            proxy
        });
        if (proxy) setupFn(proxy.proxiedTarget);
    }
}

},{"./env.js":"5Y878","./const.js":"iz9IK","./proxy.js":"gsc56","./api/index.js":false,"./plugin.js":false,"./time.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"5Y878":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDevtoolsGlobalHook", ()=>getDevtoolsGlobalHook);
parcelHelpers.export(exports, "getTarget", ()=>getTarget);
parcelHelpers.export(exports, "isProxyAvailable", ()=>isProxyAvailable);
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-expect-error navigator and windows are not available in all environments
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : {};
}
const isProxyAvailable = typeof Proxy === "function";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"iz9IK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HOOK_SETUP", ()=>HOOK_SETUP);
parcelHelpers.export(exports, "HOOK_PLUGIN_SETTINGS_SET", ()=>HOOK_PLUGIN_SETTINGS_SET);
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"gsc56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiProxy", ()=>ApiProxy);
var _constJs = require("./const.js");
var _timeJs = require("./time.js");
class ApiProxy {
    constructor(plugin, hook){
        this.target = null;
        this.targetQueue = [];
        this.onQueue = [];
        this.plugin = plugin;
        this.hook = hook;
        const defaultSettings = {};
        if (plugin.settings) for(const id in plugin.settings){
            const item = plugin.settings[id];
            defaultSettings[id] = item.defaultValue;
        }
        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
        let currentSettings = Object.assign({}, defaultSettings);
        try {
            const raw = localStorage.getItem(localSettingsSaveId);
            const data = JSON.parse(raw);
            Object.assign(currentSettings, data);
        } catch (e) {
        // noop
        }
        this.fallbacks = {
            getSettings () {
                return currentSettings;
            },
            setSettings (value) {
                try {
                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
                } catch (e) {
                // noop
                }
                currentSettings = value;
            },
            now () {
                return (0, _timeJs.now)();
            }
        };
        if (hook) hook.on((0, _constJs.HOOK_PLUGIN_SETTINGS_SET), (pluginId, value)=>{
            if (pluginId === this.plugin.id) this.fallbacks.setSettings(value);
        });
        this.proxiedOn = new Proxy({}, {
            get: (_target, prop)=>{
                if (this.target) return this.target.on[prop];
                else return (...args)=>{
                    this.onQueue.push({
                        method: prop,
                        args
                    });
                };
            }
        });
        this.proxiedTarget = new Proxy({}, {
            get: (_target, prop)=>{
                if (this.target) return this.target[prop];
                else if (prop === "on") return this.proxiedOn;
                else if (Object.keys(this.fallbacks).includes(prop)) return (...args)=>{
                    this.targetQueue.push({
                        method: prop,
                        args,
                        resolve: ()=>{}
                    });
                    return this.fallbacks[prop](...args);
                };
                else return (...args)=>{
                    return new Promise((resolve)=>{
                        this.targetQueue.push({
                            method: prop,
                            args,
                            resolve
                        });
                    });
                };
            }
        });
    }
    async setRealTarget(target) {
        this.target = target;
        for (const item of this.onQueue)this.target.on[item.method](...item.args);
        for (const item of this.targetQueue)item.resolve(await this.target[item.method](...item.args));
    }
}

},{"./const.js":"iz9IK","./time.js":"l4NYm","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"l4NYm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPerformanceSupported", ()=>isPerformanceSupported);
parcelHelpers.export(exports, "now", ()=>now);
let supported;
let perf;
function isPerformanceSupported() {
    var _a;
    if (supported !== undefined) return supported;
    if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
    } else if (typeof globalThis !== "undefined" && ((_a = globalThis.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {
        supported = true;
        perf = globalThis.perf_hooks.performance;
    } else supported = false;
    return supported;
}
function now() {
    return isPerformanceSupported() ? perf.now() : Date.now();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6q3A1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$gettext", ()=>$gettext);
parcelHelpers.export(exports, "i18nPlugin", ()=>i18nPlugin);
function $gettext(text) {
    let res = "";
    try {
        const key = text.replace(/[^A-Za-z0-9_]/g, "_");
        res = chrome.i18n.getMessage(key) || text;
    } catch (e) {
        res = text;
    }
    return res;
}
const i18nPlugin = {
    install (app) {
        /* eslint-disable no-param-reassign */ app.config.globalProperties.$gettext = $gettext;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6gHZ2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _pinia = require("pinia");
var _storage = require("@plasmohq/storage");
var _config = require("@/config");
const useStore = (0, _pinia.defineStore)("store", ()=>{
    const storage = new (0, _storage.Storage)();
    const config = (0, _vue.ref)((0, _config.defaultConfig));
    // selected text
    const selectedText = (0, _vue.ref)("");
    const setSelectedText = (text)=>{
        selectedText.value = text;
    };
    async function initConfig() {
        const storedConfig = await storage.get((0, _config.WEBPILOT_CONFIG_STORAGE_KEY));
        if (storedConfig && typeof storedConfig === "object") {
            config.value = storedConfig;
            // For old users who have saved some old data, perform some data correction
            if (config.value.apiOrigin === undefined) config.value.apiOrigin = "personal";
            if (config.value.selfHostUrl === (0, _config.WEBPILOT_OPENAI).HOST_URL) config.value.selfHostUrl = "";
            if (!config.value.latestAskedQuestionPromptIndex && !config.value.latestTextSelectionPromptIndex && !config.value.AskedQuestionPrompts && !config.value.TextSelectionPrompts) {
                config.value.latestAskedQuestionPromptIndex = (0, _config.defaultConfig).latestAskedQuestionPromptIndex;
                config.value.latestTextSelectionPromptIndex = (0, _config.defaultConfig).latestTextSelectionPromptIndex;
                config.value.AskedQuestionPrompts = (0, _config.defaultConfig).AskedQuestionPrompts;
                config.value.TextSelectionPrompts = (0, _config.defaultConfig).TextSelectionPrompts;
                saveToLocalStorage(config.value);
            }
        }
    }
    function saveToLocalStorage(config) {
        storage.set((0, _config.WEBPILOT_CONFIG_STORAGE_KEY), config);
    }
    // The current setConfig method requires each tab to be reloaded for the updates in options to take effect
    // Gradually replace setConfig and setPrompts methods with updateConfig, to fetch the latest LocalStorage each time
    async function updateConfig(newConfig) {
        const storedConfig = await storage.get((0, _config.WEBPILOT_CONFIG_STORAGE_KEY)) || config.value;
        config.value = {
            ...storedConfig,
            ...newConfig
        };
        saveToLocalStorage(config.value);
    }
    function setConfig(newConfig) {
        config.value = newConfig;
        saveToLocalStorage(config.value);
    }
    function setPrompts(type, prompts) {
        if (!type) return;
        config.value = {
            ...config.value,
            [type]: prompts
        };
        saveToLocalStorage(config.value);
    }
    return {
        config,
        selectedText,
        initConfig,
        setSelectedText,
        updateConfig,
        setPrompts,
        setConfig
    };
});
exports.default = useStore;

},{"vue":"dmrjI","pinia":"afUQj","@plasmohq/storage":"4Xe2t","@/config":"2jxI9","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"4Xe2t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseStorage", ()=>o);
parcelHelpers.export(exports, "Storage", ()=>g);
var _pify = require("pify");
var _pifyDefault = parcelHelpers.interopDefault(_pify);
var l = ()=>{
    try {
        let e = globalThis.navigator?.userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (e[1] === "Chrome") return parseInt(e[2]) < 100 || globalThis.chrome.runtime?.getManifest()?.manifest_version === 2;
    } catch  {
        return !1;
    }
    return !1;
};
var o = class {
    #r;
    #t;
    get primaryClient() {
        return this.#t;
    }
    #e;
    get secondaryClient() {
        return this.#e;
    }
    #a;
    get area() {
        return this.#a;
    }
    get hasWebApi() {
        try {
            return typeof window < "u" && !!window.localStorage;
        } catch (e) {
            return console.error(e), !1;
        }
    }
    #s = new Map;
    #i;
    get copiedKeySet() {
        return this.#i;
    }
    isCopied = (e)=>this.hasWebApi && (this.allCopied || this.copiedKeySet.has(e));
    #n = !1;
    get allCopied() {
        return this.#n;
    }
    getExtStorageApi = ()=>globalThis.browser?.storage || globalThis.chrome?.storage;
    get hasExtensionApi() {
        try {
            return !!this.getExtStorageApi();
        } catch (e) {
            return console.error(e), !1;
        }
    }
    isWatchSupported = ()=>this.hasExtensionApi;
    keyNamespace = "";
    isValidKey = (e)=>e.startsWith(this.keyNamespace);
    getNamespacedKey = (e)=>`${this.keyNamespace}${e}`;
    getUnnamespacedKey = (e)=>e.slice(this.keyNamespace.length);
    serde = {
        serializer: JSON.stringify,
        deserializer: JSON.parse
    };
    constructor({ area: e = "sync" , allCopied: t = !1 , copiedKeyList: s = [] , serde: r = {}  } = {}){
        this.setCopiedKeySet(s), this.#a = e, this.#n = t, this.serde = {
            ...this.serde,
            ...r
        };
        try {
            this.hasWebApi && (t || s.length > 0) && (this.#e = window.localStorage);
        } catch  {}
        try {
            this.hasExtensionApi && (this.#r = this.getExtStorageApi(), l() ? this.#t = (0, _pifyDefault.default)(this.#r[this.area], {
                exclude: [
                    "getBytesInUse"
                ],
                errorFirst: !1
            }) : this.#t = this.#r[this.area]);
        } catch  {}
    }
    setCopiedKeySet(e) {
        this.#i = new Set(e);
    }
    rawGetAll = ()=>this.#t?.get();
    getAll = async ()=>{
        let e = await this.rawGetAll();
        return Object.entries(e).filter(([t])=>this.isValidKey(t)).reduce((t, [s, r])=>(t[this.getUnnamespacedKey(s)] = r, t), {});
    };
    copy = async (e)=>{
        let t = e === void 0;
        if (!t && !this.copiedKeySet.has(e) || !this.allCopied || !this.hasExtensionApi) return !1;
        let s = this.allCopied ? await this.rawGetAll() : await this.#t.get((t ? [
            ...this.copiedKeySet
        ] : [
            e
        ]).map(this.getNamespacedKey));
        if (!s) return !1;
        let r = !1;
        for(let a in s){
            let i = s[a], n = this.#e?.getItem(a);
            this.#e?.setItem(a, i), r ||= i !== n;
        }
        return r;
    };
    rawGet = async (e)=>(await this.rawGetMany([
            e
        ]))[e];
    rawGetMany = async (e)=>this.hasExtensionApi ? await this.#t.get(e) : e.filter(this.isCopied).reduce((t, s)=>(t[s] = this.#e?.getItem(s), t), {});
    rawSet = async (e, t)=>await this.rawSetMany({
            [e]: t
        });
    rawSetMany = async (e)=>(this.#e && Object.entries(e).filter(([t])=>this.isCopied(t)).forEach(([t, s])=>this.#e.setItem(t, s)), this.hasExtensionApi && await this.#t.set(e), null);
    clear = async (e = !1)=>{
        e && this.#e?.clear(), await this.#t.clear();
    };
    rawRemove = async (e)=>{
        await this.rawRemoveMany([
            e
        ]);
    };
    rawRemoveMany = async (e)=>{
        this.#e && e.filter(this.isCopied).forEach((t)=>this.#e.removeItem(t)), this.hasExtensionApi && await this.#t.remove(e);
    };
    removeAll = async ()=>{
        let e = await this.getAll(), t = Object.keys(e);
        await this.removeMany(t);
    };
    watch = (e)=>{
        let t = this.isWatchSupported();
        return t && this.#o(e), t;
    };
    #o = (e)=>{
        for(let t in e){
            let s = this.getNamespacedKey(t), r = this.#s.get(s)?.callbackSet || new Set;
            if (r.add(e[t]), r.size > 1) continue;
            let a = (i, n)=>{
                if (n !== this.area || !i[s]) return;
                let h = this.#s.get(s);
                if (!h) throw new Error(`Storage comms does not exist for nsKey: ${s}`);
                Promise.all([
                    this.parseValue(i[s].newValue),
                    this.parseValue(i[s].oldValue)
                ]).then(([y, d])=>{
                    for (let p of h.callbackSet)p({
                        newValue: y,
                        oldValue: d
                    }, n);
                });
            };
            this.#r.onChanged.addListener(a), this.#s.set(s, {
                callbackSet: r,
                listener: a
            });
        }
    };
    unwatch = (e)=>{
        let t = this.isWatchSupported();
        return t && this.#c(e), t;
    };
    #c(e) {
        for(let t in e){
            let s = this.getNamespacedKey(t), r = e[t], a = this.#s.get(s);
            a && (a.callbackSet.delete(r), a.callbackSet.size === 0 && (this.#s.delete(s), this.#r.onChanged.removeListener(a.listener)));
        }
    }
    unwatchAll = ()=>this.#h();
    #h() {
        this.#s.forEach(({ listener: e  })=>this.#r.onChanged.removeListener(e)), this.#s.clear();
    }
    async getItem(e) {
        return this.get(e);
    }
    async getItems(e) {
        return await this.getMany(e);
    }
    async setItem(e, t) {
        await this.set(e, t);
    }
    async setItems(e) {
        await await this.setMany(e);
    }
    async removeItem(e) {
        return this.remove(e);
    }
    async removeItems(e) {
        return await this.removeMany(e);
    }
}, g = class extends o {
    get = async (e)=>{
        let t = this.getNamespacedKey(e), s = await this.rawGet(t);
        return this.parseValue(s);
    };
    getMany = async (e)=>{
        let t = e.map(this.getNamespacedKey), s = await this.rawGetMany(t), r = await Promise.all(Object.values(s).map(this.parseValue));
        return Object.keys(s).reduce((a, i, n)=>(a[this.getUnnamespacedKey(i)] = r[n], a), {});
    };
    set = async (e, t)=>{
        let s = this.getNamespacedKey(e), r = this.serde.serializer(t);
        return this.rawSet(s, r);
    };
    setMany = async (e)=>{
        let t = Object.entries(e).reduce((s, [r, a])=>(s[this.getNamespacedKey(r)] = this.serde.serializer(a), s), {});
        return await this.rawSetMany(t);
    };
    remove = async (e)=>{
        let t = this.getNamespacedKey(e);
        return this.rawRemove(t);
    };
    removeMany = async (e)=>{
        let t = e.map(this.getNamespacedKey);
        return await this.rawRemoveMany(t);
    };
    setNamespace = (e)=>{
        this.keyNamespace = e;
    };
    parseValue = async (e)=>{
        try {
            if (e !== void 0) return this.serde.deserializer(e);
        } catch (t) {
            console.error(t);
        }
    };
};

},{"pify":"fA13J","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"fA13J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>pify);
const processFunction = (function_, options, proxy, unwrapped)=>function(...arguments_) {
        const P = options.promiseModule;
        return new P((resolve, reject)=>{
            if (options.multiArgs) arguments_.push((...result)=>{
                if (options.errorFirst) {
                    if (result[0]) reject(result);
                    else {
                        result.shift();
                        resolve(result);
                    }
                } else resolve(result);
            });
            else if (options.errorFirst) arguments_.push((error, result)=>{
                if (error) reject(error);
                else resolve(result);
            });
            else arguments_.push(resolve);
            const self = this === proxy ? unwrapped : this;
            Reflect.apply(function_, self, arguments_);
        });
    };
const filterCache = new WeakMap();
function pify(input, options) {
    options = {
        exclude: [
            /.+(?:Sync|Stream)$/
        ],
        errorFirst: true,
        promiseModule: Promise,
        ...options
    };
    const objectType = typeof input;
    if (!(input !== null && (objectType === "object" || objectType === "function"))) throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objectType}\``);
    const filter = (target, key)=>{
        let cached = filterCache.get(target);
        if (!cached) {
            cached = {};
            filterCache.set(target, cached);
        }
        if (key in cached) return cached[key];
        const match = (pattern)=>typeof pattern === "string" || typeof key === "symbol" ? key === pattern : pattern.test(key);
        const descriptor = Reflect.getOwnPropertyDescriptor(target, key);
        const writableOrConfigurableOwn = descriptor === undefined || descriptor.writable || descriptor.configurable;
        const included = options.include ? options.include.some((element)=>match(element)) : !options.exclude.some((element)=>match(element));
        const shouldFilter = included && writableOrConfigurableOwn;
        cached[key] = shouldFilter;
        return shouldFilter;
    };
    const cache = new WeakMap();
    const proxy = new Proxy(input, {
        apply (target, thisArg, args) {
            const cached = cache.get(target);
            if (cached) return Reflect.apply(cached, thisArg, args);
            const pified = options.excludeMain ? target : processFunction(target, options, proxy, target);
            cache.set(target, pified);
            return Reflect.apply(pified, thisArg, args);
        },
        get (target, key) {
            const property = target[key];
            // eslint-disable-next-line no-use-extend-native/no-use-extend-native
            if (!filter(target, key) || property === Function.prototype[key]) return property;
            const cached = cache.get(property);
            if (cached) return cached;
            if (typeof property === "function") {
                const pified = processFunction(property, options, proxy, target);
                cache.set(property, pified);
                return pified;
            }
            return property;
        }
    });
    return proxy;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2jxI9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WEBPILOT_CONFIG_STORAGE_KEY", ()=>WEBPILOT_CONFIG_STORAGE_KEY);
parcelHelpers.export(exports, "OPENAI_BASE_URL", ()=>OPENAI_BASE_URL);
parcelHelpers.export(exports, "API_PATH", ()=>API_PATH);
parcelHelpers.export(exports, "defaultConfig", ()=>defaultConfig);
parcelHelpers.export(exports, "MESSAGING_EVENT", ()=>MESSAGING_EVENT);
parcelHelpers.export(exports, "SUPER_BUTTON_STATUS", ()=>SUPER_BUTTON_STATUS);
parcelHelpers.export(exports, "WEBPILOT_OPENAI", ()=>WEBPILOT_OPENAI);
parcelHelpers.export(exports, "LAST_PROMPT_STORAGE_KEY", ()=>LAST_PROMPT_STORAGE_KEY);
parcelHelpers.export(exports, "API_ORIGINS", ()=>API_ORIGINS);
parcelHelpers.export(exports, "SERVER_NAME", ()=>SERVER_NAME);
parcelHelpers.export(exports, "SERVER_TYPE", ()=>SERVER_TYPE);
parcelHelpers.export(exports, "OPTIONS_PAGE_TAB_NAME", ()=>OPTIONS_PAGE_TAB_NAME);
var _i18N = require("./utils/i18n");
const WEBPILOT_CONFIG_STORAGE_KEY = "WEBPILOT_CONFIG_STORAGE_KEY";
const OPENAI_BASE_URL = "https://api.openai.com";
const API_PATH = "/v1/chat/completions";
const defaultConfig = {
    /**
   * general: use webpilot
   * personal: use openai or third party
   * */ apiOrigin: "general",
    /** Open AI or selfhost api key */ authKey: "",
    /** Is auth succeeded */ isAuth: false,
    /** If user not set token at welcome page set false */ isFinishSetup: false,
    /** When select text (by mouse or keyboard) show popup */ autoPopup: false,
    /** Self host url */ selfHostUrl: "",
    /** Azure specify ApiVersion */ azureApiVersion: "",
    /** Azure specify deploymentID */ azureDeploymentID: "",
    /** Custom shortcut for show popup (akspage) */ customShortcut: [
        "Control",
        "`"
    ],
    /** Chose display mode
   * popUp
   * sideBar */ displayMode: "popUp",
    /** Show shortcut state, once trigger popup by shortcut set to false */ showShortcutTips: true,
    /** Last select preset prompt index. For auto select at popup. */ latestAskedQuestionPromptIndex: 0,
    latestTextSelectionPromptIndex: 0,
    /** Custom preset prompts */ AskedQuestionPrompts: [
        {
            title: (0, _i18N.$gettext)("Summarize"),
            command: (0, _i18N.$gettext)("Summarize in English, concise and clear")
        },
        {
            title: (0, _i18N.$gettext)("SEO"),
            command: (0, _i18N.$gettext)("Generate a list of 10 long-tail keywords for SEO, related to this page")
        },
        {
            title: (0, _i18N.$gettext)("Solve"),
            command: (0, _i18N.$gettext)("Find the questions/todo on the page, analyze them step by step, and provide a complete solution in the end. If a specified starting point is given, use it directly without changing.")
        }
    ],
    TextSelectionPrompts: [
        {
            title: (0, _i18N.$gettext)("Explain"),
            command: (0, _i18N.$gettext)("Explain it in English using words a middle schooler can understand")
        },
        {
            title: (0, _i18N.$gettext)("Refine"),
            command: (0, _i18N.$gettext)("Refine text, review and revise problems in spelling, grammar, punctuation, word usage, and sentence structure")
        },
        {
            title: (0, _i18N.$gettext)("Draw"),
            command: (0, _i18N.$gettext)(`Let's draw an image about this. You need to write in English without word wraps and headlines, without connection words. back to back separated with commas: [1], [2], [3], [4] {environment}, [5], [6] {style settings}
        Replace [1] with the subject "A image of ";
        Replace [2] with the sentence you mentioned;
        Replace [3] with a list of creative detailed descriptions about [element]; 
        Replace [4] with a list of detailed descriptions about the environment of the scene;
        Replace [5] with a list of detailed descriptions about the mood/feelings and atmosphere of the scene;
        Replace [6] with an appropriate director or artist. If he/she is a historical figure, include his/her country and dynasty.
        Simply write the without explanation, replace the content inside the brackets with details about the content/word inside the brackets and delete the brackets. Repeat that for every bracket in the prompt, complex prompt for an AI-based text to image program that converts a prompt about a topic into an image. The outcome depends on the prompt's coherence. The topic of the whole scene is always dependent on the subject that is replaced with [element], always start the prompt with "/imagine prompt:", don't use any line breaks, Proper grammar is unnecessary and details can be listed.
        Do not show things like "[1]""[element]" in your response.`)
        }
    ],
    /* Model type, for now use open ai template */ model: {
        model: "gpt-4o-mini",
        temperature: 1,
        top_p: 0.9,
        frequency_penalty: 0,
        presence_penalty: 0,
        stop: "<|endoftext|>"
    }
};
const MESSAGING_EVENT = {
    SHOW_POPUP: "MESSAGING_EVENT"
};
const SUPER_BUTTON_STATUS = {
    pending: "pending",
    generating: "generating",
    done: "done"
};
const WEBPILOT_OPENAI = {
    AUTH_KEY: "KEY_PLACEHOLDER",
    HOST_URL: "https://api.webpilotai.com/api/webpilot",
    MODEL: "gpt-4o-mini"
};
const LAST_PROMPT_STORAGE_KEY = {
    COMMON: "LAST_COMMON",
    SELECTED: "LAST_SELECTED"
};
const API_ORIGINS = {
    /** Webpilot Server */ GENERAL: "general",
    /** OpenAI server or proxy */ OPENAI: "openAI",
    /** Selfhost server */ OPENAI_PROXY: "OpenAIProxy",
    /** Azure server */ AZURE: "azure"
};
const SERVER_NAME = {
    OPENAI_OFFICIAL: "OPENAI_OFFICIAL",
    OPENAI_PROXY: "OPENAI_PROXY",
    AZURE_PROXY: "AZURE_PROXY"
};
const SERVER_TYPE = {
    [SERVER_NAME.OPENAI_OFFICIAL]: "OpenAI Official",
    [SERVER_NAME.OPENAI_PROXY]: "OpenAI Proxy",
    [SERVER_NAME.AZURE_PROXY]: "Azure Proxy"
};
const OPTIONS_PAGE_TAB_NAME = {
    ACCOUNT: "ACCOUNT",
    EXTENSION: "EXTENSION",
    ABOUT: "ABOUT"
};

},{"./utils/i18n":"6q3A1","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3fjDl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("7fee18c6d2e79cf5");
    if (script.__esModule) script = script.default;
    script.render = require("9361f26efe07ff2a").render;
    script.__cssModules = require("7db43ac083aa2cce").default;
    require("7638f319bcbe5e3e").default(script);
    script.__scopeId = "data-v-65f623";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/popup/componetns/WebpilotPopup.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "65f623-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("65f623-hmr", script)) __VUE_HMR_RUNTIME__.reload("65f623-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"7fee18c6d2e79cf5":"3rtDx","9361f26efe07ff2a":"eujuA","7db43ac083aa2cce":"fV5z7","7638f319bcbe5e3e":"a48Dg","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3rtDx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resetScss = require("@assets/styles/reset.scss");
// import {onBeforeMount} from 'vue'
// import {sendToBackground} from '@plasmohq/messaging'
var _i18N = require("@/utils/i18n");
var _headerPanelVue = require("@/components/HeaderPanel.vue");
var _headerPanelVueDefault = parcelHelpers.interopDefault(_headerPanelVue);
var _webpilotAlertVue = require("@/components/WebpilotAlert.vue");
var _webpilotAlertVueDefault = parcelHelpers.interopDefault(_webpilotAlertVue);
var _tipsShortcutVue = require("@/components/TipsShortcut.vue");
var _tipsShortcutVueDefault = parcelHelpers.interopDefault(_tipsShortcutVue);
// import useStore from '@/stores/store'
// const store = useStore()
// onBeforeMount(async () => {
//   // check welcode guide
//   if (!store.config.isFinishSetup || !store.config.isAuth) {
//     const [tab] = await chrome.tabs.query({
//       active: true,
//       currentWindow: true,
//     })
//     const currentUrl = tab?.url
//     // can't get current open page url
//     if (currentUrl === undefined) return
//     const signURL = 'https://account.webpilot.ai/'
//     const welcomeUrl = chrome?.runtime?.getURL('tabs/index.html')
//     // aready in welcome page
//     if (currentUrl === signURL || currentUrl === welcomeUrl) {
//       closeWindow()
//       return
//     }
//     chrome.tabs.create({url: signURL})
//     closeWindow()
//     // window.open(welcomeUrl)
//   }
//   // options \u9875\u9762\u4f1a\u5224\u65ad isAuth\uff0c\u8fd9\u91cc\u903b\u8f91\u65e0\u6548\u4e86
//   // check auth state
//   // if (!store.config.isAuth) {
//   //   sendToBackground({name: 'openSetting'})
//   //   closeWindow()
//   //   return
//   // }
//   // check current page
//   // const isKeepOpen = await sendToBackground({
//   //   name: 'popupCheck',
//   // })
//   // if (!isKeepOpen) window.close()
// })
exports.default = {
    __name: "WebpilotPopup",
    setup (__props, { expose: __expose  }) {
        __expose();
        const closeWindow = ()=>{
            window.close();
        };
        const __returned__ = {
            closeWindow,
            get $gettext () {
                return 0, _i18N.$gettext;
            },
            HeaderPanel: (0, _headerPanelVueDefault.default),
            WebpilotAlert: (0, _webpilotAlertVueDefault.default),
            TipsShortcut: (0, _tipsShortcutVueDefault.default)
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"@assets/styles/reset.scss":"6AOpP","@/utils/i18n":"6q3A1","@/components/HeaderPanel.vue":"1qufo","@/components/WebpilotAlert.vue":"iGRiO","@/components/TipsShortcut.vue":"7dyjF","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6AOpP":[function() {},{}],"1qufo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("6a119b9e148368e");
    if (script.__esModule) script = script.default;
    script.render = require("8d94b22099415a19").render;
    script.__cssModules = require("b13eef3006d524b8").default;
    require("6a087f272b417bbe").default(script);
    script.__scopeId = "data-v-f6fb50";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/HeaderPanel.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "f6fb50-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("f6fb50-hmr", script)) __VUE_HMR_RUNTIME__.reload("f6fb50-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"6a119b9e148368e":"2AERW","8d94b22099415a19":"9NGvj","b13eef3006d524b8":"3IQCi","6a087f272b417bbe":"2hYoE","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2AERW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _messaging = require("@plasmohq/messaging");
var _vue3Popper = require("vue3-popper");
var _vue3PopperDefault = parcelHelpers.interopDefault(_vue3Popper);
var _iconPng = require("~assets/icon/icon.png");
var _iconPngDefault = parcelHelpers.interopDefault(_iconPng);
var _interactiveIconVue = require("./InteractiveIcon/InteractiveIcon.vue");
var _interactiveIconVueDefault = parcelHelpers.interopDefault(_interactiveIconVue);
exports.default = {
    __name: "HeaderPanel",
    emits: [
        "onClose"
    ],
    setup (__props, { expose: __expose , emit: emits  }) {
        __expose();
        const openSettingPage = ()=>{
            (0, _messaging.sendToBackground)({
                name: "openSetting"
            });
        };
        const closePopup = ()=>{
            emits("onClose");
        };
        const __returned__ = {
            emits,
            openSettingPage,
            closePopup,
            get sendToBackground () {
                return 0, _messaging.sendToBackground;
            },
            get Popper () {
                return 0, _vue3PopperDefault.default;
            },
            get SamsungLogo () {
                return 0, _iconPngDefault.default;
            },
            InteractiveIcon: (0, _interactiveIconVueDefault.default)
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"@plasmohq/messaging":"k3omK","vue3-popper":"gHnmV","./InteractiveIcon/InteractiveIcon.vue":"3COT6","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo","~assets/icon/icon.png":"6qnSn"}],"k3omK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "relay", ()=>S);
parcelHelpers.export(exports, "relayMessage", ()=>u);
parcelHelpers.export(exports, "sendToActiveContentScript", ()=>h);
parcelHelpers.export(exports, "sendToBackground", ()=>x);
parcelHelpers.export(exports, "sendToBackgroundViaRelay", ()=>w);
parcelHelpers.export(exports, "sendToContentScript", ()=>M);
parcelHelpers.export(exports, "sendViaRelay", ()=>O);
var _nanoid = require("nanoid");
var l = globalThis.browser?.runtime || globalThis.chrome?.runtime, d = globalThis.browser?.tabs || globalThis.chrome?.tabs, m = ()=>{
    if (!l) throw new Error("Extension runtime is not available");
    return l;
}, i = ()=>{
    if (!d) throw new Error("Extension tabs API is not available");
    return d;
}, c = async ()=>{
    let e = i(), [a] = await e.query({
        active: !0,
        currentWindow: !0
    });
    return a;
}, g = (e, a)=>!a.__internal && e.source === globalThis.window && e.data.name === a.name && (a.relayId === void 0 || e.data.relayId === a.relayId);
var y = (e, a, n = globalThis.window)=>{
    let r = async (s)=>{
        if (g(s, e) && !s.data.relayed) {
            let o = {
                name: e.name,
                relayId: e.relayId,
                body: s.data.body
            }, t = await a?.(o);
            n.postMessage({
                name: e.name,
                relayId: e.relayId,
                instanceId: s.data.instanceId,
                body: t,
                relayed: !0
            }, {
                targetOrigin: e.targetOrigin || "/"
            });
        }
    };
    return n.addEventListener("message", r), ()=>n.removeEventListener("message", r);
}, p = (e, a = globalThis.window)=>new Promise((n, r)=>{
        let s = (0, _nanoid.nanoid)(), o = new AbortController;
        a.addEventListener("message", (t)=>{
            g(t, e) && t.data.relayed && t.data.instanceId === s && (n(t.data.body), o.abort());
        }, {
            signal: o.signal
        }), a.postMessage({
            ...e,
            instanceId: s
        }, {
            targetOrigin: e.targetOrigin || "/"
        });
    });
var x = async (e)=>m().sendMessage(e), M = async (e)=>{
    let a = typeof e.tabId == "number" ? e.tabId : (await c()).id;
    return i().sendMessage(a, e);
}, h = M, u = (e)=>y(e, x), S = u, w = p, O = w;

},{"nanoid":"E2pqo","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"E2pqo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlAlphabet", ()=>(0, _indexJs.urlAlphabet));
parcelHelpers.export(exports, "random", ()=>random);
parcelHelpers.export(exports, "customRandom", ()=>customRandom);
parcelHelpers.export(exports, "customAlphabet", ()=>customAlphabet);
parcelHelpers.export(exports, "nanoid", ()=>nanoid);
var _indexJs = require("./url-alphabet/index.js");
let random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));
let customRandom = (alphabet, defaultSize, getRandom)=>{
    let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
    let step = -~(1.6 * mask * defaultSize / alphabet.length);
    return (size = defaultSize)=>{
        let id = "";
        while(true){
            let bytes = getRandom(step);
            let j = step;
            while(j--){
                id += alphabet[bytes[j] & mask] || "";
                if (id.length === size) return id;
            }
        }
    };
};
let customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size, random);
let nanoid = (size = 21)=>crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte)=>{
        byte &= 63;
        if (byte < 36) id += byte.toString(36);
        else if (byte < 62) id += (byte - 26).toString(36).toUpperCase();
        else if (byte > 62) id += "-";
        else id += "_";
        return id;
    }, "");

},{"./url-alphabet/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"gHnmV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;
parcelHelpers.export(exports, "default", ()=>entry_esm);
var _vue = require("vue");
/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing. The function also has a property 'clear' 
 * that is a function which will clear the timer to prevent previously scheduled executions. 
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */ function debounce$1(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    if (null == wait) wait = 100;
    function later() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) timeout = setTimeout(later, wait - last);
        else {
            timeout = null;
            if (!immediate) {
                result = func.apply(context, args);
                context = args = null;
            }
        }
    }
    var debounced = function() {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout) timeout = setTimeout(later, wait);
        if (callNow) {
            result = func.apply(context, args);
            context = args = null;
        }
        return result;
    };
    debounced.clear = function() {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    };
    debounced.flush = function() {
        if (timeout) {
            result = func.apply(context, args);
            context = args = null;
            clearTimeout(timeout);
            timeout = null;
        }
    };
    return debounced;
}
// Adds compatibility for ES modules
debounce$1.debounce = debounce$1;
var debounce_1 = debounce$1;
function useEventListener(target, event, handler) {
    if ((0, _vue.isRef)(target)) (0, _vue.watch)(target, (value, oldValue)=>{
        oldValue === null || oldValue === void 0 || oldValue.removeEventListener(event, handler);
        value === null || value === void 0 || value.addEventListener(event, handler);
    });
    else (0, _vue.onMounted)(()=>{
        target.addEventListener(event, handler);
    });
    (0, _vue.onBeforeUnmount)(()=>{
        var _unref;
        (_unref = (0, _vue.unref)(target)) === null || _unref === void 0 || _unref.removeEventListener(event, handler);
    });
}
function useClickAway(target, handler) {
    const event = "pointerdown";
    if (typeof window === "undefined" || !window) return;
    const listener = (event)=>{
        const el = (0, _vue.unref)(target);
        if (!el) return;
        if (el === event.target || event.composedPath().includes(el)) return;
        handler(event);
    };
    return useEventListener(window, event, listener);
}
function useContent(slots, popperNode, content) {
    let observer = null;
    const hasContent = (0, _vue.ref)(false);
    (0, _vue.onMounted)(()=>{
        if (slots.content !== undefined || content.value) hasContent.value = true;
        observer = new MutationObserver(checkContent);
        observer.observe(popperNode.value, {
            childList: true,
            subtree: true
        });
    });
    (0, _vue.onBeforeUnmount)(()=>observer.disconnect());
    /**
   * Watch the content prop
   */ (0, _vue.watch)(content, (content)=>{
        if (content) hasContent.value = true;
        else hasContent.value = false;
    });
    /**
   * Check the content slot
   */ const checkContent = ()=>{
        if (slots.content) hasContent.value = true;
        else hasContent.value = false;
    };
    return {
        hasContent
    };
}
// import { isHTMLElement } from './instanceOf';
function getBoundingClientRect(element, includeScale) {
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1; // FIXME:
    // `offsetWidth` returns an integer while `getBoundingClientRect`
    // returns a float. This results in `scaleX` or `scaleY` being
    // non-1 when it should be for elements that aren't a full pixel in
    // width or height.
    // if (isHTMLElement(element) && includeScale) {
    //   const offsetHeight = element.offsetHeight;
    //   const offsetWidth = element.offsetWidth;
    //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
    //   // Fallback to 1 in case both values are `0`
    //   if (offsetWidth > 0) {
    //     scaleX = rect.width / offsetWidth || 1;
    //   }
    //   if (offsetHeight > 0) {
    //     scaleY = rect.height / offsetHeight || 1;
    //   }
    // }
    return {
        width: rect.width / scaleX,
        height: rect.height / scaleY,
        top: rect.top / scaleY,
        right: rect.right / scaleX,
        bottom: rect.bottom / scaleY,
        left: rect.left / scaleX,
        x: rect.left / scaleX,
        y: rect.top / scaleY
    };
}
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === "undefined") return false;
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) return getWindowScroll(node);
    else return getHTMLElementScroll(node);
}
function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
}
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
}
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = rect.width / element.offsetWidth || 1;
    var scaleY = rect.height / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) scroll = getNodeScroll(offsetParent);
        if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = getWindowScrollBarX(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
// means it doesn't take into account transforms.
function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
function getParentNode(element) {
    if (getNodeName(element) === "html") return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback
    );
}
function getScrollParent(node) {
    if ([
        "html",
        "body",
        "#document"
    ].indexOf(getNodeName(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if (isHTMLElement(node) && isScrollParent(node)) return node;
    return getScrollParent(getParentNode(node));
}
/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/ function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function isTableElement(element) {
    return [
        "table",
        "td",
        "th"
    ].indexOf(getNodeName(element)) >= 0;
}
function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle(element);
        if (elementCss.position === "fixed") return null;
    }
    var currentNode = getParentNode(element);
    while(isHTMLElement(currentNode) && [
        "html",
        "body"
    ].indexOf(getNodeName(currentNode)) < 0){
        var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || [
            "transform",
            "perspective"
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element) {
    var window1 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static")offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) return window1;
    return offsetParent || getContainingBlock(element) || window1;
}
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead"; // pure-logic modifiers
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain"; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}
function getBasePlacement(placement) {
    return placement.split("-")[0];
}
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}
function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent
        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
    };
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
// of the `<html>` and `<body>` rect bounds if horizontally scrollable
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next);
    } // Give up, the result is false
    return false;
}
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = [
        "absolute",
        "fixed"
    ].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents
function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
function getVariation(placement) {
    return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
    return [
        "top",
        "bottom"
    ].indexOf(placement) >= 0 ? "x" : "y";
}
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch(variation){
            case start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
        }
    }
    return offsets;
}
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                right,
                bottom
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                top,
                bottom
            ].indexOf(key) >= 0 ? "y" : "x";
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: "bottom",
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
                    popper: listScrollParents(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                runModifierEffects();
                return instance.update();
            },
            // Sync update \u2013 it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) return;
                 // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === "fixed"),
                    popper: getLayoutRect(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === "function") state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update \u2013 it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) return instance;
        instance.setOptions(options).then(function(state) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;
                if (typeof effect === "function") {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var passive = {
    passive: true
};
function effect$2(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window1 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
    });
    if (resize) window1.addEventListener("resize", instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
        });
        if (resize) window1.removeEventListener("resize", instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
var eventListeners = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {},
    effect: effect$2,
    data: {}
};
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var popperOffsets$1 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
};
var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: round(round(x * dpr) / dpr) || 0,
        y: round(round(y * dpr) / dpr) || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets;
    var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === "function" ? roundOffsets(offsets) : offsets, _ref3$x = _ref3.x, x = _ref3$x === void 0 ? 0 : _ref3$x, _ref3$y = _ref3.y, y = _ref3$y === void 0 ? 0 : _ref3$y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper)) {
            offsetParent = getDocumentElement(popper);
            if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
                heightProp = "scrollHeight";
                widthProp = "scrollWidth";
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
            sideY = bottom; // $FlowFixMe[prop-missing]
            y -= offsetParent[heightProp] - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
            sideX = right; // $FlowFixMe[prop-missing]
            x -= offsetParent[widthProp] - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref4) {
    var state = _ref4.state, options = _ref4.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var computeStyles$1 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
};
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!isHTMLElement(element) || !getNodeName(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? "" : value);
        });
    });
}
function effect$1(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
        },
        arrow: {
            position: "absolute"
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style, property) {
                style[property] = "";
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!isHTMLElement(element) || !getNodeName(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
var applyStyles$1 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect$1,
    requires: [
        "computeStyles"
    ]
};
var defaultModifiers = [
    eventListeners,
    popperOffsets$1,
    computeStyles$1,
    applyStyles$1
];
var createPopper = /*#__PURE__*/ popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules
function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
}
function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
}
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis || checkAltAxis) {
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset = popperOffsets[mainAxis];
        var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
        var max$1 = popperOffsets[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
        if (checkMainAxis) {
            var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
            popperOffsets[mainAxis] = preventedOffset;
            data[mainAxis] = preventedOffset - offset;
        }
        if (checkAltAxis) {
            var _mainSide = mainAxis === "x" ? top : left;
            var _altSide = mainAxis === "x" ? bottom : right;
            var _offset = popperOffsets[altAxis];
            var _min = _offset + overflow[_mainSide];
            var _max = _offset - overflow[_altSide];
            var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);
            popperOffsets[altAxis] = _preventedOffset;
            data[altAxis] = _preventedOffset - _offset;
        }
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var preventOverflow$1 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: [
        "offset"
    ]
};
var hash$1 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
    });
}
var hash = {
    start: "end",
    end: "start"
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement) {
        return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements$1;
     // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[getBasePlacement(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}
function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) return [];
    var oppositePlacement = getOppositePlacement(placement);
    return [
        getOppositeVariationPlacement(placement),
        oppositePlacement,
        getOppositeVariationPlacement(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        getOppositePlacement(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [
            top,
            bottom
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) mainVariationSide = getOppositePlacement(mainVariationSide);
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases \u2013 research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
var flip$1 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: [
        "offset"
    ],
    data: {
        _skip: false
    }
};
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [
        left,
        top
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === "function" ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        left,
        right
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var offset$1 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: [
        "popperOffsets"
    ],
    fn: offset
};
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [
        left,
        right
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!contains(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
var arrow$1 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect,
    requires: [
        "popperOffsets"
    ],
    requiresIfExists: [
        "preventOverflow"
    ]
};
const toInt = (x)=>parseInt(x, 10);
function usePopper({ arrowPadding , emit , locked , offsetDistance , offsetSkid , placement , popperNode , triggerNode  }) {
    const state = (0, _vue.reactive)({
        isOpen: false,
        popperInstance: null
    }); // Enable or disable event listeners to optimize performance.
    const setPopperEventListeners = (enabled)=>{
        var _state$popperInstance;
        (_state$popperInstance = state.popperInstance) === null || _state$popperInstance === void 0 || _state$popperInstance.setOptions((options)=>({
                ...options,
                modifiers: [
                    ...options.modifiers,
                    {
                        name: "eventListeners",
                        enabled
                    }
                ]
            }));
    };
    const enablePopperEventListeners = ()=>setPopperEventListeners(true);
    const disablePopperEventListeners = ()=>setPopperEventListeners(false);
    const close = ()=>{
        if (!state.isOpen) return;
        state.isOpen = false;
        emit("close:popper");
    };
    const open = ()=>{
        if (state.isOpen) return;
        state.isOpen = true;
        emit("open:popper");
    }; // When isOpen or placement change
    (0, _vue.watch)([
        ()=>state.isOpen,
        placement
    ], async ([isOpen])=>{
        if (isOpen) {
            await initializePopper();
            enablePopperEventListeners();
        } else disablePopperEventListeners();
    });
    const initializePopper = async ()=>{
        await (0, _vue.nextTick)();
        state.popperInstance = createPopper(triggerNode.value, popperNode.value, {
            placement: placement.value,
            modifiers: [
                preventOverflow$1,
                flip$1,
                {
                    name: "flip",
                    enabled: !locked.value
                },
                arrow$1,
                {
                    name: "arrow",
                    options: {
                        padding: toInt(arrowPadding.value)
                    }
                },
                offset$1,
                {
                    name: "offset",
                    options: {
                        offset: [
                            toInt(offsetSkid.value),
                            toInt(offsetDistance.value)
                        ]
                    }
                }
            ]
        }); // Update its position
        state.popperInstance.update();
    };
    (0, _vue.onBeforeUnmount)(()=>{
        var _state$popperInstance2;
        (_state$popperInstance2 = state.popperInstance) === null || _state$popperInstance2 === void 0 || _state$popperInstance2.destroy();
    });
    return {
        ...(0, _vue.toRefs)(state),
        open,
        close
    };
}
const _hoisted_1$1 = {
    id: "arrow",
    "data-popper-arrow": ""
};
function render(_ctx, _cache) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1$1);
}
function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;
    if (!css || typeof document === "undefined") return;
    var head = document.head || document.getElementsByTagName("head")[0];
    var style = document.createElement("style");
    style.type = "text/css";
    if (insertAt === "top") {
        if (head.firstChild) head.insertBefore(style, head.firstChild);
        else head.appendChild(style);
    } else head.appendChild(style);
    if (style.styleSheet) style.styleSheet.cssText = css;
    else style.appendChild(document.createTextNode(css));
}
var css_248z$1 = '\n#arrow[data-v-20b7fd4a],\n  #arrow[data-v-20b7fd4a]::before {\n    transition: background 250ms ease-in-out;\n    position: absolute;\n    width: calc(10px - var(--popper-theme-border-width, 0px));\n    height: calc(10px - var(--popper-theme-border-width, 0px));\n    box-sizing: border-box;\n    background: var(--popper-theme-background-color);\n}\n#arrow[data-v-20b7fd4a] {\n    visibility: hidden;\n}\n#arrow[data-v-20b7fd4a]::before {\n    visibility: visible;\n    content: "";\n    transform: rotate(45deg);\n}\n\n  /* Top arrow */\n.popper[data-popper-placement^="top"] > #arrow[data-v-20b7fd4a] {\n    bottom: -5px;\n}\n.popper[data-popper-placement^="top"] > #arrow[data-v-20b7fd4a]::before {\n    border-right: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n    border-bottom: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n}\n\n  /* Bottom arrow */\n.popper[data-popper-placement^="bottom"] > #arrow[data-v-20b7fd4a] {\n    top: -5px;\n}\n.popper[data-popper-placement^="bottom"] > #arrow[data-v-20b7fd4a]::before {\n    border-left: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n    border-top: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n}\n\n  /* Left arrow */\n.popper[data-popper-placement^="left"] > #arrow[data-v-20b7fd4a] {\n    right: -5px;\n}\n.popper[data-popper-placement^="left"] > #arrow[data-v-20b7fd4a]::before {\n    border-right: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n    border-top: var(--popper-theme-border-width)\n      var(--popper-theme-border-style) var(--popper-theme-border-color);\n}\n\n  /* Right arrow */\n.popper[data-popper-placement^="right"] > #arrow[data-v-20b7fd4a] {\n    left: -5px;\n}\n';
styleInject(css_248z$1);
const script$1 = {};
script$1.render = render;
script$1.__scopeId = "data-v-20b7fd4a";
var Arrow = script$1;
const _hoisted_1 = [
    "onKeyup"
];
var script = {
    props: {
        /**
     * Preferred placement (the "auto" placements will choose the side with most space.)
     */ placement: {
            type: String,
            default: "bottom",
            validator: function(value) {
                return [
                    "auto",
                    "auto-start",
                    "auto-end",
                    "top",
                    "top-start",
                    "top-end",
                    "bottom",
                    "bottom-start",
                    "bottom-end",
                    "right",
                    "right-start",
                    "right-end",
                    "left",
                    "left-start",
                    "left-end"
                ].includes(value);
            }
        },
        /**
     * Disables automatically closing the popover when the user clicks away from it
     */ disableClickAway: {
            type: Boolean,
            default: false
        },
        /**
     * Offset in pixels along the trigger element
     */ offsetSkid: {
            type: String,
            default: "0"
        },
        /**
     * Offset in pixels away from the trigger element
     */ offsetDistance: {
            type: String,
            default: "12"
        },
        /**
     * Trigger the popper on hover
     */ hover: {
            type: Boolean,
            default: false
        },
        /**
     * Manually open/close the Popper, other events are ignored if this prop is set
     */ show: {
            type: Boolean,
            default: null
        },
        /**
     * Disables the Popper. If it was already open, it will be closed.
     */ disabled: {
            type: Boolean,
            default: false
        },
        /**
     * Open the Popper after a delay (ms).
     */ openDelay: {
            type: [
                Number,
                String
            ],
            default: 0
        },
        /**
     * Close the Popper after a delay (ms).
     */ closeDelay: {
            type: [
                Number,
                String
            ],
            default: 0
        },
        /**
     * The z-index of the Popper.
     */ zIndex: {
            type: [
                Number,
                String
            ],
            default: 9999
        },
        /**
     * Display an arrow on the popper
     */ arrow: {
            type: Boolean,
            default: false
        },
        /**
     * Stop arrow from reaching the edge of the popper
     */ arrowPadding: {
            type: String,
            default: "0"
        },
        /**
     * If the Popper should be interactive, it will close when clicked/hovered if false
     */ interactive: {
            type: Boolean,
            default: true
        },
        /**
     * Lock the Popper into place, it will not flip dynamically when it runs out of space if true
     */ locked: {
            type: Boolean,
            default: false
        },
        /**
     * If the content is just a simple string, it can be passed in as a prop
     */ content: {
            type: String,
            default: null
        }
    },
    emits: [
        "open:popper",
        "close:popper"
    ],
    setup (__props, { emit  }) {
        const props = __props;
        (0, _vue.useCssVars)((_ctx)=>({
                "c81fc0a4": __props.zIndex
            }));
        const slots = (0, _vue.useSlots)();
        const popperContainerNode = (0, _vue.ref)(null);
        const popperNode = (0, _vue.ref)(null);
        const triggerNode = (0, _vue.ref)(null);
        const modifiedIsOpen = (0, _vue.ref)(false);
        (0, _vue.onMounted)(()=>{
            const children = slots.default();
            if (children && children.length > 1) return console.error(`[Popper]: The <Popper> component expects only one child element at its root. You passed ${children.length} child nodes.`);
        });
        const { arrowPadding , closeDelay , content , disableClickAway , disabled , interactive , locked , offsetDistance , offsetSkid , openDelay , placement , show  } = (0, _vue.toRefs)(props);
        const { isOpen , open , close  } = usePopper({
            arrowPadding,
            emit,
            locked,
            offsetDistance,
            offsetSkid,
            placement,
            popperNode,
            triggerNode
        });
        const { hasContent  } = useContent(slots, popperNode, content);
        const manualMode = (0, _vue.computed)(()=>show.value !== null);
        const invalid = (0, _vue.computed)(()=>disabled.value || !hasContent.value);
        const shouldShowPopper = (0, _vue.computed)(()=>isOpen.value && !invalid.value);
        const enableClickAway = (0, _vue.computed)(()=>!disableClickAway.value && !manualMode.value); // Add an invisible border to keep the Popper open when hovering from the trigger into it
        const interactiveStyle = (0, _vue.computed)(()=>interactive.value ? `border: ${offsetDistance.value}px solid transparent; margin: -${offsetDistance.value}px;` : null);
        const openPopperDebounce = debounce_1.debounce(open, openDelay.value);
        const closePopperDebounce = debounce_1.debounce(close, closeDelay.value);
        const openPopper = async ()=>{
            if (invalid.value || manualMode.value) return;
            closePopperDebounce.clear();
            openPopperDebounce();
        };
        const closePopper = async ()=>{
            if (manualMode.value) return;
            openPopperDebounce.clear();
            closePopperDebounce();
        };
        const togglePopper = ()=>{
            isOpen.value ? closePopper() : openPopper();
        };
        /**
     * If Popper is open, we automatically close it if it becomes
     * disabled or without content.
     */ (0, _vue.watch)([
            hasContent,
            disabled
        ], ([hasContent, disabled])=>{
            if (isOpen.value && (!hasContent || disabled)) close();
        });
        /**
     * In order to eliminate flickering or visibly empty Poppers due to
     * the transition when using the isOpen slot property, we need to return a
     * separate debounced value based on isOpen.
     */ (0, _vue.watch)(isOpen, (isOpen)=>{
            if (isOpen) modifiedIsOpen.value = true;
            else debounce_1.debounce(()=>{
                modifiedIsOpen.value = false;
            }, 200);
        });
        /**
     * Watch for manual mode.
     */ (0, _vue.watchEffect)(()=>{
            if (manualMode.value) show.value ? openPopperDebounce() : closePopperDebounce();
        });
        /**
     * Use click away if it should be enabled.
     */ (0, _vue.watchEffect)(()=>{
            if (enableClickAway.value) useClickAway(popperContainerNode, closePopper);
        });
        return (_ctx, _cache)=>{
            return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
                class: "inline-block",
                style: (0, _vue.normalizeStyle)((0, _vue.unref)(interactiveStyle)),
                onMouseleave: _cache[2] || (_cache[2] = ($event)=>__props.hover && closePopper()),
                ref: (_value, _refs)=>{
                    _refs["popperContainerNode"] = _value;
                    popperContainerNode.value = _value;
                }
            }, [
                (0, _vue.createElementVNode)("div", {
                    ref: (_value, _refs)=>{
                        _refs["triggerNode"] = _value;
                        triggerNode.value = _value;
                    },
                    onMouseover: _cache[0] || (_cache[0] = ($event)=>__props.hover && openPopper()),
                    onClick: togglePopper,
                    onFocus: openPopper,
                    onKeyup: (0, _vue.withKeys)(closePopper, [
                        "esc"
                    ])
                }, [
                    (0, _vue.renderSlot)(_ctx.$slots, "default")
                ], 40, _hoisted_1),
                (0, _vue.createVNode)((0, _vue.Transition), {
                    name: "fade"
                }, {
                    default: (0, _vue.withCtx)(()=>[
                            (0, _vue.withDirectives)((0, _vue.createElementVNode)("div", {
                                onClick: _cache[1] || (_cache[1] = ($event)=>!(0, _vue.unref)(interactive) && closePopper()),
                                class: "popper",
                                ref: (_value, _refs)=>{
                                    _refs["popperNode"] = _value;
                                    popperNode.value = _value;
                                }
                            }, [
                                (0, _vue.renderSlot)(_ctx.$slots, "content", {
                                    close: (0, _vue.unref)(close),
                                    isOpen: modifiedIsOpen.value
                                }, ()=>[
                                        (0, _vue.createTextVNode)((0, _vue.toDisplayString)((0, _vue.unref)(content)), 1)
                                    ]),
                                __props.arrow ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(Arrow, {
                                    key: 0
                                })) : (0, _vue.createCommentVNode)("", true)
                            ], 512), [
                                [
                                    (0, _vue.vShow),
                                    (0, _vue.unref)(shouldShowPopper)
                                ]
                            ])
                        ]),
                    _: 3
                })
            ], 36);
        };
    }
};
var css_248z = "\n.inline-block[data-v-5784ed69] {\n    display: inline-block;\n}\n.popper[data-v-5784ed69] {\n    transition: background 250ms ease-in-out;\n    background: var(--popper-theme-background-color);\n    padding: var(--popper-theme-padding);\n    color: var(--popper-theme-text-color);\n    border-radius: var(--popper-theme-border-radius);\n    border-width: var(--popper-theme-border-width);\n    border-style: var(--popper-theme-border-style);\n    border-color: var(--popper-theme-border-color);\n    box-shadow: var(--popper-theme-box-shadow);\n    z-index: var(--c81fc0a4);\n}\n.popper[data-v-5784ed69]:hover,\n  .popper:hover > #arrow[data-v-5784ed69]::before {\n    background: var(--popper-theme-background-color-hover);\n}\n.inline-block[data-v-5784ed69] {\n    display: inline-block;\n}\n.fade-enter-active[data-v-5784ed69],\n  .fade-leave-active[data-v-5784ed69] {\n    transition: opacity 0.2s ease;\n}\n.fade-enter-from[data-v-5784ed69],\n  .fade-leave-to[data-v-5784ed69] {\n    opacity: 0;\n}\n";
styleInject(css_248z);
script.__scopeId = "data-v-5784ed69";
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),
var entry_esm = /*#__PURE__*/ (()=>{
    // Get component instance
    const installable = script; // Attach install function executed by Vue.use()
    installable.install = (app)=>{
        app.component("Popper", installable);
    };
    return installable;
})(); // It's possible to expose named exports when writing components that can

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3COT6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("e7f432b5122ad7b2");
    if (script.__esModule) script = script.default;
    script.render = require("d749e7ad50c73f79").render;
    script.__cssModules = require("e55089ac0531806f").default;
    require("e65c4942d1349935").default(script);
    script.__scopeId = "data-v-c36ef3";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/InteractiveIcon/InteractiveIcon.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "c36ef3-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("c36ef3-hmr", script)) __VUE_HMR_RUNTIME__.reload("c36ef3-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"e7f432b5122ad7b2":"4bwY0","d749e7ad50c73f79":"bpEe2","e55089ac0531806f":"9L6d4","e65c4942d1349935":"2BL3b","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"4bwY0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _core = require("@vueuse/core");
exports.default = {
    __name: "InteractiveIcon",
    props: {
        type: {
            type: String,
            default: ""
        },
        disable: {
            type: String,
            default: ""
        },
        hoverDelay: {
            type: Number,
            default: 0
        },
        clickDelay: {
            type: Number,
            default: 0
        },
        label: {
            type: String,
            default: ""
        },
        size: {
            type: Number,
            default: 24
        },
        // value 0 means do not handle hover state
        // value 1 implies control hover state as a normal state
        // value 2 implies control hover state as an active state
        hoverState: {
            type: Number,
            default: 0
        }
    },
    setup (__props, { expose: __expose  }) {
        __expose();
        const props = __props;
        const ICON_STATE = {
            DEFAULT: "default",
            HOVER: "hover",
            CLICK: "click",
            DISABLE: "disable"
        };
        const node = (0, _vue.ref)(null);
        const isHovered = (0, _vue.ref)(false);
        const isClicked = (0, _vue.ref)(false);
        const delayHover = (0, _core.useElementHover)(node);
        const { pressed: delayClick  } = (0, _core.useMousePressed)({
            target: node
        });
        const state = (0, _vue.computed)(()=>{
            if (props.disable) return ICON_STATE.DISABLE;
            if (isClicked.value) return ICON_STATE.CLICK;
            if (isHovered.value) return ICON_STATE.HOVER;
            return ICON_STATE.DEFAULT;
        });
        const iconClassName = (0, _vue.computed)(()=>{
            if (!props.hoverState) return `img-${props.type}--${state.value}`;
            if (props.hoverState === 2) return `img-${props.type}--hover`;
            return `img-${props.type}--default`;
        });
        let hoverTimer = null;
        (0, _vue.watch)(delayHover, (currentState)=>{
            if (props.hoverState > 0) return;
            if (props.hoverDelay === 0) isHovered.value = currentState;
            else if (!currentState) hoverTimer = setTimeout(()=>isHovered.value = false, props.hoverDelay);
            else {
                clearTimeout(hoverTimer);
                isHovered.value = true;
            }
        });
        let clickTimer = null;
        (0, _vue.watch)(delayClick, (currentState)=>{
            if (props.hoverDelay === 0) isClicked.value = currentState;
            else if (!currentState) clickTimer = setTimeout(()=>isClicked.value = false, props.hoverDelay);
            else {
                clearTimeout(clickTimer);
                isClicked.value = true;
            }
        });
        const __returned__ = {
            ICON_STATE,
            node,
            isHovered,
            isClicked,
            delayHover,
            delayClick,
            props,
            state,
            iconClassName,
            get hoverTimer () {
                return hoverTimer;
            },
            set hoverTimer (v){
                hoverTimer = v;
            },
            get clickTimer () {
                return clickTimer;
            },
            set clickTimer (v){
                clickTimer = v;
            },
            ref: (0, _vue.ref),
            computed: (0, _vue.computed),
            watch: (0, _vue.watch),
            get useMousePressed () {
                return 0, _core.useMousePressed;
            },
            get useElementHover () {
                return 0, _core.useElementHover;
            }
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"vue":"dmrjI","@vueuse/core":"fa5y9","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"fa5y9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultMagicKeysAliasMap", ()=>DefaultMagicKeysAliasMap);
parcelHelpers.export(exports, "StorageSerializers", ()=>StorageSerializers);
parcelHelpers.export(exports, "TransitionPresets", ()=>TransitionPresets);
parcelHelpers.export(exports, "asyncComputed", ()=>computedAsync);
parcelHelpers.export(exports, "breakpointsAntDesign", ()=>breakpointsAntDesign);
parcelHelpers.export(exports, "breakpointsBootstrapV5", ()=>breakpointsBootstrapV5);
parcelHelpers.export(exports, "breakpointsMasterCss", ()=>breakpointsMasterCss);
parcelHelpers.export(exports, "breakpointsPrimeFlex", ()=>breakpointsPrimeFlex);
parcelHelpers.export(exports, "breakpointsQuasar", ()=>breakpointsQuasar);
parcelHelpers.export(exports, "breakpointsSematic", ()=>breakpointsSematic);
parcelHelpers.export(exports, "breakpointsTailwind", ()=>breakpointsTailwind);
parcelHelpers.export(exports, "breakpointsVuetify", ()=>breakpointsVuetify);
parcelHelpers.export(exports, "breakpointsVuetifyV2", ()=>breakpointsVuetifyV2);
parcelHelpers.export(exports, "breakpointsVuetifyV3", ()=>breakpointsVuetifyV3);
parcelHelpers.export(exports, "cloneFnJSON", ()=>cloneFnJSON);
parcelHelpers.export(exports, "computedAsync", ()=>computedAsync);
parcelHelpers.export(exports, "computedInject", ()=>computedInject);
parcelHelpers.export(exports, "createFetch", ()=>createFetch);
parcelHelpers.export(exports, "createReusableTemplate", ()=>createReusableTemplate);
parcelHelpers.export(exports, "createTemplatePromise", ()=>createTemplatePromise);
parcelHelpers.export(exports, "createUnrefFn", ()=>createUnrefFn);
parcelHelpers.export(exports, "customStorageEventName", ()=>customStorageEventName);
parcelHelpers.export(exports, "defaultDocument", ()=>defaultDocument);
parcelHelpers.export(exports, "defaultLocation", ()=>defaultLocation);
parcelHelpers.export(exports, "defaultNavigator", ()=>defaultNavigator);
parcelHelpers.export(exports, "defaultWindow", ()=>defaultWindow);
parcelHelpers.export(exports, "executeTransition", ()=>executeTransition);
parcelHelpers.export(exports, "formatTimeAgo", ()=>formatTimeAgo);
parcelHelpers.export(exports, "getSSRHandler", ()=>getSSRHandler);
parcelHelpers.export(exports, "mapGamepadToXbox360Controller", ()=>mapGamepadToXbox360Controller);
parcelHelpers.export(exports, "onClickOutside", ()=>onClickOutside);
parcelHelpers.export(exports, "onKeyDown", ()=>onKeyDown);
parcelHelpers.export(exports, "onKeyPressed", ()=>onKeyPressed);
parcelHelpers.export(exports, "onKeyStroke", ()=>onKeyStroke);
parcelHelpers.export(exports, "onKeyUp", ()=>onKeyUp);
parcelHelpers.export(exports, "onLongPress", ()=>onLongPress);
parcelHelpers.export(exports, "onStartTyping", ()=>onStartTyping);
parcelHelpers.export(exports, "setSSRHandler", ()=>setSSRHandler);
parcelHelpers.export(exports, "templateRef", ()=>templateRef);
parcelHelpers.export(exports, "unrefElement", ()=>unrefElement);
parcelHelpers.export(exports, "useActiveElement", ()=>useActiveElement);
parcelHelpers.export(exports, "useAnimate", ()=>useAnimate);
parcelHelpers.export(exports, "useAsyncQueue", ()=>useAsyncQueue);
parcelHelpers.export(exports, "useAsyncState", ()=>useAsyncState);
parcelHelpers.export(exports, "useBase64", ()=>useBase64);
parcelHelpers.export(exports, "useBattery", ()=>useBattery);
parcelHelpers.export(exports, "useBluetooth", ()=>useBluetooth);
parcelHelpers.export(exports, "useBreakpoints", ()=>useBreakpoints);
parcelHelpers.export(exports, "useBroadcastChannel", ()=>useBroadcastChannel);
parcelHelpers.export(exports, "useBrowserLocation", ()=>useBrowserLocation);
parcelHelpers.export(exports, "useCached", ()=>useCached);
parcelHelpers.export(exports, "useClipboard", ()=>useClipboard);
parcelHelpers.export(exports, "useClipboardItems", ()=>useClipboardItems);
parcelHelpers.export(exports, "useCloned", ()=>useCloned);
parcelHelpers.export(exports, "useColorMode", ()=>useColorMode);
parcelHelpers.export(exports, "useConfirmDialog", ()=>useConfirmDialog);
parcelHelpers.export(exports, "useCssVar", ()=>useCssVar);
parcelHelpers.export(exports, "useCurrentElement", ()=>useCurrentElement);
parcelHelpers.export(exports, "useCycleList", ()=>useCycleList);
parcelHelpers.export(exports, "useDark", ()=>useDark);
parcelHelpers.export(exports, "useDebouncedRefHistory", ()=>useDebouncedRefHistory);
parcelHelpers.export(exports, "useDeviceMotion", ()=>useDeviceMotion);
parcelHelpers.export(exports, "useDeviceOrientation", ()=>useDeviceOrientation);
parcelHelpers.export(exports, "useDevicePixelRatio", ()=>useDevicePixelRatio);
parcelHelpers.export(exports, "useDevicesList", ()=>useDevicesList);
parcelHelpers.export(exports, "useDisplayMedia", ()=>useDisplayMedia);
parcelHelpers.export(exports, "useDocumentVisibility", ()=>useDocumentVisibility);
parcelHelpers.export(exports, "useDraggable", ()=>useDraggable);
parcelHelpers.export(exports, "useDropZone", ()=>useDropZone);
parcelHelpers.export(exports, "useElementBounding", ()=>useElementBounding);
parcelHelpers.export(exports, "useElementByPoint", ()=>useElementByPoint);
parcelHelpers.export(exports, "useElementHover", ()=>useElementHover);
parcelHelpers.export(exports, "useElementSize", ()=>useElementSize);
parcelHelpers.export(exports, "useElementVisibility", ()=>useElementVisibility);
parcelHelpers.export(exports, "useEventBus", ()=>useEventBus);
parcelHelpers.export(exports, "useEventListener", ()=>useEventListener);
parcelHelpers.export(exports, "useEventSource", ()=>useEventSource);
parcelHelpers.export(exports, "useEyeDropper", ()=>useEyeDropper);
parcelHelpers.export(exports, "useFavicon", ()=>useFavicon);
parcelHelpers.export(exports, "useFetch", ()=>useFetch);
parcelHelpers.export(exports, "useFileDialog", ()=>useFileDialog);
parcelHelpers.export(exports, "useFileSystemAccess", ()=>useFileSystemAccess);
parcelHelpers.export(exports, "useFocus", ()=>useFocus);
parcelHelpers.export(exports, "useFocusWithin", ()=>useFocusWithin);
parcelHelpers.export(exports, "useFps", ()=>useFps);
parcelHelpers.export(exports, "useFullscreen", ()=>useFullscreen);
parcelHelpers.export(exports, "useGamepad", ()=>useGamepad);
parcelHelpers.export(exports, "useGeolocation", ()=>useGeolocation);
parcelHelpers.export(exports, "useIdle", ()=>useIdle);
parcelHelpers.export(exports, "useImage", ()=>useImage);
parcelHelpers.export(exports, "useInfiniteScroll", ()=>useInfiniteScroll);
parcelHelpers.export(exports, "useIntersectionObserver", ()=>useIntersectionObserver);
parcelHelpers.export(exports, "useKeyModifier", ()=>useKeyModifier);
parcelHelpers.export(exports, "useLocalStorage", ()=>useLocalStorage);
parcelHelpers.export(exports, "useMagicKeys", ()=>useMagicKeys);
parcelHelpers.export(exports, "useManualRefHistory", ()=>useManualRefHistory);
parcelHelpers.export(exports, "useMediaControls", ()=>useMediaControls);
parcelHelpers.export(exports, "useMediaQuery", ()=>useMediaQuery);
parcelHelpers.export(exports, "useMemoize", ()=>useMemoize);
parcelHelpers.export(exports, "useMemory", ()=>useMemory);
parcelHelpers.export(exports, "useMounted", ()=>useMounted);
parcelHelpers.export(exports, "useMouse", ()=>useMouse);
parcelHelpers.export(exports, "useMouseInElement", ()=>useMouseInElement);
parcelHelpers.export(exports, "useMousePressed", ()=>useMousePressed);
parcelHelpers.export(exports, "useMutationObserver", ()=>useMutationObserver);
parcelHelpers.export(exports, "useNavigatorLanguage", ()=>useNavigatorLanguage);
parcelHelpers.export(exports, "useNetwork", ()=>useNetwork);
parcelHelpers.export(exports, "useNow", ()=>useNow);
parcelHelpers.export(exports, "useObjectUrl", ()=>useObjectUrl);
parcelHelpers.export(exports, "useOffsetPagination", ()=>useOffsetPagination);
parcelHelpers.export(exports, "useOnline", ()=>useOnline);
parcelHelpers.export(exports, "usePageLeave", ()=>usePageLeave);
parcelHelpers.export(exports, "useParallax", ()=>useParallax);
parcelHelpers.export(exports, "useParentElement", ()=>useParentElement);
parcelHelpers.export(exports, "usePerformanceObserver", ()=>usePerformanceObserver);
parcelHelpers.export(exports, "usePermission", ()=>usePermission);
parcelHelpers.export(exports, "usePointer", ()=>usePointer);
parcelHelpers.export(exports, "usePointerLock", ()=>usePointerLock);
parcelHelpers.export(exports, "usePointerSwipe", ()=>usePointerSwipe);
parcelHelpers.export(exports, "usePreferredColorScheme", ()=>usePreferredColorScheme);
parcelHelpers.export(exports, "usePreferredContrast", ()=>usePreferredContrast);
parcelHelpers.export(exports, "usePreferredDark", ()=>usePreferredDark);
parcelHelpers.export(exports, "usePreferredLanguages", ()=>usePreferredLanguages);
parcelHelpers.export(exports, "usePreferredReducedMotion", ()=>usePreferredReducedMotion);
parcelHelpers.export(exports, "usePrevious", ()=>usePrevious);
parcelHelpers.export(exports, "useRafFn", ()=>useRafFn);
parcelHelpers.export(exports, "useRefHistory", ()=>useRefHistory);
parcelHelpers.export(exports, "useResizeObserver", ()=>useResizeObserver);
parcelHelpers.export(exports, "useScreenOrientation", ()=>useScreenOrientation);
parcelHelpers.export(exports, "useScreenSafeArea", ()=>useScreenSafeArea);
parcelHelpers.export(exports, "useScriptTag", ()=>useScriptTag);
parcelHelpers.export(exports, "useScroll", ()=>useScroll);
parcelHelpers.export(exports, "useScrollLock", ()=>useScrollLock);
parcelHelpers.export(exports, "useSessionStorage", ()=>useSessionStorage);
parcelHelpers.export(exports, "useShare", ()=>useShare);
parcelHelpers.export(exports, "useSorted", ()=>useSorted);
parcelHelpers.export(exports, "useSpeechRecognition", ()=>useSpeechRecognition);
parcelHelpers.export(exports, "useSpeechSynthesis", ()=>useSpeechSynthesis);
parcelHelpers.export(exports, "useStepper", ()=>useStepper);
parcelHelpers.export(exports, "useStorage", ()=>useStorage);
parcelHelpers.export(exports, "useStorageAsync", ()=>useStorageAsync);
parcelHelpers.export(exports, "useStyleTag", ()=>useStyleTag);
parcelHelpers.export(exports, "useSupported", ()=>useSupported);
parcelHelpers.export(exports, "useSwipe", ()=>useSwipe);
parcelHelpers.export(exports, "useTemplateRefsList", ()=>useTemplateRefsList);
parcelHelpers.export(exports, "useTextDirection", ()=>useTextDirection);
parcelHelpers.export(exports, "useTextSelection", ()=>useTextSelection);
parcelHelpers.export(exports, "useTextareaAutosize", ()=>useTextareaAutosize);
parcelHelpers.export(exports, "useThrottledRefHistory", ()=>useThrottledRefHistory);
parcelHelpers.export(exports, "useTimeAgo", ()=>useTimeAgo);
parcelHelpers.export(exports, "useTimeoutPoll", ()=>useTimeoutPoll);
parcelHelpers.export(exports, "useTimestamp", ()=>useTimestamp);
parcelHelpers.export(exports, "useTitle", ()=>useTitle);
parcelHelpers.export(exports, "useTransition", ()=>useTransition);
parcelHelpers.export(exports, "useUrlSearchParams", ()=>useUrlSearchParams);
parcelHelpers.export(exports, "useUserMedia", ()=>useUserMedia);
parcelHelpers.export(exports, "useVModel", ()=>useVModel);
parcelHelpers.export(exports, "useVModels", ()=>useVModels);
parcelHelpers.export(exports, "useVibrate", ()=>useVibrate);
parcelHelpers.export(exports, "useVirtualList", ()=>useVirtualList);
parcelHelpers.export(exports, "useWakeLock", ()=>useWakeLock);
parcelHelpers.export(exports, "useWebNotification", ()=>useWebNotification);
parcelHelpers.export(exports, "useWebSocket", ()=>useWebSocket);
parcelHelpers.export(exports, "useWebWorker", ()=>useWebWorker);
parcelHelpers.export(exports, "useWebWorkerFn", ()=>useWebWorkerFn);
parcelHelpers.export(exports, "useWindowFocus", ()=>useWindowFocus);
parcelHelpers.export(exports, "useWindowScroll", ()=>useWindowScroll);
parcelHelpers.export(exports, "useWindowSize", ()=>useWindowSize);
var _shared = require("@vueuse/shared");
parcelHelpers.exportAll(_shared, exports);
var _vueDemi = require("vue-demi");
var global = arguments[3];
function computedAsync(evaluationCallback, initialState, optionsOrRef) {
    let options;
    if ((0, _vueDemi.isRef)(optionsOrRef)) options = {
        evaluating: optionsOrRef
    };
    else options = optionsOrRef || {};
    const { lazy =false , evaluating , shallow =true , onError =(0, _shared.noop)  } = options;
    const started = (0, _vueDemi.ref)(!lazy);
    const current = shallow ? (0, _vueDemi.shallowRef)(initialState) : (0, _vueDemi.ref)(initialState);
    let counter = 0;
    (0, _vueDemi.watchEffect)(async (onInvalidate)=>{
        if (!started.value) return;
        counter++;
        const counterAtBeginning = counter;
        let hasFinished = false;
        if (evaluating) Promise.resolve().then(()=>{
            evaluating.value = true;
        });
        try {
            const result = await evaluationCallback((cancelCallback)=>{
                onInvalidate(()=>{
                    if (evaluating) evaluating.value = false;
                    if (!hasFinished) cancelCallback();
                });
            });
            if (counterAtBeginning === counter) current.value = result;
        } catch (e) {
            onError(e);
        } finally{
            if (evaluating && counterAtBeginning === counter) evaluating.value = false;
            hasFinished = true;
        }
    });
    if (lazy) return (0, _vueDemi.computed)(()=>{
        started.value = true;
        return current.value;
    });
    else return current;
}
function computedInject(key, options, defaultSource, treatDefaultAsFactory) {
    let source = (0, _vueDemi.inject)(key);
    if (defaultSource) source = (0, _vueDemi.inject)(key, defaultSource);
    if (treatDefaultAsFactory) source = (0, _vueDemi.inject)(key, defaultSource, treatDefaultAsFactory);
    if (typeof options === "function") return (0, _vueDemi.computed)((ctx)=>options(source, ctx));
    else return (0, _vueDemi.computed)({
        get: (ctx)=>options.get(source, ctx),
        set: options.set
    });
}
function createReusableTemplate(options = {}) {
    if (!(0, _vueDemi.isVue3) && !(0, _vueDemi.version).startsWith("2.7.")) throw new Error("[VueUse] createReusableTemplate only works in Vue 2.7 or above.");
    const { inheritAttrs =true  } = options;
    const render = (0, _vueDemi.shallowRef)();
    const define = /* #__PURE__ */ (0, _vueDemi.defineComponent)({
        setup (_, { slots  }) {
            return ()=>{
                render.value = slots.default;
            };
        }
    });
    const reuse = /* #__PURE__ */ (0, _vueDemi.defineComponent)({
        inheritAttrs,
        setup (_, { attrs , slots  }) {
            return ()=>{
                var _a;
                if (!render.value && true) throw new Error("[VueUse] Failed to find the definition of reusable template");
                const vnode = (_a = render.value) == null ? void 0 : _a.call(render, {
                    ...keysToCamelKebabCase(attrs),
                    $slots: slots
                });
                return inheritAttrs && (vnode == null ? void 0 : vnode.length) === 1 ? vnode[0] : vnode;
            };
        }
    });
    return (0, _shared.makeDestructurable)({
        define,
        reuse
    }, [
        define,
        reuse
    ]);
}
function keysToCamelKebabCase(obj) {
    const newObj = {};
    for(const key in obj)newObj[(0, _shared.camelize)(key)] = obj[key];
    return newObj;
}
function createTemplatePromise(options = {}) {
    if (!(0, _vueDemi.isVue3)) throw new Error("[VueUse] createTemplatePromise only works in Vue 3 or above.");
    let index = 0;
    const instances = (0, _vueDemi.ref)([]);
    function create(...args) {
        const props = (0, _vueDemi.shallowReactive)({
            key: index++,
            args,
            promise: void 0,
            resolve: ()=>{},
            reject: ()=>{},
            isResolving: false,
            options
        });
        instances.value.push(props);
        props.promise = new Promise((_resolve, _reject)=>{
            props.resolve = (v)=>{
                props.isResolving = true;
                return _resolve(v);
            };
            props.reject = _reject;
        }).finally(()=>{
            props.promise = void 0;
            const index2 = instances.value.indexOf(props);
            if (index2 !== -1) instances.value.splice(index2, 1);
        });
        return props.promise;
    }
    function start(...args) {
        if (options.singleton && instances.value.length > 0) return instances.value[0].promise;
        return create(...args);
    }
    const component = /* #__PURE__ */ (0, _vueDemi.defineComponent)((_, { slots  })=>{
        const renderList = ()=>instances.value.map((props)=>{
                var _a;
                return (0, _vueDemi.h)((0, _vueDemi.Fragment), {
                    key: props.key
                }, (_a = slots.default) == null ? void 0 : _a.call(slots, props));
            });
        if (options.transition) return ()=>(0, _vueDemi.h)((0, _vueDemi.TransitionGroup), options.transition, renderList);
        return renderList;
    });
    component.start = start;
    return component;
}
function createUnrefFn(fn) {
    return function(...args) {
        return fn.apply(this, args.map((i)=>(0, _shared.toValue)(i)));
    };
}
function unrefElement(elRef) {
    var _a;
    const plain = (0, _shared.toValue)(elRef);
    return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;
}
const defaultWindow = (0, _shared.isClient) ? window : void 0;
const defaultDocument = (0, _shared.isClient) ? window.document : void 0;
const defaultNavigator = (0, _shared.isClient) ? window.navigator : void 0;
const defaultLocation = (0, _shared.isClient) ? window.location : void 0;
function useEventListener(...args) {
    let target;
    let events;
    let listeners;
    let options;
    if (typeof args[0] === "string" || Array.isArray(args[0])) {
        [events, listeners, options] = args;
        target = defaultWindow;
    } else [target, events, listeners, options] = args;
    if (!target) return 0, _shared.noop;
    if (!Array.isArray(events)) events = [
        events
    ];
    if (!Array.isArray(listeners)) listeners = [
        listeners
    ];
    const cleanups = [];
    const cleanup = ()=>{
        cleanups.forEach((fn)=>fn());
        cleanups.length = 0;
    };
    const register = (el, event, listener, options2)=>{
        el.addEventListener(event, listener, options2);
        return ()=>el.removeEventListener(event, listener, options2);
    };
    const stopWatch = (0, _vueDemi.watch)(()=>[
            unrefElement(target),
            (0, _shared.toValue)(options)
        ], ([el, options2])=>{
        cleanup();
        if (!el) return;
        const optionsClone = (0, _shared.isObject)(options2) ? {
            ...options2
        } : options2;
        cleanups.push(...events.flatMap((event)=>{
            return listeners.map((listener)=>register(el, event, listener, optionsClone));
        }));
    }, {
        immediate: true,
        flush: "post"
    });
    const stop = ()=>{
        stopWatch();
        cleanup();
    };
    (0, _shared.tryOnScopeDispose)(stop);
    return stop;
}
let _iOSWorkaround = false;
function onClickOutside(target, handler, options = {}) {
    const { window: window1 = defaultWindow , ignore =[] , capture =true , detectIframe =false  } = options;
    if (!window1) return 0, _shared.noop;
    if ((0, _shared.isIOS) && !_iOSWorkaround) {
        _iOSWorkaround = true;
        Array.from(window1.document.body.children).forEach((el)=>el.addEventListener("click", (0, _shared.noop)));
        window1.document.documentElement.addEventListener("click", (0, _shared.noop));
    }
    let shouldListen = true;
    const shouldIgnore = (event)=>{
        return ignore.some((target2)=>{
            if (typeof target2 === "string") return Array.from(window1.document.querySelectorAll(target2)).some((el)=>el === event.target || event.composedPath().includes(el));
            else {
                const el = unrefElement(target2);
                return el && (event.target === el || event.composedPath().includes(el));
            }
        });
    };
    const listener = (event)=>{
        const el = unrefElement(target);
        if (!el || el === event.target || event.composedPath().includes(el)) return;
        if (event.detail === 0) shouldListen = !shouldIgnore(event);
        if (!shouldListen) {
            shouldListen = true;
            return;
        }
        handler(event);
    };
    const cleanup = [
        useEventListener(window1, "click", listener, {
            passive: true,
            capture
        }),
        useEventListener(window1, "pointerdown", (e)=>{
            const el = unrefElement(target);
            shouldListen = !shouldIgnore(e) && !!(el && !e.composedPath().includes(el));
        }, {
            passive: true
        }),
        detectIframe && useEventListener(window1, "blur", (event)=>{
            setTimeout(()=>{
                var _a;
                const el = unrefElement(target);
                if (((_a = window1.document.activeElement) == null ? void 0 : _a.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(window1.document.activeElement))) handler(event);
            }, 0);
        })
    ].filter(Boolean);
    const stop = ()=>cleanup.forEach((fn)=>fn());
    return stop;
}
function createKeyPredicate(keyFilter) {
    if (typeof keyFilter === "function") return keyFilter;
    else if (typeof keyFilter === "string") return (event)=>event.key === keyFilter;
    else if (Array.isArray(keyFilter)) return (event)=>keyFilter.includes(event.key);
    return ()=>true;
}
function onKeyStroke(...args) {
    let key;
    let handler;
    let options = {};
    if (args.length === 3) {
        key = args[0];
        handler = args[1];
        options = args[2];
    } else if (args.length === 2) {
        if (typeof args[1] === "object") {
            key = true;
            handler = args[0];
            options = args[1];
        } else {
            key = args[0];
            handler = args[1];
        }
    } else {
        key = true;
        handler = args[0];
    }
    const { target =defaultWindow , eventName ="keydown" , passive =false , dedupe =false  } = options;
    const predicate = createKeyPredicate(key);
    const listener = (e)=>{
        if (e.repeat && (0, _shared.toValue)(dedupe)) return;
        if (predicate(e)) handler(e);
    };
    return useEventListener(target, eventName, listener, passive);
}
function onKeyDown(key, handler, options = {}) {
    return onKeyStroke(key, handler, {
        ...options,
        eventName: "keydown"
    });
}
function onKeyPressed(key, handler, options = {}) {
    return onKeyStroke(key, handler, {
        ...options,
        eventName: "keypress"
    });
}
function onKeyUp(key, handler, options = {}) {
    return onKeyStroke(key, handler, {
        ...options,
        eventName: "keyup"
    });
}
const DEFAULT_DELAY = 500;
const DEFAULT_THRESHOLD = 10;
function onLongPress(target, handler, options) {
    var _a, _b;
    const elementRef = (0, _vueDemi.computed)(()=>unrefElement(target));
    let timeout;
    let posStart;
    let startTimestamp;
    let hasLongPressed = false;
    function clear() {
        if (timeout) {
            clearTimeout(timeout);
            timeout = void 0;
        }
        posStart = void 0;
        startTimestamp = void 0;
        hasLongPressed = false;
    }
    function onRelease(ev) {
        var _a2, _b2, _c;
        const [_startTimestamp, _posStart, _hasLongPressed] = [
            startTimestamp,
            posStart,
            hasLongPressed
        ];
        clear();
        if (!(options == null ? void 0 : options.onMouseUp) || !_posStart || !_startTimestamp) return;
        if (((_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.self) && ev.target !== elementRef.value) return;
        if ((_b2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _b2.prevent) ev.preventDefault();
        if ((_c = options == null ? void 0 : options.modifiers) == null ? void 0 : _c.stop) ev.stopPropagation();
        const dx = ev.x - _posStart.x;
        const dy = ev.y - _posStart.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        options.onMouseUp(ev.timeStamp - _startTimestamp, distance, _hasLongPressed);
    }
    function onDown(ev) {
        var _a2, _b2, _c, _d;
        if (((_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.self) && ev.target !== elementRef.value) return;
        clear();
        if ((_b2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _b2.prevent) ev.preventDefault();
        if ((_c = options == null ? void 0 : options.modifiers) == null ? void 0 : _c.stop) ev.stopPropagation();
        posStart = {
            x: ev.x,
            y: ev.y
        };
        startTimestamp = ev.timeStamp;
        timeout = setTimeout(()=>{
            hasLongPressed = true;
            handler(ev);
        }, (_d = options == null ? void 0 : options.delay) != null ? _d : DEFAULT_DELAY);
    }
    function onMove(ev) {
        var _a2, _b2, _c, _d;
        if (((_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.self) && ev.target !== elementRef.value) return;
        if (!posStart || (options == null ? void 0 : options.distanceThreshold) === false) return;
        if ((_b2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _b2.prevent) ev.preventDefault();
        if ((_c = options == null ? void 0 : options.modifiers) == null ? void 0 : _c.stop) ev.stopPropagation();
        const dx = ev.x - posStart.x;
        const dy = ev.y - posStart.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance >= ((_d = options == null ? void 0 : options.distanceThreshold) != null ? _d : DEFAULT_THRESHOLD)) clear();
    }
    const listenerOptions = {
        capture: (_a = options == null ? void 0 : options.modifiers) == null ? void 0 : _a.capture,
        once: (_b = options == null ? void 0 : options.modifiers) == null ? void 0 : _b.once
    };
    const cleanup = [
        useEventListener(elementRef, "pointerdown", onDown, listenerOptions),
        useEventListener(elementRef, "pointermove", onMove, listenerOptions),
        useEventListener(elementRef, [
            "pointerup",
            "pointerleave"
        ], onRelease, listenerOptions)
    ];
    const stop = ()=>cleanup.forEach((fn)=>fn());
    return stop;
}
function isFocusedElementEditable() {
    const { activeElement , body  } = document;
    if (!activeElement) return false;
    if (activeElement === body) return false;
    switch(activeElement.tagName){
        case "INPUT":
        case "TEXTAREA":
            return true;
    }
    return activeElement.hasAttribute("contenteditable");
}
function isTypedCharValid({ keyCode , metaKey , ctrlKey , altKey  }) {
    if (metaKey || ctrlKey || altKey) return false;
    if (keyCode >= 48 && keyCode <= 57) return true;
    if (keyCode >= 65 && keyCode <= 90) return true;
    if (keyCode >= 97 && keyCode <= 122) return true;
    return false;
}
function onStartTyping(callback, options = {}) {
    const { document: document2 = defaultDocument  } = options;
    const keydown = (event)=>{
        !isFocusedElementEditable() && isTypedCharValid(event) && callback(event);
    };
    if (document2) useEventListener(document2, "keydown", keydown, {
        passive: true
    });
}
function templateRef(key, initialValue = null) {
    const instance = (0, _vueDemi.getCurrentInstance)();
    let _trigger = ()=>{};
    const element = (0, _vueDemi.customRef)((track, trigger)=>{
        _trigger = trigger;
        return {
            get () {
                var _a, _b;
                track();
                return (_b = (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.$refs[key]) != null ? _b : initialValue;
            },
            set () {}
        };
    });
    (0, _shared.tryOnMounted)(_trigger);
    (0, _vueDemi.onUpdated)(_trigger);
    return element;
}
function useMounted() {
    const isMounted = (0, _vueDemi.ref)(false);
    const instance = (0, _vueDemi.getCurrentInstance)();
    if (instance) (0, _vueDemi.onMounted)(()=>{
        isMounted.value = true;
    }, (0, _vueDemi.isVue2) ? void 0 : instance);
    return isMounted;
}
function useSupported(callback) {
    const isMounted = useMounted();
    return (0, _vueDemi.computed)(()=>{
        isMounted.value;
        return Boolean(callback());
    });
}
function useMutationObserver(target, callback, options = {}) {
    const { window: window1 = defaultWindow , ...mutationOptions } = options;
    let observer;
    const isSupported = useSupported(()=>window1 && "MutationObserver" in window1);
    const cleanup = ()=>{
        if (observer) {
            observer.disconnect();
            observer = void 0;
        }
    };
    const targets = (0, _vueDemi.computed)(()=>{
        const value = (0, _shared.toValue)(target);
        const items = (Array.isArray(value) ? value : [
            value
        ]).map(unrefElement).filter((0, _shared.notNullish));
        return new Set(items);
    });
    const stopWatch = (0, _vueDemi.watch)(()=>targets.value, (targets2)=>{
        cleanup();
        if (isSupported.value && targets2.size) {
            observer = new MutationObserver(callback);
            targets2.forEach((el)=>observer.observe(el, mutationOptions));
        }
    }, {
        immediate: true,
        flush: "post"
    });
    const takeRecords = ()=>{
        return observer == null ? void 0 : observer.takeRecords();
    };
    const stop = ()=>{
        cleanup();
        stopWatch();
    };
    (0, _shared.tryOnScopeDispose)(stop);
    return {
        isSupported,
        stop,
        takeRecords
    };
}
function useActiveElement(options = {}) {
    var _a;
    const { window: window1 = defaultWindow , deep =true , triggerOnRemoval =false  } = options;
    const document1 = (_a = options.document) != null ? _a : window1 == null ? void 0 : window1.document;
    const getDeepActiveElement = ()=>{
        var _a2;
        let element = document1 == null ? void 0 : document1.activeElement;
        if (deep) while(element == null ? void 0 : element.shadowRoot)element = (_a2 = element == null ? void 0 : element.shadowRoot) == null ? void 0 : _a2.activeElement;
        return element;
    };
    const activeElement = (0, _vueDemi.ref)();
    const trigger = ()=>{
        activeElement.value = getDeepActiveElement();
    };
    if (window1) {
        useEventListener(window1, "blur", (event)=>{
            if (event.relatedTarget !== null) return;
            trigger();
        }, true);
        useEventListener(window1, "focus", trigger, true);
    }
    if (triggerOnRemoval) useMutationObserver(document1, (mutations)=>{
        mutations.filter((m)=>m.removedNodes.length).map((n)=>Array.from(n.removedNodes)).flat().forEach((node)=>{
            if (node === activeElement.value) trigger();
        });
    }, {
        childList: true,
        subtree: true
    });
    trigger();
    return activeElement;
}
function useRafFn(fn, options = {}) {
    const { immediate =true , fpsLimit , window: window1 = defaultWindow  } = options;
    const isActive = (0, _vueDemi.ref)(false);
    const intervalLimit = fpsLimit ? 1e3 / fpsLimit : null;
    let previousFrameTimestamp = 0;
    let rafId = null;
    function loop(timestamp) {
        if (!isActive.value || !window1) return;
        if (!previousFrameTimestamp) previousFrameTimestamp = timestamp;
        const delta = timestamp - previousFrameTimestamp;
        if (intervalLimit && delta < intervalLimit) {
            rafId = window1.requestAnimationFrame(loop);
            return;
        }
        previousFrameTimestamp = timestamp;
        fn({
            delta,
            timestamp
        });
        rafId = window1.requestAnimationFrame(loop);
    }
    function resume() {
        if (!isActive.value && window1) {
            isActive.value = true;
            previousFrameTimestamp = 0;
            rafId = window1.requestAnimationFrame(loop);
        }
    }
    function pause() {
        isActive.value = false;
        if (rafId != null && window1) {
            window1.cancelAnimationFrame(rafId);
            rafId = null;
        }
    }
    if (immediate) resume();
    (0, _shared.tryOnScopeDispose)(pause);
    return {
        isActive: (0, _vueDemi.readonly)(isActive),
        pause,
        resume
    };
}
function useAnimate(target, keyframes, options) {
    let config;
    let animateOptions;
    if ((0, _shared.isObject)(options)) {
        config = options;
        animateOptions = (0, _shared.objectOmit)(options, [
            "window",
            "immediate",
            "commitStyles",
            "persist",
            "onReady",
            "onError"
        ]);
    } else {
        config = {
            duration: options
        };
        animateOptions = options;
    }
    const { window: window1 = defaultWindow , immediate =true , commitStyles , persist , playbackRate: _playbackRate = 1 , onReady , onError =(e)=>{
        console.error(e);
    }  } = config;
    const isSupported = useSupported(()=>window1 && HTMLElement && "animate" in HTMLElement.prototype);
    const animate = (0, _vueDemi.shallowRef)(void 0);
    const store = (0, _vueDemi.shallowReactive)({
        startTime: null,
        currentTime: null,
        timeline: null,
        playbackRate: _playbackRate,
        pending: false,
        playState: immediate ? "idle" : "paused",
        replaceState: "active"
    });
    const pending = (0, _vueDemi.computed)(()=>store.pending);
    const playState = (0, _vueDemi.computed)(()=>store.playState);
    const replaceState = (0, _vueDemi.computed)(()=>store.replaceState);
    const startTime = (0, _vueDemi.computed)({
        get () {
            return store.startTime;
        },
        set (value) {
            store.startTime = value;
            if (animate.value) animate.value.startTime = value;
        }
    });
    const currentTime = (0, _vueDemi.computed)({
        get () {
            return store.currentTime;
        },
        set (value) {
            store.currentTime = value;
            if (animate.value) {
                animate.value.currentTime = value;
                syncResume();
            }
        }
    });
    const timeline = (0, _vueDemi.computed)({
        get () {
            return store.timeline;
        },
        set (value) {
            store.timeline = value;
            if (animate.value) animate.value.timeline = value;
        }
    });
    const playbackRate = (0, _vueDemi.computed)({
        get () {
            return store.playbackRate;
        },
        set (value) {
            store.playbackRate = value;
            if (animate.value) animate.value.playbackRate = value;
        }
    });
    const play = ()=>{
        if (animate.value) try {
            animate.value.play();
            syncResume();
        } catch (e) {
            syncPause();
            onError(e);
        }
        else update();
    };
    const pause = ()=>{
        var _a;
        try {
            (_a = animate.value) == null || _a.pause();
            syncPause();
        } catch (e) {
            onError(e);
        }
    };
    const reverse = ()=>{
        var _a;
        !animate.value && update();
        try {
            (_a = animate.value) == null || _a.reverse();
            syncResume();
        } catch (e) {
            syncPause();
            onError(e);
        }
    };
    const finish = ()=>{
        var _a;
        try {
            (_a = animate.value) == null || _a.finish();
            syncPause();
        } catch (e) {
            onError(e);
        }
    };
    const cancel = ()=>{
        var _a;
        try {
            (_a = animate.value) == null || _a.cancel();
            syncPause();
        } catch (e) {
            onError(e);
        }
    };
    (0, _vueDemi.watch)(()=>unrefElement(target), (el)=>{
        el && update();
    });
    (0, _vueDemi.watch)(()=>keyframes, (value)=>{
        !animate.value && update();
        if (!unrefElement(target) && animate.value) animate.value.effect = new KeyframeEffect(unrefElement(target), (0, _shared.toValue)(value), animateOptions);
    }, {
        deep: true
    });
    (0, _shared.tryOnMounted)(()=>{
        (0, _vueDemi.nextTick)(()=>update(true));
    });
    (0, _shared.tryOnScopeDispose)(cancel);
    function update(init) {
        const el = unrefElement(target);
        if (!isSupported.value || !el) return;
        if (!animate.value) animate.value = el.animate((0, _shared.toValue)(keyframes), animateOptions);
        if (persist) animate.value.persist();
        if (_playbackRate !== 1) animate.value.playbackRate = _playbackRate;
        if (init && !immediate) animate.value.pause();
        else syncResume();
        onReady == null || onReady(animate.value);
    }
    useEventListener(animate, [
        "cancel",
        "finish",
        "remove"
    ], syncPause);
    useEventListener(animate, "finish", ()=>{
        var _a;
        if (commitStyles) (_a = animate.value) == null || _a.commitStyles();
    });
    const { resume: resumeRef , pause: pauseRef  } = useRafFn(()=>{
        if (!animate.value) return;
        store.pending = animate.value.pending;
        store.playState = animate.value.playState;
        store.replaceState = animate.value.replaceState;
        store.startTime = animate.value.startTime;
        store.currentTime = animate.value.currentTime;
        store.timeline = animate.value.timeline;
        store.playbackRate = animate.value.playbackRate;
    }, {
        immediate: false
    });
    function syncResume() {
        if (isSupported.value) resumeRef();
    }
    function syncPause() {
        if (isSupported.value && window1) window1.requestAnimationFrame(pauseRef);
    }
    return {
        isSupported,
        animate,
        // actions
        play,
        pause,
        reverse,
        finish,
        cancel,
        // state
        pending,
        playState,
        replaceState,
        startTime,
        currentTime,
        timeline,
        playbackRate
    };
}
function useAsyncQueue(tasks, options) {
    const { interrupt =true , onError =(0, _shared.noop) , onFinished =(0, _shared.noop) , signal  } = options || {};
    const promiseState = {
        aborted: "aborted",
        fulfilled: "fulfilled",
        pending: "pending",
        rejected: "rejected"
    };
    const initialResult = Array.from(Array.from({
        length: tasks.length
    }), ()=>({
            state: promiseState.pending,
            data: null
        }));
    const result = (0, _vueDemi.reactive)(initialResult);
    const activeIndex = (0, _vueDemi.ref)(-1);
    if (!tasks || tasks.length === 0) {
        onFinished();
        return {
            activeIndex,
            result
        };
    }
    function updateResult(state, res) {
        activeIndex.value++;
        result[activeIndex.value].data = res;
        result[activeIndex.value].state = state;
    }
    tasks.reduce((prev, curr)=>{
        return prev.then((prevRes)=>{
            var _a;
            if (signal == null ? void 0 : signal.aborted) {
                updateResult(promiseState.aborted, new Error("aborted"));
                return;
            }
            if (((_a = result[activeIndex.value]) == null ? void 0 : _a.state) === promiseState.rejected && interrupt) {
                onFinished();
                return;
            }
            const done = curr(prevRes).then((currentRes)=>{
                updateResult(promiseState.fulfilled, currentRes);
                activeIndex.value === tasks.length - 1 && onFinished();
                return currentRes;
            });
            if (!signal) return done;
            return Promise.race([
                done,
                whenAborted(signal)
            ]);
        }).catch((e)=>{
            if (signal == null ? void 0 : signal.aborted) {
                updateResult(promiseState.aborted, e);
                return e;
            }
            updateResult(promiseState.rejected, e);
            onError();
            return e;
        });
    }, Promise.resolve());
    return {
        activeIndex,
        result
    };
}
function whenAborted(signal) {
    return new Promise((resolve, reject)=>{
        const error = new Error("aborted");
        if (signal.aborted) reject(error);
        else signal.addEventListener("abort", ()=>reject(error), {
            once: true
        });
    });
}
function useAsyncState(promise, initialState, options) {
    const { immediate =true , delay =0 , onError =(0, _shared.noop) , onSuccess =(0, _shared.noop) , resetOnExecute =true , shallow =true , throwError  } = options != null ? options : {};
    const state = shallow ? (0, _vueDemi.shallowRef)(initialState) : (0, _vueDemi.ref)(initialState);
    const isReady = (0, _vueDemi.ref)(false);
    const isLoading = (0, _vueDemi.ref)(false);
    const error = (0, _vueDemi.shallowRef)(void 0);
    async function execute(delay2 = 0, ...args) {
        if (resetOnExecute) state.value = initialState;
        error.value = void 0;
        isReady.value = false;
        isLoading.value = true;
        if (delay2 > 0) await (0, _shared.promiseTimeout)(delay2);
        const _promise = typeof promise === "function" ? promise(...args) : promise;
        try {
            const data = await _promise;
            state.value = data;
            isReady.value = true;
            onSuccess(data);
        } catch (e) {
            error.value = e;
            onError(e);
            if (throwError) throw e;
        } finally{
            isLoading.value = false;
        }
        return state.value;
    }
    if (immediate) execute(delay);
    const shell = {
        state,
        isReady,
        isLoading,
        error,
        execute
    };
    function waitUntilIsLoaded() {
        return new Promise((resolve, reject)=>{
            (0, _shared.until)(isLoading).toBe(false).then(()=>resolve(shell)).catch(reject);
        });
    }
    return {
        ...shell,
        then (onFulfilled, onRejected) {
            return waitUntilIsLoaded().then(onFulfilled, onRejected);
        }
    };
}
const defaults = {
    array: (v)=>JSON.stringify(v),
    object: (v)=>JSON.stringify(v),
    set: (v)=>JSON.stringify(Array.from(v)),
    map: (v)=>JSON.stringify(Object.fromEntries(v)),
    null: ()=>""
};
function getDefaultSerialization(target) {
    if (!target) return defaults.null;
    if (target instanceof Map) return defaults.map;
    else if (target instanceof Set) return defaults.set;
    else if (Array.isArray(target)) return defaults.array;
    else return defaults.object;
}
function useBase64(target, options) {
    const base64 = (0, _vueDemi.ref)("");
    const promise = (0, _vueDemi.ref)();
    function execute() {
        if (!(0, _shared.isClient)) return;
        promise.value = new Promise((resolve, reject)=>{
            try {
                const _target = (0, _shared.toValue)(target);
                if (_target == null) resolve("");
                else if (typeof _target === "string") resolve(blobToBase64(new Blob([
                    _target
                ], {
                    type: "text/plain"
                })));
                else if (_target instanceof Blob) resolve(blobToBase64(_target));
                else if (_target instanceof ArrayBuffer) resolve(window.btoa(String.fromCharCode(...new Uint8Array(_target))));
                else if (_target instanceof HTMLCanvasElement) resolve(_target.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));
                else if (_target instanceof HTMLImageElement) {
                    const img = _target.cloneNode(false);
                    img.crossOrigin = "Anonymous";
                    imgLoaded(img).then(()=>{
                        const canvas = document.createElement("canvas");
                        const ctx = canvas.getContext("2d");
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        resolve(canvas.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));
                    }).catch(reject);
                } else if (typeof _target === "object") {
                    const _serializeFn = (options == null ? void 0 : options.serializer) || getDefaultSerialization(_target);
                    const serialized = _serializeFn(_target);
                    return resolve(blobToBase64(new Blob([
                        serialized
                    ], {
                        type: "application/json"
                    })));
                } else reject(new Error("target is unsupported types"));
            } catch (error) {
                reject(error);
            }
        });
        promise.value.then((res)=>base64.value = res);
        return promise.value;
    }
    if ((0, _vueDemi.isRef)(target) || typeof target === "function") (0, _vueDemi.watch)(target, execute, {
        immediate: true
    });
    else execute();
    return {
        base64,
        promise,
        execute
    };
}
function imgLoaded(img) {
    return new Promise((resolve, reject)=>{
        if (!img.complete) {
            img.onload = ()=>{
                resolve();
            };
            img.onerror = reject;
        } else resolve();
    });
}
function blobToBase64(blob) {
    return new Promise((resolve, reject)=>{
        const fr = new FileReader();
        fr.onload = (e)=>{
            resolve(e.target.result);
        };
        fr.onerror = reject;
        fr.readAsDataURL(blob);
    });
}
function useBattery(options = {}) {
    const { navigator =defaultNavigator  } = options;
    const events = [
        "chargingchange",
        "chargingtimechange",
        "dischargingtimechange",
        "levelchange"
    ];
    const isSupported = useSupported(()=>navigator && "getBattery" in navigator && typeof navigator.getBattery === "function");
    const charging = (0, _vueDemi.ref)(false);
    const chargingTime = (0, _vueDemi.ref)(0);
    const dischargingTime = (0, _vueDemi.ref)(0);
    const level = (0, _vueDemi.ref)(1);
    let battery;
    function updateBatteryInfo() {
        charging.value = this.charging;
        chargingTime.value = this.chargingTime || 0;
        dischargingTime.value = this.dischargingTime || 0;
        level.value = this.level;
    }
    if (isSupported.value) navigator.getBattery().then((_battery)=>{
        battery = _battery;
        updateBatteryInfo.call(battery);
        useEventListener(battery, events, updateBatteryInfo, {
            passive: true
        });
    });
    return {
        isSupported,
        charging,
        chargingTime,
        dischargingTime,
        level
    };
}
function useBluetooth(options) {
    let { acceptAllDevices =false  } = options || {};
    const { filters , optionalServices , navigator =defaultNavigator  } = options || {};
    const isSupported = useSupported(()=>navigator && "bluetooth" in navigator);
    const device = (0, _vueDemi.shallowRef)(void 0);
    const error = (0, _vueDemi.shallowRef)(null);
    (0, _vueDemi.watch)(device, ()=>{
        connectToBluetoothGATTServer();
    });
    async function requestDevice() {
        if (!isSupported.value) return;
        error.value = null;
        if (filters && filters.length > 0) acceptAllDevices = false;
        try {
            device.value = await (navigator == null ? void 0 : navigator.bluetooth.requestDevice({
                acceptAllDevices,
                filters,
                optionalServices
            }));
        } catch (err) {
            error.value = err;
        }
    }
    const server = (0, _vueDemi.ref)();
    const isConnected = (0, _vueDemi.computed)(()=>{
        var _a;
        return ((_a = server.value) == null ? void 0 : _a.connected) || false;
    });
    async function connectToBluetoothGATTServer() {
        error.value = null;
        if (device.value && device.value.gatt) {
            device.value.addEventListener("gattserverdisconnected", ()=>{});
            try {
                server.value = await device.value.gatt.connect();
            } catch (err) {
                error.value = err;
            }
        }
    }
    (0, _shared.tryOnMounted)(()=>{
        var _a;
        if (device.value) (_a = device.value.gatt) == null || _a.connect();
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        var _a;
        if (device.value) (_a = device.value.gatt) == null || _a.disconnect();
    });
    return {
        isSupported,
        isConnected,
        // Device:
        device,
        requestDevice,
        // Server:
        server,
        // Errors:
        error
    };
}
function useMediaQuery(query, options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const isSupported = useSupported(()=>window1 && "matchMedia" in window1 && typeof window1.matchMedia === "function");
    let mediaQuery;
    const matches = (0, _vueDemi.ref)(false);
    const handler = (event)=>{
        matches.value = event.matches;
    };
    const cleanup = ()=>{
        if (!mediaQuery) return;
        if ("removeEventListener" in mediaQuery) mediaQuery.removeEventListener("change", handler);
        else mediaQuery.removeListener(handler);
    };
    const stopWatch = (0, _vueDemi.watchEffect)(()=>{
        if (!isSupported.value) return;
        cleanup();
        mediaQuery = window1.matchMedia((0, _shared.toValue)(query));
        if ("addEventListener" in mediaQuery) mediaQuery.addEventListener("change", handler);
        else mediaQuery.addListener(handler);
        matches.value = mediaQuery.matches;
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        stopWatch();
        cleanup();
        mediaQuery = void 0;
    });
    return matches;
}
const breakpointsTailwind = {
    "sm": 640,
    "md": 768,
    "lg": 1024,
    "xl": 1280,
    "2xl": 1536
};
const breakpointsBootstrapV5 = {
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200,
    xxl: 1400
};
const breakpointsVuetifyV2 = {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1264,
    xl: 1904
};
const breakpointsVuetifyV3 = {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920,
    xxl: 2560
};
const breakpointsVuetify = breakpointsVuetifyV2;
const breakpointsAntDesign = {
    xs: 480,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200,
    xxl: 1600
};
const breakpointsQuasar = {
    xs: 0,
    sm: 600,
    md: 1024,
    lg: 1440,
    xl: 1920
};
const breakpointsSematic = {
    mobileS: 320,
    mobileM: 375,
    mobileL: 425,
    tablet: 768,
    laptop: 1024,
    laptopL: 1440,
    desktop4K: 2560
};
const breakpointsMasterCss = {
    "3xs": 360,
    "2xs": 480,
    "xs": 600,
    "sm": 768,
    "md": 1024,
    "lg": 1280,
    "xl": 1440,
    "2xl": 1600,
    "3xl": 1920,
    "4xl": 2560
};
const breakpointsPrimeFlex = {
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200
};
function useBreakpoints(breakpoints, options = {}) {
    function getValue(k, delta) {
        let v = (0, _shared.toValue)(breakpoints[(0, _shared.toValue)(k)]);
        if (delta != null) v = (0, _shared.increaseWithUnit)(v, delta);
        if (typeof v === "number") v = `${v}px`;
        return v;
    }
    const { window: window1 = defaultWindow , strategy ="min-width"  } = options;
    function match(query) {
        if (!window1) return false;
        return window1.matchMedia(query).matches;
    }
    const greaterOrEqual = (k)=>{
        return useMediaQuery(()=>`(min-width: ${getValue(k)})`, options);
    };
    const smallerOrEqual = (k)=>{
        return useMediaQuery(()=>`(max-width: ${getValue(k)})`, options);
    };
    const shortcutMethods = Object.keys(breakpoints).reduce((shortcuts, k)=>{
        Object.defineProperty(shortcuts, k, {
            get: ()=>strategy === "min-width" ? greaterOrEqual(k) : smallerOrEqual(k),
            enumerable: true,
            configurable: true
        });
        return shortcuts;
    }, {});
    function current() {
        const points = Object.keys(breakpoints).map((i)=>[
                i,
                greaterOrEqual(i)
            ]);
        return (0, _vueDemi.computed)(()=>points.filter(([, v])=>v.value).map(([k])=>k));
    }
    return Object.assign(shortcutMethods, {
        greaterOrEqual,
        smallerOrEqual,
        greater (k) {
            return useMediaQuery(()=>`(min-width: ${getValue(k, 0.1)})`, options);
        },
        smaller (k) {
            return useMediaQuery(()=>`(max-width: ${getValue(k, -0.1)})`, options);
        },
        between (a, b) {
            return useMediaQuery(()=>`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`, options);
        },
        isGreater (k) {
            return match(`(min-width: ${getValue(k, 0.1)})`);
        },
        isGreaterOrEqual (k) {
            return match(`(min-width: ${getValue(k)})`);
        },
        isSmaller (k) {
            return match(`(max-width: ${getValue(k, -0.1)})`);
        },
        isSmallerOrEqual (k) {
            return match(`(max-width: ${getValue(k)})`);
        },
        isInBetween (a, b) {
            return match(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`);
        },
        current,
        active () {
            const bps = current();
            return (0, _vueDemi.computed)(()=>bps.value.length === 0 ? "" : bps.value.at(-1));
        }
    });
}
function useBroadcastChannel(options) {
    const { name , window: window1 = defaultWindow  } = options;
    const isSupported = useSupported(()=>window1 && "BroadcastChannel" in window1);
    const isClosed = (0, _vueDemi.ref)(false);
    const channel = (0, _vueDemi.ref)();
    const data = (0, _vueDemi.ref)();
    const error = (0, _vueDemi.shallowRef)(null);
    const post = (data2)=>{
        if (channel.value) channel.value.postMessage(data2);
    };
    const close = ()=>{
        if (channel.value) channel.value.close();
        isClosed.value = true;
    };
    if (isSupported.value) (0, _shared.tryOnMounted)(()=>{
        error.value = null;
        channel.value = new BroadcastChannel(name);
        channel.value.addEventListener("message", (e)=>{
            data.value = e.data;
        }, {
            passive: true
        });
        channel.value.addEventListener("messageerror", (e)=>{
            error.value = e;
        }, {
            passive: true
        });
        channel.value.addEventListener("close", ()=>{
            isClosed.value = true;
        });
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        close();
    });
    return {
        isSupported,
        channel,
        data,
        post,
        close,
        error,
        isClosed
    };
}
const WRITABLE_PROPERTIES = [
    "hash",
    "host",
    "hostname",
    "href",
    "pathname",
    "port",
    "protocol",
    "search"
];
function useBrowserLocation(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const refs = Object.fromEntries(WRITABLE_PROPERTIES.map((key)=>[
            key,
            (0, _vueDemi.ref)()
        ]));
    for (const [key, ref2] of (0, _shared.objectEntries)(refs))(0, _vueDemi.watch)(ref2, (value)=>{
        if (!(window1 == null ? void 0 : window1.location) || window1.location[key] === value) return;
        window1.location[key] = value;
    });
    const buildState = (trigger)=>{
        var _a;
        const { state: state2 , length  } = (window1 == null ? void 0 : window1.history) || {};
        const { origin  } = (window1 == null ? void 0 : window1.location) || {};
        for (const key of WRITABLE_PROPERTIES)refs[key].value = (_a = window1 == null ? void 0 : window1.location) == null ? void 0 : _a[key];
        return (0, _vueDemi.reactive)({
            trigger,
            state: state2,
            length,
            origin,
            ...refs
        });
    };
    const state = (0, _vueDemi.ref)(buildState("load"));
    if (window1) {
        useEventListener(window1, "popstate", ()=>state.value = buildState("popstate"), {
            passive: true
        });
        useEventListener(window1, "hashchange", ()=>state.value = buildState("hashchange"), {
            passive: true
        });
    }
    return state;
}
function useCached(refValue, comparator = (a, b)=>a === b, watchOptions) {
    const cachedValue = (0, _vueDemi.ref)(refValue.value);
    (0, _vueDemi.watch)(()=>refValue.value, (value)=>{
        if (!comparator(value, cachedValue.value)) cachedValue.value = value;
    }, watchOptions);
    return cachedValue;
}
function usePermission(permissionDesc, options = {}) {
    const { controls =false , navigator =defaultNavigator  } = options;
    const isSupported = useSupported(()=>navigator && "permissions" in navigator);
    let permissionStatus;
    const desc = typeof permissionDesc === "string" ? {
        name: permissionDesc
    } : permissionDesc;
    const state = (0, _vueDemi.ref)();
    const onChange = ()=>{
        if (permissionStatus) state.value = permissionStatus.state;
    };
    const query = (0, _shared.createSingletonPromise)(async ()=>{
        if (!isSupported.value) return;
        if (!permissionStatus) try {
            permissionStatus = await navigator.permissions.query(desc);
            useEventListener(permissionStatus, "change", onChange);
            onChange();
        } catch (e) {
            state.value = "prompt";
        }
        return permissionStatus;
    });
    query();
    if (controls) return {
        state,
        isSupported,
        query
    };
    else return state;
}
function useClipboard(options = {}) {
    const { navigator =defaultNavigator , read =false , source , copiedDuring =1500 , legacy =false  } = options;
    const isClipboardApiSupported = useSupported(()=>navigator && "clipboard" in navigator);
    const permissionRead = usePermission("clipboard-read");
    const permissionWrite = usePermission("clipboard-write");
    const isSupported = (0, _vueDemi.computed)(()=>isClipboardApiSupported.value || legacy);
    const text = (0, _vueDemi.ref)("");
    const copied = (0, _vueDemi.ref)(false);
    const timeout = (0, _shared.useTimeoutFn)(()=>copied.value = false, copiedDuring);
    function updateText() {
        if (isClipboardApiSupported.value && isAllowed(permissionRead.value)) navigator.clipboard.readText().then((value)=>{
            text.value = value;
        });
        else text.value = legacyRead();
    }
    if (isSupported.value && read) useEventListener([
        "copy",
        "cut"
    ], updateText);
    async function copy(value = (0, _shared.toValue)(source)) {
        if (isSupported.value && value != null) {
            if (isClipboardApiSupported.value && isAllowed(permissionWrite.value)) await navigator.clipboard.writeText(value);
            else legacyCopy(value);
            text.value = value;
            copied.value = true;
            timeout.start();
        }
    }
    function legacyCopy(value) {
        const ta = document.createElement("textarea");
        ta.value = value != null ? value : "";
        ta.style.position = "absolute";
        ta.style.opacity = "0";
        document.body.appendChild(ta);
        ta.select();
        document.execCommand("copy");
        ta.remove();
    }
    function legacyRead() {
        var _a, _b, _c;
        return (_c = (_b = (_a = document == null ? void 0 : document.getSelection) == null ? void 0 : _a.call(document)) == null ? void 0 : _b.toString()) != null ? _c : "";
    }
    function isAllowed(status) {
        return status === "granted" || status === "prompt";
    }
    return {
        isSupported,
        text,
        copied,
        copy
    };
}
function useClipboardItems(options = {}) {
    const { navigator =defaultNavigator , read =false , source , copiedDuring =1500  } = options;
    const isSupported = useSupported(()=>navigator && "clipboard" in navigator);
    const content = (0, _vueDemi.ref)([]);
    const copied = (0, _vueDemi.ref)(false);
    const timeout = (0, _shared.useTimeoutFn)(()=>copied.value = false, copiedDuring);
    function updateContent() {
        if (isSupported.value) navigator.clipboard.read().then((items)=>{
            content.value = items;
        });
    }
    if (isSupported.value && read) useEventListener([
        "copy",
        "cut"
    ], updateContent);
    async function copy(value = (0, _shared.toValue)(source)) {
        if (isSupported.value && value != null) {
            await navigator.clipboard.write(value);
            content.value = value;
            copied.value = true;
            timeout.start();
        }
    }
    return {
        isSupported,
        content,
        copied,
        copy
    };
}
function cloneFnJSON(source) {
    return JSON.parse(JSON.stringify(source));
}
function useCloned(source, options = {}) {
    const cloned = (0, _vueDemi.ref)({});
    const { manual , clone =cloneFnJSON , // watch options
    deep =true , immediate =true  } = options;
    function sync() {
        cloned.value = clone((0, _shared.toValue)(source));
    }
    if (!manual && ((0, _vueDemi.isRef)(source) || typeof source === "function")) (0, _vueDemi.watch)(source, sync, {
        ...options,
        deep,
        immediate
    });
    else sync();
    return {
        cloned,
        sync
    };
}
const _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__vueuse_ssr_handlers__";
const handlers = /* @__PURE__ */ getHandlers();
function getHandlers() {
    if (!(globalKey in _global)) _global[globalKey] = _global[globalKey] || {};
    return _global[globalKey];
}
function getSSRHandler(key, fallback) {
    return handlers[key] || fallback;
}
function setSSRHandler(key, fn) {
    handlers[key] = fn;
}
function guessSerializerType(rawInit) {
    return rawInit == null ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : rawInit instanceof Date ? "date" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : !Number.isNaN(rawInit) ? "number" : "any";
}
const StorageSerializers = {
    boolean: {
        read: (v)=>v === "true",
        write: (v)=>String(v)
    },
    object: {
        read: (v)=>JSON.parse(v),
        write: (v)=>JSON.stringify(v)
    },
    number: {
        read: (v)=>Number.parseFloat(v),
        write: (v)=>String(v)
    },
    any: {
        read: (v)=>v,
        write: (v)=>String(v)
    },
    string: {
        read: (v)=>v,
        write: (v)=>String(v)
    },
    map: {
        read: (v)=>new Map(JSON.parse(v)),
        write: (v)=>JSON.stringify(Array.from(v.entries()))
    },
    set: {
        read: (v)=>new Set(JSON.parse(v)),
        write: (v)=>JSON.stringify(Array.from(v))
    },
    date: {
        read: (v)=>new Date(v),
        write: (v)=>v.toISOString()
    }
};
const customStorageEventName = "vueuse-storage";
function useStorage(key, defaults, storage, options = {}) {
    var _a;
    const { flush ="pre" , deep =true , listenToStorageChanges =true , writeDefaults =true , mergeDefaults =false , shallow , window: window1 = defaultWindow , eventFilter , onError =(e)=>{
        console.error(e);
    } , initOnMounted  } = options;
    const data = (shallow ? (0, _vueDemi.shallowRef) : (0, _vueDemi.ref))(typeof defaults === "function" ? defaults() : defaults);
    if (!storage) try {
        storage = getSSRHandler("getDefaultStorage", ()=>{
            var _a2;
            return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;
        })();
    } catch (e) {
        onError(e);
    }
    if (!storage) return data;
    const rawInit = (0, _shared.toValue)(defaults);
    const type = guessSerializerType(rawInit);
    const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];
    const { pause: pauseWatch , resume: resumeWatch  } = (0, _shared.pausableWatch)(data, ()=>write(data.value), {
        flush,
        deep,
        eventFilter
    });
    if (window1 && listenToStorageChanges) (0, _shared.tryOnMounted)(()=>{
        useEventListener(window1, "storage", update);
        useEventListener(window1, customStorageEventName, updateFromCustomEvent);
        if (initOnMounted) update();
    });
    if (!initOnMounted) update();
    function dispatchWriteEvent(oldValue, newValue) {
        if (window1) window1.dispatchEvent(new CustomEvent(customStorageEventName, {
            detail: {
                key,
                oldValue,
                newValue,
                storageArea: storage
            }
        }));
    }
    function write(v) {
        try {
            const oldValue = storage.getItem(key);
            if (v == null) {
                dispatchWriteEvent(oldValue, null);
                storage.removeItem(key);
            } else {
                const serialized = serializer.write(v);
                if (oldValue !== serialized) {
                    storage.setItem(key, serialized);
                    dispatchWriteEvent(oldValue, serialized);
                }
            }
        } catch (e) {
            onError(e);
        }
    }
    function read(event) {
        const rawValue = event ? event.newValue : storage.getItem(key);
        if (rawValue == null) {
            if (writeDefaults && rawInit != null) storage.setItem(key, serializer.write(rawInit));
            return rawInit;
        } else if (!event && mergeDefaults) {
            const value = serializer.read(rawValue);
            if (typeof mergeDefaults === "function") return mergeDefaults(value, rawInit);
            else if (type === "object" && !Array.isArray(value)) return {
                ...rawInit,
                ...value
            };
            return value;
        } else if (typeof rawValue !== "string") return rawValue;
        else return serializer.read(rawValue);
    }
    function update(event) {
        if (event && event.storageArea !== storage) return;
        if (event && event.key == null) {
            data.value = rawInit;
            return;
        }
        if (event && event.key !== key) return;
        pauseWatch();
        try {
            if ((event == null ? void 0 : event.newValue) !== serializer.write(data.value)) data.value = read(event);
        } catch (e) {
            onError(e);
        } finally{
            if (event) (0, _vueDemi.nextTick)(resumeWatch);
            else resumeWatch();
        }
    }
    function updateFromCustomEvent(event) {
        update(event.detail);
    }
    return data;
}
function usePreferredDark(options) {
    return useMediaQuery("(prefers-color-scheme: dark)", options);
}
function useColorMode(options = {}) {
    const { selector ="html" , attribute ="class" , initialValue ="auto" , window: window1 = defaultWindow , storage , storageKey ="vueuse-color-scheme" , listenToStorageChanges =true , storageRef , emitAuto , disableTransition =true  } = options;
    const modes = {
        auto: "",
        light: "light",
        dark: "dark",
        ...options.modes || {}
    };
    const preferredDark = usePreferredDark({
        window: window1
    });
    const system = (0, _vueDemi.computed)(()=>preferredDark.value ? "dark" : "light");
    const store = storageRef || (storageKey == null ? (0, _shared.toRef)(initialValue) : useStorage(storageKey, initialValue, storage, {
        window: window1,
        listenToStorageChanges
    }));
    const state = (0, _vueDemi.computed)(()=>store.value === "auto" ? system.value : store.value);
    const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector2, attribute2, value)=>{
        const el = typeof selector2 === "string" ? window1 == null ? void 0 : window1.document.querySelector(selector2) : unrefElement(selector2);
        if (!el) return;
        let style;
        if (disableTransition) {
            style = window1.document.createElement("style");
            const styleString = "*,*::before,*::after{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
            style.appendChild(document.createTextNode(styleString));
            window1.document.head.appendChild(style);
        }
        if (attribute2 === "class") {
            const current = value.split(/\s/g);
            Object.values(modes).flatMap((i)=>(i || "").split(/\s/g)).filter(Boolean).forEach((v)=>{
                if (current.includes(v)) el.classList.add(v);
                else el.classList.remove(v);
            });
        } else el.setAttribute(attribute2, value);
        if (disableTransition) {
            window1.getComputedStyle(style).opacity;
            document.head.removeChild(style);
        }
    });
    function defaultOnChanged(mode) {
        var _a;
        updateHTMLAttrs(selector, attribute, (_a = modes[mode]) != null ? _a : mode);
    }
    function onChanged(mode) {
        if (options.onChanged) options.onChanged(mode, defaultOnChanged);
        else defaultOnChanged(mode);
    }
    (0, _vueDemi.watch)(state, onChanged, {
        flush: "post",
        immediate: true
    });
    (0, _shared.tryOnMounted)(()=>onChanged(state.value));
    const auto = (0, _vueDemi.computed)({
        get () {
            return emitAuto ? store.value : state.value;
        },
        set (v) {
            store.value = v;
        }
    });
    try {
        return Object.assign(auto, {
            store,
            system,
            state
        });
    } catch (e) {
        return auto;
    }
}
function useConfirmDialog(revealed = (0, _vueDemi.ref)(false)) {
    const confirmHook = (0, _shared.createEventHook)();
    const cancelHook = (0, _shared.createEventHook)();
    const revealHook = (0, _shared.createEventHook)();
    let _resolve = (0, _shared.noop);
    const reveal = (data)=>{
        revealHook.trigger(data);
        revealed.value = true;
        return new Promise((resolve)=>{
            _resolve = resolve;
        });
    };
    const confirm = (data)=>{
        revealed.value = false;
        confirmHook.trigger(data);
        _resolve({
            data,
            isCanceled: false
        });
    };
    const cancel = (data)=>{
        revealed.value = false;
        cancelHook.trigger(data);
        _resolve({
            data,
            isCanceled: true
        });
    };
    return {
        isRevealed: (0, _vueDemi.computed)(()=>revealed.value),
        reveal,
        confirm,
        cancel,
        onReveal: revealHook.on,
        onConfirm: confirmHook.on,
        onCancel: cancelHook.on
    };
}
function useCssVar(prop, target, options = {}) {
    const { window: window1 = defaultWindow , initialValue ="" , observe =false  } = options;
    const variable = (0, _vueDemi.ref)(initialValue);
    const elRef = (0, _vueDemi.computed)(()=>{
        var _a;
        return unrefElement(target) || ((_a = window1 == null ? void 0 : window1.document) == null ? void 0 : _a.documentElement);
    });
    function updateCssVar() {
        var _a;
        const key = (0, _shared.toValue)(prop);
        const el = (0, _shared.toValue)(elRef);
        if (el && window1) {
            const value = (_a = window1.getComputedStyle(el).getPropertyValue(key)) == null ? void 0 : _a.trim();
            variable.value = value || initialValue;
        }
    }
    if (observe) useMutationObserver(elRef, updateCssVar, {
        attributeFilter: [
            "style",
            "class"
        ],
        window: window1
    });
    (0, _vueDemi.watch)([
        elRef,
        ()=>(0, _shared.toValue)(prop)
    ], updateCssVar, {
        immediate: true
    });
    (0, _vueDemi.watch)(variable, (val)=>{
        var _a;
        if ((_a = elRef.value) == null ? void 0 : _a.style) elRef.value.style.setProperty((0, _shared.toValue)(prop), val);
    });
    return variable;
}
function useCurrentElement(rootComponent) {
    const vm = (0, _vueDemi.getCurrentInstance)();
    const currentElement = (0, _shared.computedWithControl)(()=>null, ()=>rootComponent ? unrefElement(rootComponent) : vm.proxy.$el);
    (0, _vueDemi.onUpdated)(currentElement.trigger);
    (0, _vueDemi.onMounted)(currentElement.trigger);
    return currentElement;
}
function useCycleList(list, options) {
    const state = (0, _vueDemi.shallowRef)(getInitialValue());
    const listRef = (0, _shared.toRef)(list);
    const index = (0, _vueDemi.computed)({
        get () {
            var _a;
            const targetList = listRef.value;
            let index2 = (options == null ? void 0 : options.getIndexOf) ? options.getIndexOf(state.value, targetList) : targetList.indexOf(state.value);
            if (index2 < 0) index2 = (_a = options == null ? void 0 : options.fallbackIndex) != null ? _a : 0;
            return index2;
        },
        set (v) {
            set(v);
        }
    });
    function set(i) {
        const targetList = listRef.value;
        const length = targetList.length;
        const index2 = (i % length + length) % length;
        const value = targetList[index2];
        state.value = value;
        return value;
    }
    function shift(delta = 1) {
        return set(index.value + delta);
    }
    function next(n = 1) {
        return shift(n);
    }
    function prev(n = 1) {
        return shift(-n);
    }
    function getInitialValue() {
        var _a, _b;
        return (_b = (0, _shared.toValue)((_a = options == null ? void 0 : options.initialValue) != null ? _a : (0, _shared.toValue)(list)[0])) != null ? _b : void 0;
    }
    (0, _vueDemi.watch)(listRef, ()=>set(index.value));
    return {
        state,
        index,
        next,
        prev,
        go: set
    };
}
function useDark(options = {}) {
    const { valueDark ="dark" , valueLight ="" , window: window1 = defaultWindow  } = options;
    const mode = useColorMode({
        ...options,
        onChanged: (mode2, defaultHandler)=>{
            var _a;
            if (options.onChanged) (_a = options.onChanged) == null || _a.call(options, mode2 === "dark", defaultHandler, mode2);
            else defaultHandler(mode2);
        },
        modes: {
            dark: valueDark,
            light: valueLight
        }
    });
    const system = (0, _vueDemi.computed)(()=>{
        if (mode.system) return mode.system.value;
        else {
            const preferredDark = usePreferredDark({
                window: window1
            });
            return preferredDark.value ? "dark" : "light";
        }
    });
    const isDark = (0, _vueDemi.computed)({
        get () {
            return mode.value === "dark";
        },
        set (v) {
            const modeVal = v ? "dark" : "light";
            if (system.value === modeVal) mode.value = "auto";
            else mode.value = modeVal;
        }
    });
    return isDark;
}
function fnBypass(v) {
    return v;
}
function fnSetSource(source, value) {
    return source.value = value;
}
function defaultDump(clone) {
    return clone ? typeof clone === "function" ? clone : cloneFnJSON : fnBypass;
}
function defaultParse(clone) {
    return clone ? typeof clone === "function" ? clone : cloneFnJSON : fnBypass;
}
function useManualRefHistory(source, options = {}) {
    const { clone =false , dump =defaultDump(clone) , parse =defaultParse(clone) , setSource =fnSetSource  } = options;
    function _createHistoryRecord() {
        return (0, _vueDemi.markRaw)({
            snapshot: dump(source.value),
            timestamp: (0, _shared.timestamp)()
        });
    }
    const last = (0, _vueDemi.ref)(_createHistoryRecord());
    const undoStack = (0, _vueDemi.ref)([]);
    const redoStack = (0, _vueDemi.ref)([]);
    const _setSource = (record)=>{
        setSource(source, parse(record.snapshot));
        last.value = record;
    };
    const commit = ()=>{
        undoStack.value.unshift(last.value);
        last.value = _createHistoryRecord();
        if (options.capacity && undoStack.value.length > options.capacity) undoStack.value.splice(options.capacity, Number.POSITIVE_INFINITY);
        if (redoStack.value.length) redoStack.value.splice(0, redoStack.value.length);
    };
    const clear = ()=>{
        undoStack.value.splice(0, undoStack.value.length);
        redoStack.value.splice(0, redoStack.value.length);
    };
    const undo = ()=>{
        const state = undoStack.value.shift();
        if (state) {
            redoStack.value.unshift(last.value);
            _setSource(state);
        }
    };
    const redo = ()=>{
        const state = redoStack.value.shift();
        if (state) {
            undoStack.value.unshift(last.value);
            _setSource(state);
        }
    };
    const reset = ()=>{
        _setSource(last.value);
    };
    const history = (0, _vueDemi.computed)(()=>[
            last.value,
            ...undoStack.value
        ]);
    const canUndo = (0, _vueDemi.computed)(()=>undoStack.value.length > 0);
    const canRedo = (0, _vueDemi.computed)(()=>redoStack.value.length > 0);
    return {
        source,
        undoStack,
        redoStack,
        last,
        history,
        canUndo,
        canRedo,
        clear,
        commit,
        reset,
        undo,
        redo
    };
}
function useRefHistory(source, options = {}) {
    const { deep =false , flush ="pre" , eventFilter  } = options;
    const { eventFilter: composedFilter , pause , resume: resumeTracking , isActive: isTracking  } = (0, _shared.pausableFilter)(eventFilter);
    const { ignoreUpdates , ignorePrevAsyncUpdates , stop  } = (0, _shared.watchIgnorable)(source, commit, {
        deep,
        flush,
        eventFilter: composedFilter
    });
    function setSource(source2, value) {
        ignorePrevAsyncUpdates();
        ignoreUpdates(()=>{
            source2.value = value;
        });
    }
    const manualHistory = useManualRefHistory(source, {
        ...options,
        clone: options.clone || deep,
        setSource
    });
    const { clear , commit: manualCommit  } = manualHistory;
    function commit() {
        ignorePrevAsyncUpdates();
        manualCommit();
    }
    function resume(commitNow) {
        resumeTracking();
        if (commitNow) commit();
    }
    function batch(fn) {
        let canceled = false;
        const cancel = ()=>canceled = true;
        ignoreUpdates(()=>{
            fn(cancel);
        });
        if (!canceled) commit();
    }
    function dispose() {
        stop();
        clear();
    }
    return {
        ...manualHistory,
        isTracking,
        pause,
        resume,
        commit,
        batch,
        dispose
    };
}
function useDebouncedRefHistory(source, options = {}) {
    const filter = options.debounce ? (0, _shared.debounceFilter)(options.debounce) : void 0;
    const history = useRefHistory(source, {
        ...options,
        eventFilter: filter
    });
    return {
        ...history
    };
}
function useDeviceMotion(options = {}) {
    const { window: window1 = defaultWindow , eventFilter =(0, _shared.bypassFilter)  } = options;
    const acceleration = (0, _vueDemi.ref)({
        x: null,
        y: null,
        z: null
    });
    const rotationRate = (0, _vueDemi.ref)({
        alpha: null,
        beta: null,
        gamma: null
    });
    const interval = (0, _vueDemi.ref)(0);
    const accelerationIncludingGravity = (0, _vueDemi.ref)({
        x: null,
        y: null,
        z: null
    });
    if (window1) {
        const onDeviceMotion = (0, _shared.createFilterWrapper)(eventFilter, (event)=>{
            acceleration.value = event.acceleration;
            accelerationIncludingGravity.value = event.accelerationIncludingGravity;
            rotationRate.value = event.rotationRate;
            interval.value = event.interval;
        });
        useEventListener(window1, "devicemotion", onDeviceMotion);
    }
    return {
        acceleration,
        accelerationIncludingGravity,
        rotationRate,
        interval
    };
}
function useDeviceOrientation(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const isSupported = useSupported(()=>window1 && "DeviceOrientationEvent" in window1);
    const isAbsolute = (0, _vueDemi.ref)(false);
    const alpha = (0, _vueDemi.ref)(null);
    const beta = (0, _vueDemi.ref)(null);
    const gamma = (0, _vueDemi.ref)(null);
    if (window1 && isSupported.value) useEventListener(window1, "deviceorientation", (event)=>{
        isAbsolute.value = event.absolute;
        alpha.value = event.alpha;
        beta.value = event.beta;
        gamma.value = event.gamma;
    });
    return {
        isSupported,
        isAbsolute,
        alpha,
        beta,
        gamma
    };
}
function useDevicePixelRatio(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const pixelRatio = (0, _vueDemi.ref)(1);
    if (window1) {
        let observe2 = function() {
            pixelRatio.value = window1.devicePixelRatio;
            cleanup2();
            media = window1.matchMedia(`(resolution: ${pixelRatio.value}dppx)`);
            media.addEventListener("change", observe2, {
                once: true
            });
        }, cleanup2 = function() {
            media == null || media.removeEventListener("change", observe2);
        };
        let media;
        observe2();
        (0, _shared.tryOnScopeDispose)(cleanup2);
    }
    return {
        pixelRatio
    };
}
function useDevicesList(options = {}) {
    const { navigator =defaultNavigator , requestPermissions =false , constraints ={
        audio: true,
        video: true
    } , onUpdated  } = options;
    const devices = (0, _vueDemi.ref)([]);
    const videoInputs = (0, _vueDemi.computed)(()=>devices.value.filter((i)=>i.kind === "videoinput"));
    const audioInputs = (0, _vueDemi.computed)(()=>devices.value.filter((i)=>i.kind === "audioinput"));
    const audioOutputs = (0, _vueDemi.computed)(()=>devices.value.filter((i)=>i.kind === "audiooutput"));
    const isSupported = useSupported(()=>navigator && navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);
    const permissionGranted = (0, _vueDemi.ref)(false);
    let stream;
    async function update() {
        if (!isSupported.value) return;
        devices.value = await navigator.mediaDevices.enumerateDevices();
        onUpdated == null || onUpdated(devices.value);
        if (stream) {
            stream.getTracks().forEach((t)=>t.stop());
            stream = null;
        }
    }
    async function ensurePermissions() {
        if (!isSupported.value) return false;
        if (permissionGranted.value) return true;
        const { state , query  } = usePermission("camera", {
            controls: true
        });
        await query();
        if (state.value !== "granted") {
            stream = await navigator.mediaDevices.getUserMedia(constraints);
            update();
            permissionGranted.value = true;
        } else permissionGranted.value = true;
        return permissionGranted.value;
    }
    if (isSupported.value) {
        if (requestPermissions) ensurePermissions();
        useEventListener(navigator.mediaDevices, "devicechange", update);
        update();
    }
    return {
        devices,
        ensurePermissions,
        permissionGranted,
        videoInputs,
        audioInputs,
        audioOutputs,
        isSupported
    };
}
function useDisplayMedia(options = {}) {
    var _a;
    const enabled = (0, _vueDemi.ref)((_a = options.enabled) != null ? _a : false);
    const video = options.video;
    const audio = options.audio;
    const { navigator =defaultNavigator  } = options;
    const isSupported = useSupported(()=>{
        var _a2;
        return (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.getDisplayMedia;
    });
    const constraint = {
        audio,
        video
    };
    const stream = (0, _vueDemi.shallowRef)();
    async function _start() {
        var _a2;
        if (!isSupported.value || stream.value) return;
        stream.value = await navigator.mediaDevices.getDisplayMedia(constraint);
        (_a2 = stream.value) == null || _a2.getTracks().forEach((t)=>t.addEventListener("ended", stop));
        return stream.value;
    }
    async function _stop() {
        var _a2;
        (_a2 = stream.value) == null || _a2.getTracks().forEach((t)=>t.stop());
        stream.value = void 0;
    }
    function stop() {
        _stop();
        enabled.value = false;
    }
    async function start() {
        await _start();
        if (stream.value) enabled.value = true;
        return stream.value;
    }
    (0, _vueDemi.watch)(enabled, (v)=>{
        if (v) _start();
        else _stop();
    }, {
        immediate: true
    });
    return {
        isSupported,
        stream,
        start,
        stop,
        enabled
    };
}
function useDocumentVisibility(options = {}) {
    const { document: document1 = defaultDocument  } = options;
    if (!document1) return (0, _vueDemi.ref)("visible");
    const visibility = (0, _vueDemi.ref)(document1.visibilityState);
    useEventListener(document1, "visibilitychange", ()=>{
        visibility.value = document1.visibilityState;
    });
    return visibility;
}
function useDraggable(target, options = {}) {
    var _a, _b;
    const { pointerTypes , preventDefault , stopPropagation , exact , onMove , onEnd , onStart , initialValue , axis ="both" , draggingElement =defaultWindow , containerElement , handle: draggingHandle = target  } = options;
    const position = (0, _vueDemi.ref)((_a = (0, _shared.toValue)(initialValue)) != null ? _a : {
        x: 0,
        y: 0
    });
    const pressedDelta = (0, _vueDemi.ref)();
    const filterEvent = (e)=>{
        if (pointerTypes) return pointerTypes.includes(e.pointerType);
        return true;
    };
    const handleEvent = (e)=>{
        if ((0, _shared.toValue)(preventDefault)) e.preventDefault();
        if ((0, _shared.toValue)(stopPropagation)) e.stopPropagation();
    };
    const start = (e)=>{
        var _a2;
        if (e.button !== 0) return;
        if ((0, _shared.toValue)(options.disabled) || !filterEvent(e)) return;
        if ((0, _shared.toValue)(exact) && e.target !== (0, _shared.toValue)(target)) return;
        const container = (0, _shared.toValue)(containerElement);
        const containerRect = (_a2 = container == null ? void 0 : container.getBoundingClientRect) == null ? void 0 : _a2.call(container);
        const targetRect = (0, _shared.toValue)(target).getBoundingClientRect();
        const pos = {
            x: e.clientX - (container ? targetRect.left - containerRect.left + container.scrollLeft : targetRect.left),
            y: e.clientY - (container ? targetRect.top - containerRect.top + container.scrollTop : targetRect.top)
        };
        if ((onStart == null ? void 0 : onStart(pos, e)) === false) return;
        pressedDelta.value = pos;
        handleEvent(e);
    };
    const move = (e)=>{
        if ((0, _shared.toValue)(options.disabled) || !filterEvent(e)) return;
        if (!pressedDelta.value) return;
        const container = (0, _shared.toValue)(containerElement);
        const targetRect = (0, _shared.toValue)(target).getBoundingClientRect();
        let { x , y  } = position.value;
        if (axis === "x" || axis === "both") {
            x = e.clientX - pressedDelta.value.x;
            if (container) x = Math.min(Math.max(0, x), container.scrollWidth - targetRect.width);
        }
        if (axis === "y" || axis === "both") {
            y = e.clientY - pressedDelta.value.y;
            if (container) y = Math.min(Math.max(0, y), container.scrollHeight - targetRect.height);
        }
        position.value = {
            x,
            y
        };
        onMove == null || onMove(position.value, e);
        handleEvent(e);
    };
    const end = (e)=>{
        if ((0, _shared.toValue)(options.disabled) || !filterEvent(e)) return;
        if (!pressedDelta.value) return;
        pressedDelta.value = void 0;
        onEnd == null || onEnd(position.value, e);
        handleEvent(e);
    };
    if (0, _shared.isClient) {
        const config = {
            capture: (_b = options.capture) != null ? _b : true
        };
        useEventListener(draggingHandle, "pointerdown", start, config);
        useEventListener(draggingElement, "pointermove", move, config);
        useEventListener(draggingElement, "pointerup", end, config);
    }
    return {
        ...(0, _shared.toRefs)(position),
        position,
        isDragging: (0, _vueDemi.computed)(()=>!!pressedDelta.value),
        style: (0, _vueDemi.computed)(()=>`left:${position.value.x}px;top:${position.value.y}px;`)
    };
}
function useDropZone(target, options = {}) {
    const isOverDropZone = (0, _vueDemi.ref)(false);
    const files = (0, _vueDemi.shallowRef)(null);
    let counter = 0;
    let isDataTypeIncluded = true;
    if (0, _shared.isClient) {
        const _options = typeof options === "function" ? {
            onDrop: options
        } : options;
        const getFiles = (event)=>{
            var _a, _b;
            const list = Array.from((_b = (_a = event.dataTransfer) == null ? void 0 : _a.files) != null ? _b : []);
            return files.value = list.length === 0 ? null : list;
        };
        useEventListener(target, "dragenter", (event)=>{
            var _a, _b;
            const types = Array.from(((_a = event == null ? void 0 : event.dataTransfer) == null ? void 0 : _a.items) || []).map((i)=>i.kind === "file" ? i.type : null).filter((0, _shared.notNullish));
            if (_options.dataTypes && event.dataTransfer) {
                const dataTypes = (0, _vueDemi.unref)(_options.dataTypes);
                isDataTypeIncluded = typeof dataTypes === "function" ? dataTypes(types) : dataTypes ? dataTypes.some((item)=>types.includes(item)) : true;
                if (!isDataTypeIncluded) return;
            }
            event.preventDefault();
            counter += 1;
            isOverDropZone.value = true;
            (_b = _options.onEnter) == null || _b.call(_options, getFiles(event), event);
        });
        useEventListener(target, "dragover", (event)=>{
            var _a;
            if (!isDataTypeIncluded) return;
            event.preventDefault();
            (_a = _options.onOver) == null || _a.call(_options, getFiles(event), event);
        });
        useEventListener(target, "dragleave", (event)=>{
            var _a;
            if (!isDataTypeIncluded) return;
            event.preventDefault();
            counter -= 1;
            if (counter === 0) isOverDropZone.value = false;
            (_a = _options.onLeave) == null || _a.call(_options, getFiles(event), event);
        });
        useEventListener(target, "drop", (event)=>{
            var _a;
            event.preventDefault();
            counter = 0;
            isOverDropZone.value = false;
            (_a = _options.onDrop) == null || _a.call(_options, getFiles(event), event);
        });
    }
    return {
        files,
        isOverDropZone
    };
}
function useResizeObserver(target, callback, options = {}) {
    const { window: window1 = defaultWindow , ...observerOptions } = options;
    let observer;
    const isSupported = useSupported(()=>window1 && "ResizeObserver" in window1);
    const cleanup = ()=>{
        if (observer) {
            observer.disconnect();
            observer = void 0;
        }
    };
    const targets = (0, _vueDemi.computed)(()=>Array.isArray(target) ? target.map((el)=>unrefElement(el)) : [
            unrefElement(target)
        ]);
    const stopWatch = (0, _vueDemi.watch)(targets, (els)=>{
        cleanup();
        if (isSupported.value && window1) {
            observer = new ResizeObserver(callback);
            for (const _el of els)_el && observer.observe(_el, observerOptions);
        }
    }, {
        immediate: true,
        flush: "post"
    });
    const stop = ()=>{
        cleanup();
        stopWatch();
    };
    (0, _shared.tryOnScopeDispose)(stop);
    return {
        isSupported,
        stop
    };
}
function useElementBounding(target, options = {}) {
    const { reset =true , windowResize =true , windowScroll =true , immediate =true  } = options;
    const height = (0, _vueDemi.ref)(0);
    const bottom = (0, _vueDemi.ref)(0);
    const left = (0, _vueDemi.ref)(0);
    const right = (0, _vueDemi.ref)(0);
    const top = (0, _vueDemi.ref)(0);
    const width = (0, _vueDemi.ref)(0);
    const x = (0, _vueDemi.ref)(0);
    const y = (0, _vueDemi.ref)(0);
    function update() {
        const el = unrefElement(target);
        if (!el) {
            if (reset) {
                height.value = 0;
                bottom.value = 0;
                left.value = 0;
                right.value = 0;
                top.value = 0;
                width.value = 0;
                x.value = 0;
                y.value = 0;
            }
            return;
        }
        const rect = el.getBoundingClientRect();
        height.value = rect.height;
        bottom.value = rect.bottom;
        left.value = rect.left;
        right.value = rect.right;
        top.value = rect.top;
        width.value = rect.width;
        x.value = rect.x;
        y.value = rect.y;
    }
    useResizeObserver(target, update);
    (0, _vueDemi.watch)(()=>unrefElement(target), (ele)=>!ele && update());
    useMutationObserver(target, update, {
        attributeFilter: [
            "style",
            "class"
        ]
    });
    if (windowScroll) useEventListener("scroll", update, {
        capture: true,
        passive: true
    });
    if (windowResize) useEventListener("resize", update, {
        passive: true
    });
    (0, _shared.tryOnMounted)(()=>{
        if (immediate) update();
    });
    return {
        height,
        bottom,
        left,
        right,
        top,
        width,
        x,
        y,
        update
    };
}
function useElementByPoint(options) {
    const { x , y , document: document1 = defaultDocument , multiple , interval ="requestAnimationFrame" , immediate =true  } = options;
    const isSupported = useSupported(()=>{
        if ((0, _shared.toValue)(multiple)) return document1 && "elementsFromPoint" in document1;
        return document1 && "elementFromPoint" in document1;
    });
    const element = (0, _vueDemi.ref)(null);
    const cb = ()=>{
        var _a, _b;
        element.value = (0, _shared.toValue)(multiple) ? (_a = document1 == null ? void 0 : document1.elementsFromPoint((0, _shared.toValue)(x), (0, _shared.toValue)(y))) != null ? _a : [] : (_b = document1 == null ? void 0 : document1.elementFromPoint((0, _shared.toValue)(x), (0, _shared.toValue)(y))) != null ? _b : null;
    };
    const controls = interval === "requestAnimationFrame" ? useRafFn(cb, {
        immediate
    }) : (0, _shared.useIntervalFn)(cb, interval, {
        immediate
    });
    return {
        isSupported,
        element,
        ...controls
    };
}
function useElementHover(el, options = {}) {
    const { delayEnter =0 , delayLeave =0 , window: window1 = defaultWindow  } = options;
    const isHovered = (0, _vueDemi.ref)(false);
    let timer;
    const toggle = (entering)=>{
        const delay = entering ? delayEnter : delayLeave;
        if (timer) {
            clearTimeout(timer);
            timer = void 0;
        }
        if (delay) timer = setTimeout(()=>isHovered.value = entering, delay);
        else isHovered.value = entering;
    };
    if (!window1) return isHovered;
    useEventListener(el, "mouseenter", ()=>toggle(true), {
        passive: true
    });
    useEventListener(el, "mouseleave", ()=>toggle(false), {
        passive: true
    });
    return isHovered;
}
function useElementSize(target, initialSize = {
    width: 0,
    height: 0
}, options = {}) {
    const { window: window1 = defaultWindow , box ="content-box"  } = options;
    const isSVG = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = unrefElement(target)) == null ? void 0 : _a.namespaceURI) == null ? void 0 : _b.includes("svg");
    });
    const width = (0, _vueDemi.ref)(initialSize.width);
    const height = (0, _vueDemi.ref)(initialSize.height);
    const { stop: stop1  } = useResizeObserver(target, ([entry])=>{
        const boxSize = box === "border-box" ? entry.borderBoxSize : box === "content-box" ? entry.contentBoxSize : entry.devicePixelContentBoxSize;
        if (window1 && isSVG.value) {
            const $elem = unrefElement(target);
            if ($elem) {
                const rect = $elem.getBoundingClientRect();
                width.value = rect.width;
                height.value = rect.height;
            }
        } else if (boxSize) {
            const formatBoxSize = Array.isArray(boxSize) ? boxSize : [
                boxSize
            ];
            width.value = formatBoxSize.reduce((acc, { inlineSize  })=>acc + inlineSize, 0);
            height.value = formatBoxSize.reduce((acc, { blockSize  })=>acc + blockSize, 0);
        } else {
            width.value = entry.contentRect.width;
            height.value = entry.contentRect.height;
        }
    }, options);
    (0, _shared.tryOnMounted)(()=>{
        const ele = unrefElement(target);
        if (ele) {
            width.value = "offsetWidth" in ele ? ele.offsetWidth : initialSize.width;
            height.value = "offsetHeight" in ele ? ele.offsetHeight : initialSize.height;
        }
    });
    const stop2 = (0, _vueDemi.watch)(()=>unrefElement(target), (ele)=>{
        width.value = ele ? initialSize.width : 0;
        height.value = ele ? initialSize.height : 0;
    });
    function stop() {
        stop1();
        stop2();
    }
    return {
        width,
        height,
        stop
    };
}
function useIntersectionObserver(target, callback, options = {}) {
    const { root , rootMargin ="0px" , threshold =0.1 , window: window1 = defaultWindow , immediate =true  } = options;
    const isSupported = useSupported(()=>window1 && "IntersectionObserver" in window1);
    const targets = (0, _vueDemi.computed)(()=>{
        const _target = (0, _shared.toValue)(target);
        return (Array.isArray(_target) ? _target : [
            _target
        ]).map(unrefElement).filter((0, _shared.notNullish));
    });
    let cleanup = (0, _shared.noop);
    const isActive = (0, _vueDemi.ref)(immediate);
    const stopWatch = isSupported.value ? (0, _vueDemi.watch)(()=>[
            targets.value,
            unrefElement(root),
            isActive.value
        ], ([targets2, root2])=>{
        cleanup();
        if (!isActive.value) return;
        if (!targets2.length) return;
        const observer = new IntersectionObserver(callback, {
            root: unrefElement(root2),
            rootMargin,
            threshold
        });
        targets2.forEach((el)=>el && observer.observe(el));
        cleanup = ()=>{
            observer.disconnect();
            cleanup = (0, _shared.noop);
        };
    }, {
        immediate,
        flush: "post"
    }) : (0, _shared.noop);
    const stop = ()=>{
        cleanup();
        stopWatch();
        isActive.value = false;
    };
    (0, _shared.tryOnScopeDispose)(stop);
    return {
        isSupported,
        isActive,
        pause () {
            cleanup();
            isActive.value = false;
        },
        resume () {
            isActive.value = true;
        },
        stop
    };
}
function useElementVisibility(element, options = {}) {
    const { window: window1 = defaultWindow , scrollTarget , threshold =0  } = options;
    const elementIsVisible = (0, _vueDemi.ref)(false);
    useIntersectionObserver(element, (intersectionObserverEntries)=>{
        let isIntersecting = elementIsVisible.value;
        let latestTime = 0;
        for (const entry of intersectionObserverEntries)if (entry.time >= latestTime) {
            latestTime = entry.time;
            isIntersecting = entry.isIntersecting;
        }
        elementIsVisible.value = isIntersecting;
    }, {
        root: scrollTarget,
        window: window1,
        threshold
    });
    return elementIsVisible;
}
const events = /* @__PURE__ */ new Map();
function useEventBus(key) {
    const scope = (0, _vueDemi.getCurrentScope)();
    function on(listener) {
        var _a;
        const listeners = events.get(key) || /* @__PURE__ */ new Set();
        listeners.add(listener);
        events.set(key, listeners);
        const _off = ()=>off(listener);
        (_a = scope == null ? void 0 : scope.cleanups) == null || _a.push(_off);
        return _off;
    }
    function once(listener) {
        function _listener(...args) {
            off(_listener);
            listener(...args);
        }
        return on(_listener);
    }
    function off(listener) {
        const listeners = events.get(key);
        if (!listeners) return;
        listeners.delete(listener);
        if (!listeners.size) reset();
    }
    function reset() {
        events.delete(key);
    }
    function emit(event, payload) {
        var _a;
        (_a = events.get(key)) == null || _a.forEach((v)=>v(event, payload));
    }
    return {
        on,
        once,
        off,
        emit,
        reset
    };
}
function resolveNestedOptions$1(options) {
    if (options === true) return {};
    return options;
}
function useEventSource(url, events = [], options = {}) {
    const event = (0, _vueDemi.ref)(null);
    const data = (0, _vueDemi.ref)(null);
    const status = (0, _vueDemi.ref)("CONNECTING");
    const eventSource = (0, _vueDemi.ref)(null);
    const error = (0, _vueDemi.shallowRef)(null);
    const urlRef = (0, _shared.toRef)(url);
    const lastEventId = (0, _vueDemi.shallowRef)(null);
    let explicitlyClosed = false;
    let retried = 0;
    const { withCredentials =false , immediate =true  } = options;
    const close = ()=>{
        if ((0, _shared.isClient) && eventSource.value) {
            eventSource.value.close();
            eventSource.value = null;
            status.value = "CLOSED";
            explicitlyClosed = true;
        }
    };
    const _init = ()=>{
        if (explicitlyClosed || typeof urlRef.value === "undefined") return;
        const es = new EventSource(urlRef.value, {
            withCredentials
        });
        status.value = "CONNECTING";
        eventSource.value = es;
        es.onopen = ()=>{
            status.value = "OPEN";
            error.value = null;
        };
        es.onerror = (e)=>{
            status.value = "CLOSED";
            error.value = e;
            if (es.readyState === 2 && !explicitlyClosed && options.autoReconnect) {
                es.close();
                const { retries =-1 , delay =1e3 , onFailed  } = resolveNestedOptions$1(options.autoReconnect);
                retried += 1;
                if (typeof retries === "number" && (retries < 0 || retried < retries)) setTimeout(_init, delay);
                else if (typeof retries === "function" && retries()) setTimeout(_init, delay);
                else onFailed == null || onFailed();
            }
        };
        es.onmessage = (e)=>{
            event.value = null;
            data.value = e.data;
            lastEventId.value = e.lastEventId;
        };
        for (const event_name of events)useEventListener(es, event_name, (e)=>{
            event.value = event_name;
            data.value = e.data || null;
        });
    };
    const open = ()=>{
        if (!(0, _shared.isClient)) return;
        close();
        explicitlyClosed = false;
        retried = 0;
        _init();
    };
    if (immediate) (0, _vueDemi.watch)(urlRef, open, {
        immediate: true
    });
    (0, _shared.tryOnScopeDispose)(close);
    return {
        eventSource,
        event,
        data,
        status,
        error,
        open,
        close,
        lastEventId
    };
}
function useEyeDropper(options = {}) {
    const { initialValue =""  } = options;
    const isSupported = useSupported(()=>typeof window !== "undefined" && "EyeDropper" in window);
    const sRGBHex = (0, _vueDemi.ref)(initialValue);
    async function open(openOptions) {
        if (!isSupported.value) return;
        const eyeDropper = new window.EyeDropper();
        const result = await eyeDropper.open(openOptions);
        sRGBHex.value = result.sRGBHex;
        return result;
    }
    return {
        isSupported,
        sRGBHex,
        open
    };
}
function useFavicon(newIcon = null, options = {}) {
    const { baseUrl ="" , rel ="icon" , document: document1 = defaultDocument  } = options;
    const favicon = (0, _shared.toRef)(newIcon);
    const applyIcon = (icon)=>{
        const elements = document1 == null ? void 0 : document1.head.querySelectorAll(`link[rel*="${rel}"]`);
        if (!elements || elements.length === 0) {
            const link = document1 == null ? void 0 : document1.createElement("link");
            if (link) {
                link.rel = rel;
                link.href = `${baseUrl}${icon}`;
                link.type = `image/${icon.split(".").pop()}`;
                document1 == null || document1.head.append(link);
            }
            return;
        }
        elements == null || elements.forEach((el)=>el.href = `${baseUrl}${icon}`);
    };
    (0, _vueDemi.watch)(favicon, (i, o)=>{
        if (typeof i === "string" && i !== o) applyIcon(i);
    }, {
        immediate: true
    });
    return favicon;
}
const payloadMapping = {
    json: "application/json",
    text: "text/plain"
};
function isFetchOptions(obj) {
    return obj && (0, _shared.containsProp)(obj, "immediate", "refetch", "initialData", "timeout", "beforeFetch", "afterFetch", "onFetchError", "fetch", "updateDataOnError");
}
const reAbsolute = /^(?:[a-z][a-z\d+\-.]*:)?\/\//i;
function isAbsoluteURL(url) {
    return reAbsolute.test(url);
}
function headersToObject(headers) {
    if (typeof Headers !== "undefined" && headers instanceof Headers) return Object.fromEntries(headers.entries());
    return headers;
}
function combineCallbacks(combination, ...callbacks) {
    if (combination === "overwrite") return async (ctx)=>{
        const callback = callbacks[callbacks.length - 1];
        if (callback) return {
            ...ctx,
            ...await callback(ctx)
        };
        return ctx;
    };
    else return async (ctx)=>{
        for (const callback of callbacks)if (callback) ctx = {
            ...ctx,
            ...await callback(ctx)
        };
        return ctx;
    };
}
function createFetch(config = {}) {
    const _combination = config.combination || "chain";
    const _options = config.options || {};
    const _fetchOptions = config.fetchOptions || {};
    function useFactoryFetch(url, ...args) {
        const computedUrl = (0, _vueDemi.computed)(()=>{
            const baseUrl = (0, _shared.toValue)(config.baseUrl);
            const targetUrl = (0, _shared.toValue)(url);
            return baseUrl && !isAbsoluteURL(targetUrl) ? joinPaths(baseUrl, targetUrl) : targetUrl;
        });
        let options = _options;
        let fetchOptions = _fetchOptions;
        if (args.length > 0) {
            if (isFetchOptions(args[0])) options = {
                ...options,
                ...args[0],
                beforeFetch: combineCallbacks(_combination, _options.beforeFetch, args[0].beforeFetch),
                afterFetch: combineCallbacks(_combination, _options.afterFetch, args[0].afterFetch),
                onFetchError: combineCallbacks(_combination, _options.onFetchError, args[0].onFetchError)
            };
            else fetchOptions = {
                ...fetchOptions,
                ...args[0],
                headers: {
                    ...headersToObject(fetchOptions.headers) || {},
                    ...headersToObject(args[0].headers) || {}
                }
            };
        }
        if (args.length > 1 && isFetchOptions(args[1])) options = {
            ...options,
            ...args[1],
            beforeFetch: combineCallbacks(_combination, _options.beforeFetch, args[1].beforeFetch),
            afterFetch: combineCallbacks(_combination, _options.afterFetch, args[1].afterFetch),
            onFetchError: combineCallbacks(_combination, _options.onFetchError, args[1].onFetchError)
        };
        return useFetch(computedUrl, fetchOptions, options);
    }
    return useFactoryFetch;
}
function useFetch(url, ...args) {
    var _a;
    const supportsAbort = typeof AbortController === "function";
    let fetchOptions = {};
    let options = {
        immediate: true,
        refetch: false,
        timeout: 0,
        updateDataOnError: false
    };
    const config = {
        method: "GET",
        type: "text",
        payload: void 0
    };
    if (args.length > 0) {
        if (isFetchOptions(args[0])) options = {
            ...options,
            ...args[0]
        };
        else fetchOptions = args[0];
    }
    if (args.length > 1) {
        if (isFetchOptions(args[1])) options = {
            ...options,
            ...args[1]
        };
    }
    const { fetch =(_a = defaultWindow) == null ? void 0 : _a.fetch , initialData , timeout  } = options;
    const responseEvent = (0, _shared.createEventHook)();
    const errorEvent = (0, _shared.createEventHook)();
    const finallyEvent = (0, _shared.createEventHook)();
    const isFinished = (0, _vueDemi.ref)(false);
    const isFetching = (0, _vueDemi.ref)(false);
    const aborted = (0, _vueDemi.ref)(false);
    const statusCode = (0, _vueDemi.ref)(null);
    const response = (0, _vueDemi.shallowRef)(null);
    const error = (0, _vueDemi.shallowRef)(null);
    const data = (0, _vueDemi.shallowRef)(initialData || null);
    const canAbort = (0, _vueDemi.computed)(()=>supportsAbort && isFetching.value);
    let controller;
    let timer;
    const abort = ()=>{
        if (supportsAbort) {
            controller == null || controller.abort();
            controller = new AbortController();
            controller.signal.onabort = ()=>aborted.value = true;
            fetchOptions = {
                ...fetchOptions,
                signal: controller.signal
            };
        }
    };
    const loading = (isLoading)=>{
        isFetching.value = isLoading;
        isFinished.value = !isLoading;
    };
    if (timeout) timer = (0, _shared.useTimeoutFn)(abort, timeout, {
        immediate: false
    });
    let executeCounter = 0;
    const execute = async (throwOnFailed = false)=>{
        var _a2, _b;
        abort();
        loading(true);
        error.value = null;
        statusCode.value = null;
        aborted.value = false;
        executeCounter += 1;
        const currentExecuteCounter = executeCounter;
        const defaultFetchOptions = {
            method: config.method,
            headers: {}
        };
        if (config.payload) {
            const headers = headersToObject(defaultFetchOptions.headers);
            const payload = (0, _shared.toValue)(config.payload);
            if (!config.payloadType && payload && Object.getPrototypeOf(payload) === Object.prototype && !(payload instanceof FormData)) config.payloadType = "json";
            if (config.payloadType) headers["Content-Type"] = (_a2 = payloadMapping[config.payloadType]) != null ? _a2 : config.payloadType;
            defaultFetchOptions.body = config.payloadType === "json" ? JSON.stringify(payload) : payload;
        }
        let isCanceled = false;
        const context = {
            url: (0, _shared.toValue)(url),
            options: {
                ...defaultFetchOptions,
                ...fetchOptions
            },
            cancel: ()=>{
                isCanceled = true;
            }
        };
        if (options.beforeFetch) Object.assign(context, await options.beforeFetch(context));
        if (isCanceled || !fetch) {
            loading(false);
            return Promise.resolve(null);
        }
        let responseData = null;
        if (timer) timer.start();
        return fetch(context.url, {
            ...defaultFetchOptions,
            ...context.options,
            headers: {
                ...headersToObject(defaultFetchOptions.headers),
                ...headersToObject((_b = context.options) == null ? void 0 : _b.headers)
            }
        }).then(async (fetchResponse)=>{
            response.value = fetchResponse;
            statusCode.value = fetchResponse.status;
            responseData = await fetchResponse.clone()[config.type]();
            if (!fetchResponse.ok) {
                data.value = initialData || null;
                throw new Error(fetchResponse.statusText);
            }
            if (options.afterFetch) ({ data: responseData  } = await options.afterFetch({
                data: responseData,
                response: fetchResponse
            }));
            data.value = responseData;
            responseEvent.trigger(fetchResponse);
            return fetchResponse;
        }).catch(async (fetchError)=>{
            let errorData = fetchError.message || fetchError.name;
            if (options.onFetchError) ({ error: errorData , data: responseData  } = await options.onFetchError({
                data: responseData,
                error: fetchError,
                response: response.value
            }));
            error.value = errorData;
            if (options.updateDataOnError) data.value = responseData;
            errorEvent.trigger(fetchError);
            if (throwOnFailed) throw fetchError;
            return null;
        }).finally(()=>{
            if (currentExecuteCounter === executeCounter) loading(false);
            if (timer) timer.stop();
            finallyEvent.trigger(null);
        });
    };
    const refetch = (0, _shared.toRef)(options.refetch);
    (0, _vueDemi.watch)([
        refetch,
        (0, _shared.toRef)(url)
    ], ([refetch2])=>refetch2 && execute(), {
        deep: true
    });
    const shell = {
        isFinished: (0, _vueDemi.readonly)(isFinished),
        isFetching: (0, _vueDemi.readonly)(isFetching),
        statusCode,
        response,
        error,
        data,
        canAbort,
        aborted,
        abort,
        execute,
        onFetchResponse: responseEvent.on,
        onFetchError: errorEvent.on,
        onFetchFinally: finallyEvent.on,
        // method
        get: setMethod("GET"),
        put: setMethod("PUT"),
        post: setMethod("POST"),
        delete: setMethod("DELETE"),
        patch: setMethod("PATCH"),
        head: setMethod("HEAD"),
        options: setMethod("OPTIONS"),
        // type
        json: setType("json"),
        text: setType("text"),
        blob: setType("blob"),
        arrayBuffer: setType("arrayBuffer"),
        formData: setType("formData")
    };
    function setMethod(method) {
        return (payload, payloadType)=>{
            if (!isFetching.value) {
                config.method = method;
                config.payload = payload;
                config.payloadType = payloadType;
                if ((0, _vueDemi.isRef)(config.payload)) (0, _vueDemi.watch)([
                    refetch,
                    (0, _shared.toRef)(config.payload)
                ], ([refetch2])=>refetch2 && execute(), {
                    deep: true
                });
                return {
                    ...shell,
                    then (onFulfilled, onRejected) {
                        return waitUntilFinished().then(onFulfilled, onRejected);
                    }
                };
            }
            return void 0;
        };
    }
    function waitUntilFinished() {
        return new Promise((resolve, reject)=>{
            (0, _shared.until)(isFinished).toBe(true).then(()=>resolve(shell)).catch((error2)=>reject(error2));
        });
    }
    function setType(type) {
        return ()=>{
            if (!isFetching.value) {
                config.type = type;
                return {
                    ...shell,
                    then (onFulfilled, onRejected) {
                        return waitUntilFinished().then(onFulfilled, onRejected);
                    }
                };
            }
            return void 0;
        };
    }
    if (options.immediate) Promise.resolve().then(()=>execute());
    return {
        ...shell,
        then (onFulfilled, onRejected) {
            return waitUntilFinished().then(onFulfilled, onRejected);
        }
    };
}
function joinPaths(start, end) {
    if (!start.endsWith("/") && !end.startsWith("/")) return `${start}/${end}`;
    return `${start}${end}`;
}
const DEFAULT_OPTIONS = {
    multiple: true,
    accept: "*",
    reset: false,
    directory: false
};
function useFileDialog(options = {}) {
    const { document: document1 = defaultDocument  } = options;
    const files = (0, _vueDemi.ref)(null);
    const { on: onChange , trigger  } = (0, _shared.createEventHook)();
    let input;
    if (document1) {
        input = document1.createElement("input");
        input.type = "file";
        input.onchange = (event)=>{
            const result = event.target;
            files.value = result.files;
            trigger(files.value);
        };
    }
    const reset = ()=>{
        files.value = null;
        if (input && input.value) {
            input.value = "";
            trigger(null);
        }
    };
    const open = (localOptions)=>{
        if (!input) return;
        const _options = {
            ...DEFAULT_OPTIONS,
            ...options,
            ...localOptions
        };
        input.multiple = _options.multiple;
        input.accept = _options.accept;
        input.webkitdirectory = _options.directory;
        if ((0, _shared.hasOwn)(_options, "capture")) input.capture = _options.capture;
        if (_options.reset) reset();
        input.click();
    };
    return {
        files: (0, _vueDemi.readonly)(files),
        open,
        reset,
        onChange
    };
}
function useFileSystemAccess(options = {}) {
    const { window: _window = defaultWindow , dataType ="Text"  } = options;
    const window1 = _window;
    const isSupported = useSupported(()=>window1 && "showSaveFilePicker" in window1 && "showOpenFilePicker" in window1);
    const fileHandle = (0, _vueDemi.ref)();
    const data = (0, _vueDemi.ref)();
    const file = (0, _vueDemi.ref)();
    const fileName = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = file.value) == null ? void 0 : _a.name) != null ? _b : "";
    });
    const fileMIME = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = file.value) == null ? void 0 : _a.type) != null ? _b : "";
    });
    const fileSize = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = file.value) == null ? void 0 : _a.size) != null ? _b : 0;
    });
    const fileLastModified = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = file.value) == null ? void 0 : _a.lastModified) != null ? _b : 0;
    });
    async function open(_options = {}) {
        if (!isSupported.value) return;
        const [handle] = await window1.showOpenFilePicker({
            ...(0, _shared.toValue)(options),
            ..._options
        });
        fileHandle.value = handle;
        await updateData();
    }
    async function create(_options = {}) {
        if (!isSupported.value) return;
        fileHandle.value = await window1.showSaveFilePicker({
            ...options,
            ..._options
        });
        data.value = void 0;
        await updateData();
    }
    async function save(_options = {}) {
        if (!isSupported.value) return;
        if (!fileHandle.value) return saveAs(_options);
        if (data.value) {
            const writableStream = await fileHandle.value.createWritable();
            await writableStream.write(data.value);
            await writableStream.close();
        }
        await updateFile();
    }
    async function saveAs(_options = {}) {
        if (!isSupported.value) return;
        fileHandle.value = await window1.showSaveFilePicker({
            ...options,
            ..._options
        });
        if (data.value) {
            const writableStream = await fileHandle.value.createWritable();
            await writableStream.write(data.value);
            await writableStream.close();
        }
        await updateFile();
    }
    async function updateFile() {
        var _a;
        file.value = await ((_a = fileHandle.value) == null ? void 0 : _a.getFile());
    }
    async function updateData() {
        var _a, _b;
        await updateFile();
        const type = (0, _shared.toValue)(dataType);
        if (type === "Text") data.value = await ((_a = file.value) == null ? void 0 : _a.text());
        else if (type === "ArrayBuffer") data.value = await ((_b = file.value) == null ? void 0 : _b.arrayBuffer());
        else if (type === "Blob") data.value = file.value;
    }
    (0, _vueDemi.watch)(()=>(0, _shared.toValue)(dataType), updateData);
    return {
        isSupported,
        data,
        file,
        fileName,
        fileMIME,
        fileSize,
        fileLastModified,
        open,
        create,
        save,
        saveAs,
        updateData
    };
}
function useFocus(target, options = {}) {
    const { initialValue =false , focusVisible =false , preventScroll =false  } = options;
    const innerFocused = (0, _vueDemi.ref)(false);
    const targetElement = (0, _vueDemi.computed)(()=>unrefElement(target));
    useEventListener(targetElement, "focus", (event)=>{
        var _a, _b;
        if (!focusVisible || ((_b = (_a = event.target).matches) == null ? void 0 : _b.call(_a, ":focus-visible"))) innerFocused.value = true;
    });
    useEventListener(targetElement, "blur", ()=>innerFocused.value = false);
    const focused = (0, _vueDemi.computed)({
        get: ()=>innerFocused.value,
        set (value) {
            var _a, _b;
            if (!value && innerFocused.value) (_a = targetElement.value) == null || _a.blur();
            else if (value && !innerFocused.value) (_b = targetElement.value) == null || _b.focus({
                preventScroll
            });
        }
    });
    (0, _vueDemi.watch)(targetElement, ()=>{
        focused.value = initialValue;
    }, {
        immediate: true,
        flush: "post"
    });
    return {
        focused
    };
}
function useFocusWithin(target, options = {}) {
    const activeElement = useActiveElement(options);
    const targetElement = (0, _vueDemi.computed)(()=>unrefElement(target));
    const focused = (0, _vueDemi.computed)(()=>targetElement.value && activeElement.value ? targetElement.value.contains(activeElement.value) : false);
    return {
        focused
    };
}
function useFps(options) {
    var _a;
    const fps = (0, _vueDemi.ref)(0);
    if (typeof performance === "undefined") return fps;
    const every = (_a = options == null ? void 0 : options.every) != null ? _a : 10;
    let last = performance.now();
    let ticks = 0;
    useRafFn(()=>{
        ticks += 1;
        if (ticks >= every) {
            const now = performance.now();
            const diff = now - last;
            fps.value = Math.round(1e3 / (diff / ticks));
            last = now;
            ticks = 0;
        }
    });
    return fps;
}
const eventHandlers = [
    "fullscreenchange",
    "webkitfullscreenchange",
    "webkitendfullscreen",
    "mozfullscreenchange",
    "MSFullscreenChange"
];
function useFullscreen(target, options = {}) {
    const { document: document1 = defaultDocument , autoExit =false  } = options;
    const targetRef = (0, _vueDemi.computed)(()=>{
        var _a;
        return (_a = unrefElement(target)) != null ? _a : document1 == null ? void 0 : document1.querySelector("html");
    });
    const isFullscreen = (0, _vueDemi.ref)(false);
    const requestMethod = (0, _vueDemi.computed)(()=>{
        return [
            "requestFullscreen",
            "webkitRequestFullscreen",
            "webkitEnterFullscreen",
            "webkitEnterFullScreen",
            "webkitRequestFullScreen",
            "mozRequestFullScreen",
            "msRequestFullscreen"
        ].find((m)=>document1 && m in document1 || targetRef.value && m in targetRef.value);
    });
    const exitMethod = (0, _vueDemi.computed)(()=>{
        return [
            "exitFullscreen",
            "webkitExitFullscreen",
            "webkitExitFullScreen",
            "webkitCancelFullScreen",
            "mozCancelFullScreen",
            "msExitFullscreen"
        ].find((m)=>document1 && m in document1 || targetRef.value && m in targetRef.value);
    });
    const fullscreenEnabled = (0, _vueDemi.computed)(()=>{
        return [
            "fullScreen",
            "webkitIsFullScreen",
            "webkitDisplayingFullscreen",
            "mozFullScreen",
            "msFullscreenElement"
        ].find((m)=>document1 && m in document1 || targetRef.value && m in targetRef.value);
    });
    const fullscreenElementMethod = [
        "fullscreenElement",
        "webkitFullscreenElement",
        "mozFullScreenElement",
        "msFullscreenElement"
    ].find((m)=>document1 && m in document1);
    const isSupported = useSupported(()=>targetRef.value && document1 && requestMethod.value !== void 0 && exitMethod.value !== void 0 && fullscreenEnabled.value !== void 0);
    const isCurrentElementFullScreen = ()=>{
        if (fullscreenElementMethod) return (document1 == null ? void 0 : document1[fullscreenElementMethod]) === targetRef.value;
        return false;
    };
    const isElementFullScreen = ()=>{
        if (fullscreenEnabled.value) {
            if (document1 && document1[fullscreenEnabled.value] != null) return document1[fullscreenEnabled.value];
            else {
                const target2 = targetRef.value;
                if ((target2 == null ? void 0 : target2[fullscreenEnabled.value]) != null) return Boolean(target2[fullscreenEnabled.value]);
            }
        }
        return false;
    };
    async function exit() {
        if (!isSupported.value || !isFullscreen.value) return;
        if (exitMethod.value) {
            if ((document1 == null ? void 0 : document1[exitMethod.value]) != null) await document1[exitMethod.value]();
            else {
                const target2 = targetRef.value;
                if ((target2 == null ? void 0 : target2[exitMethod.value]) != null) await target2[exitMethod.value]();
            }
        }
        isFullscreen.value = false;
    }
    async function enter() {
        if (!isSupported.value || isFullscreen.value) return;
        if (isElementFullScreen()) await exit();
        const target2 = targetRef.value;
        if (requestMethod.value && (target2 == null ? void 0 : target2[requestMethod.value]) != null) {
            await target2[requestMethod.value]();
            isFullscreen.value = true;
        }
    }
    async function toggle() {
        await (isFullscreen.value ? exit() : enter());
    }
    const handlerCallback = ()=>{
        const isElementFullScreenValue = isElementFullScreen();
        if (!isElementFullScreenValue || isElementFullScreenValue && isCurrentElementFullScreen()) isFullscreen.value = isElementFullScreenValue;
    };
    useEventListener(document1, eventHandlers, handlerCallback, false);
    useEventListener(()=>unrefElement(targetRef), eventHandlers, handlerCallback, false);
    if (autoExit) (0, _shared.tryOnScopeDispose)(exit);
    return {
        isSupported,
        isFullscreen,
        enter,
        exit,
        toggle
    };
}
function mapGamepadToXbox360Controller(gamepad) {
    return (0, _vueDemi.computed)(()=>{
        if (gamepad.value) return {
            buttons: {
                a: gamepad.value.buttons[0],
                b: gamepad.value.buttons[1],
                x: gamepad.value.buttons[2],
                y: gamepad.value.buttons[3]
            },
            bumper: {
                left: gamepad.value.buttons[4],
                right: gamepad.value.buttons[5]
            },
            triggers: {
                left: gamepad.value.buttons[6],
                right: gamepad.value.buttons[7]
            },
            stick: {
                left: {
                    horizontal: gamepad.value.axes[0],
                    vertical: gamepad.value.axes[1],
                    button: gamepad.value.buttons[10]
                },
                right: {
                    horizontal: gamepad.value.axes[2],
                    vertical: gamepad.value.axes[3],
                    button: gamepad.value.buttons[11]
                }
            },
            dpad: {
                up: gamepad.value.buttons[12],
                down: gamepad.value.buttons[13],
                left: gamepad.value.buttons[14],
                right: gamepad.value.buttons[15]
            },
            back: gamepad.value.buttons[8],
            start: gamepad.value.buttons[9]
        };
        return null;
    });
}
function useGamepad(options = {}) {
    const { navigator =defaultNavigator  } = options;
    const isSupported = useSupported(()=>navigator && "getGamepads" in navigator);
    const gamepads = (0, _vueDemi.ref)([]);
    const onConnectedHook = (0, _shared.createEventHook)();
    const onDisconnectedHook = (0, _shared.createEventHook)();
    const stateFromGamepad = (gamepad)=>{
        const hapticActuators = [];
        const vibrationActuator = "vibrationActuator" in gamepad ? gamepad.vibrationActuator : null;
        if (vibrationActuator) hapticActuators.push(vibrationActuator);
        if (gamepad.hapticActuators) hapticActuators.push(...gamepad.hapticActuators);
        return {
            id: gamepad.id,
            index: gamepad.index,
            connected: gamepad.connected,
            mapping: gamepad.mapping,
            timestamp: gamepad.timestamp,
            vibrationActuator: gamepad.vibrationActuator,
            hapticActuators,
            axes: gamepad.axes.map((axes)=>axes),
            buttons: gamepad.buttons.map((button)=>({
                    pressed: button.pressed,
                    touched: button.touched,
                    value: button.value
                }))
        };
    };
    const updateGamepadState = ()=>{
        const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];
        for (const gamepad of _gamepads)if (gamepad && gamepads.value[gamepad.index]) gamepads.value[gamepad.index] = stateFromGamepad(gamepad);
    };
    const { isActive , pause , resume  } = useRafFn(updateGamepadState);
    const onGamepadConnected = (gamepad)=>{
        if (!gamepads.value.some(({ index  })=>index === gamepad.index)) {
            gamepads.value.push(stateFromGamepad(gamepad));
            onConnectedHook.trigger(gamepad.index);
        }
        resume();
    };
    const onGamepadDisconnected = (gamepad)=>{
        gamepads.value = gamepads.value.filter((x)=>x.index !== gamepad.index);
        onDisconnectedHook.trigger(gamepad.index);
    };
    useEventListener("gamepadconnected", (e)=>onGamepadConnected(e.gamepad));
    useEventListener("gamepaddisconnected", (e)=>onGamepadDisconnected(e.gamepad));
    (0, _shared.tryOnMounted)(()=>{
        const _gamepads = (navigator == null ? void 0 : navigator.getGamepads()) || [];
        for (const gamepad of _gamepads)if (gamepad && gamepads.value[gamepad.index]) onGamepadConnected(gamepad);
    });
    pause();
    return {
        isSupported,
        onConnected: onConnectedHook.on,
        onDisconnected: onDisconnectedHook.on,
        gamepads,
        pause,
        resume,
        isActive
    };
}
function useGeolocation(options = {}) {
    const { enableHighAccuracy =true , maximumAge =3e4 , timeout =27e3 , navigator =defaultNavigator , immediate =true  } = options;
    const isSupported = useSupported(()=>navigator && "geolocation" in navigator);
    const locatedAt = (0, _vueDemi.ref)(null);
    const error = (0, _vueDemi.shallowRef)(null);
    const coords = (0, _vueDemi.ref)({
        accuracy: 0,
        latitude: Number.POSITIVE_INFINITY,
        longitude: Number.POSITIVE_INFINITY,
        altitude: null,
        altitudeAccuracy: null,
        heading: null,
        speed: null
    });
    function updatePosition(position) {
        locatedAt.value = position.timestamp;
        coords.value = position.coords;
        error.value = null;
    }
    let watcher;
    function resume() {
        if (isSupported.value) watcher = navigator.geolocation.watchPosition(updatePosition, (err)=>error.value = err, {
            enableHighAccuracy,
            maximumAge,
            timeout
        });
    }
    if (immediate) resume();
    function pause() {
        if (watcher && navigator) navigator.geolocation.clearWatch(watcher);
    }
    (0, _shared.tryOnScopeDispose)(()=>{
        pause();
    });
    return {
        isSupported,
        coords,
        locatedAt,
        error,
        resume,
        pause
    };
}
const defaultEvents$1 = [
    "mousemove",
    "mousedown",
    "resize",
    "keydown",
    "touchstart",
    "wheel"
];
const oneMinute = 6e4;
function useIdle(timeout = oneMinute, options = {}) {
    const { initialState =false , listenForVisibilityChange =true , events =defaultEvents$1 , window: window1 = defaultWindow , eventFilter =(0, _shared.throttleFilter)(50)  } = options;
    const idle = (0, _vueDemi.ref)(initialState);
    const lastActive = (0, _vueDemi.ref)((0, _shared.timestamp)());
    let timer;
    const reset = ()=>{
        idle.value = false;
        clearTimeout(timer);
        timer = setTimeout(()=>idle.value = true, timeout);
    };
    const onEvent = (0, _shared.createFilterWrapper)(eventFilter, ()=>{
        lastActive.value = (0, _shared.timestamp)();
        reset();
    });
    if (window1) {
        const document1 = window1.document;
        for (const event of events)useEventListener(window1, event, onEvent, {
            passive: true
        });
        if (listenForVisibilityChange) useEventListener(document1, "visibilitychange", ()=>{
            if (!document1.hidden) onEvent();
        });
        reset();
    }
    return {
        idle,
        lastActive,
        reset
    };
}
async function loadImage(options) {
    return new Promise((resolve, reject)=>{
        const img = new Image();
        const { src , srcset , sizes , class: clazz , loading , crossorigin , referrerPolicy  } = options;
        img.src = src;
        if (srcset) img.srcset = srcset;
        if (sizes) img.sizes = sizes;
        if (clazz) img.className = clazz;
        if (loading) img.loading = loading;
        if (crossorigin) img.crossOrigin = crossorigin;
        if (referrerPolicy) img.referrerPolicy = referrerPolicy;
        img.onload = ()=>resolve(img);
        img.onerror = reject;
    });
}
function useImage(options, asyncStateOptions = {}) {
    const state = useAsyncState(()=>loadImage((0, _shared.toValue)(options)), void 0, {
        resetOnExecute: true,
        ...asyncStateOptions
    });
    (0, _vueDemi.watch)(()=>(0, _shared.toValue)(options), ()=>state.execute(asyncStateOptions.delay), {
        deep: true
    });
    return state;
}
const ARRIVED_STATE_THRESHOLD_PIXELS = 1;
function useScroll(element, options = {}) {
    const { throttle =0 , idle =200 , onStop =(0, _shared.noop) , onScroll =(0, _shared.noop) , offset ={
        left: 0,
        right: 0,
        top: 0,
        bottom: 0
    } , eventListenerOptions ={
        capture: false,
        passive: true
    } , behavior ="auto" , window: window1 = defaultWindow , onError =(e)=>{
        console.error(e);
    }  } = options;
    const internalX = (0, _vueDemi.ref)(0);
    const internalY = (0, _vueDemi.ref)(0);
    const x = (0, _vueDemi.computed)({
        get () {
            return internalX.value;
        },
        set (x2) {
            scrollTo1(x2, void 0);
        }
    });
    const y = (0, _vueDemi.computed)({
        get () {
            return internalY.value;
        },
        set (y2) {
            scrollTo1(void 0, y2);
        }
    });
    function scrollTo1(_x, _y) {
        var _a, _b, _c, _d;
        if (!window1) return;
        const _element = (0, _shared.toValue)(element);
        if (!_element) return;
        (_c = _element instanceof Document ? window1.document.body : _element) == null || _c.scrollTo({
            top: (_a = (0, _shared.toValue)(_y)) != null ? _a : y.value,
            left: (_b = (0, _shared.toValue)(_x)) != null ? _b : x.value,
            behavior: (0, _shared.toValue)(behavior)
        });
        const scrollContainer = ((_d = _element == null ? void 0 : _element.document) == null ? void 0 : _d.documentElement) || (_element == null ? void 0 : _element.documentElement) || _element;
        if (x != null) internalX.value = scrollContainer.scrollLeft;
        if (y != null) internalY.value = scrollContainer.scrollTop;
    }
    const isScrolling = (0, _vueDemi.ref)(false);
    const arrivedState = (0, _vueDemi.reactive)({
        left: true,
        right: false,
        top: true,
        bottom: false
    });
    const directions = (0, _vueDemi.reactive)({
        left: false,
        right: false,
        top: false,
        bottom: false
    });
    const onScrollEnd = (e)=>{
        if (!isScrolling.value) return;
        isScrolling.value = false;
        directions.left = false;
        directions.right = false;
        directions.top = false;
        directions.bottom = false;
        onStop(e);
    };
    const onScrollEndDebounced = (0, _shared.useDebounceFn)(onScrollEnd, throttle + idle);
    const setArrivedState = (target)=>{
        var _a;
        if (!window1) return;
        const el = ((_a = target == null ? void 0 : target.document) == null ? void 0 : _a.documentElement) || (target == null ? void 0 : target.documentElement) || unrefElement(target);
        const { display , flexDirection  } = getComputedStyle(el);
        const scrollLeft = el.scrollLeft;
        directions.left = scrollLeft < internalX.value;
        directions.right = scrollLeft > internalX.value;
        const left = Math.abs(scrollLeft) <= (offset.left || 0);
        const right = Math.abs(scrollLeft) + el.clientWidth >= el.scrollWidth - (offset.right || 0) - ARRIVED_STATE_THRESHOLD_PIXELS;
        if (display === "flex" && flexDirection === "row-reverse") {
            arrivedState.left = right;
            arrivedState.right = left;
        } else {
            arrivedState.left = left;
            arrivedState.right = right;
        }
        internalX.value = scrollLeft;
        let scrollTop = el.scrollTop;
        if (target === window1.document && !scrollTop) scrollTop = window1.document.body.scrollTop;
        directions.top = scrollTop < internalY.value;
        directions.bottom = scrollTop > internalY.value;
        const top = Math.abs(scrollTop) <= (offset.top || 0);
        const bottom = Math.abs(scrollTop) + el.clientHeight >= el.scrollHeight - (offset.bottom || 0) - ARRIVED_STATE_THRESHOLD_PIXELS;
        if (display === "flex" && flexDirection === "column-reverse") {
            arrivedState.top = bottom;
            arrivedState.bottom = top;
        } else {
            arrivedState.top = top;
            arrivedState.bottom = bottom;
        }
        internalY.value = scrollTop;
    };
    const onScrollHandler = (e)=>{
        var _a;
        if (!window1) return;
        const eventTarget = (_a = e.target.documentElement) != null ? _a : e.target;
        setArrivedState(eventTarget);
        isScrolling.value = true;
        onScrollEndDebounced(e);
        onScroll(e);
    };
    useEventListener(element, "scroll", throttle ? (0, _shared.useThrottleFn)(onScrollHandler, throttle, true, false) : onScrollHandler, eventListenerOptions);
    (0, _shared.tryOnMounted)(()=>{
        try {
            const _element = (0, _shared.toValue)(element);
            if (!_element) return;
            setArrivedState(_element);
        } catch (e) {
            onError(e);
        }
    });
    useEventListener(element, "scrollend", onScrollEnd, eventListenerOptions);
    return {
        x,
        y,
        isScrolling,
        arrivedState,
        directions,
        measure () {
            const _element = (0, _shared.toValue)(element);
            if (window1 && _element) setArrivedState(_element);
        }
    };
}
function resolveElement(el) {
    if (typeof Window !== "undefined" && el instanceof Window) return el.document.documentElement;
    if (typeof Document !== "undefined" && el instanceof Document) return el.documentElement;
    return el;
}
function useInfiniteScroll(element, onLoadMore, options = {}) {
    var _a;
    const { direction ="bottom" , interval =100 , canLoadMore =()=>true  } = options;
    const state = (0, _vueDemi.reactive)(useScroll(element, {
        ...options,
        offset: {
            [direction]: (_a = options.distance) != null ? _a : 0,
            ...options.offset
        }
    }));
    const promise = (0, _vueDemi.ref)();
    const isLoading = (0, _vueDemi.computed)(()=>!!promise.value);
    const observedElement = (0, _vueDemi.computed)(()=>{
        return resolveElement((0, _shared.toValue)(element));
    });
    const isElementVisible = useElementVisibility(observedElement);
    function checkAndLoad() {
        state.measure();
        if (!observedElement.value || !isElementVisible.value || !canLoadMore(observedElement.value)) return;
        const { scrollHeight , clientHeight , scrollWidth , clientWidth  } = observedElement.value;
        const isNarrower = direction === "bottom" || direction === "top" ? scrollHeight <= clientHeight : scrollWidth <= clientWidth;
        if (state.arrivedState[direction] || isNarrower) {
            if (!promise.value) promise.value = Promise.all([
                onLoadMore(state),
                new Promise((resolve)=>setTimeout(resolve, interval))
            ]).finally(()=>{
                promise.value = null;
                (0, _vueDemi.nextTick)(()=>checkAndLoad());
            });
        }
    }
    (0, _vueDemi.watch)(()=>[
            state.arrivedState[direction],
            isElementVisible.value
        ], checkAndLoad, {
        immediate: true
    });
    return {
        isLoading
    };
}
const defaultEvents = [
    "mousedown",
    "mouseup",
    "keydown",
    "keyup"
];
function useKeyModifier(modifier, options = {}) {
    const { events =defaultEvents , document: document1 = defaultDocument , initial =null  } = options;
    const state = (0, _vueDemi.ref)(initial);
    if (document1) events.forEach((listenerEvent)=>{
        useEventListener(document1, listenerEvent, (evt)=>{
            if (typeof evt.getModifierState === "function") state.value = evt.getModifierState(modifier);
        });
    });
    return state;
}
function useLocalStorage(key, initialValue, options = {}) {
    const { window: window1 = defaultWindow  } = options;
    return useStorage(key, initialValue, window1 == null ? void 0 : window1.localStorage, options);
}
const DefaultMagicKeysAliasMap = {
    ctrl: "control",
    command: "meta",
    cmd: "meta",
    option: "alt",
    up: "arrowup",
    down: "arrowdown",
    left: "arrowleft",
    right: "arrowright"
};
function useMagicKeys(options = {}) {
    const { reactive: useReactive = false , target =defaultWindow , aliasMap =DefaultMagicKeysAliasMap , passive =true , onEventFired =(0, _shared.noop)  } = options;
    const current = (0, _vueDemi.reactive)(/* @__PURE__ */ new Set());
    const obj = {
        toJSON () {
            return {};
        },
        current
    };
    const refs = useReactive ? (0, _vueDemi.reactive)(obj) : obj;
    const metaDeps = /* @__PURE__ */ new Set();
    const usedKeys = /* @__PURE__ */ new Set();
    function setRefs(key, value) {
        if (key in refs) {
            if (useReactive) refs[key] = value;
            else refs[key].value = value;
        }
    }
    function reset() {
        current.clear();
        for (const key of usedKeys)setRefs(key, false);
    }
    function updateRefs(e, value) {
        var _a, _b;
        const key = (_a = e.key) == null ? void 0 : _a.toLowerCase();
        const code = (_b = e.code) == null ? void 0 : _b.toLowerCase();
        const values = [
            code,
            key
        ].filter(Boolean);
        if (key) {
            if (value) current.add(key);
            else current.delete(key);
        }
        for (const key2 of values){
            usedKeys.add(key2);
            setRefs(key2, value);
        }
        if (key === "meta" && !value) {
            metaDeps.forEach((key2)=>{
                current.delete(key2);
                setRefs(key2, false);
            });
            metaDeps.clear();
        } else if (typeof e.getModifierState === "function" && e.getModifierState("Meta") && value) [
            ...current,
            ...values
        ].forEach((key2)=>metaDeps.add(key2));
    }
    useEventListener(target, "keydown", (e)=>{
        updateRefs(e, true);
        return onEventFired(e);
    }, {
        passive
    });
    useEventListener(target, "keyup", (e)=>{
        updateRefs(e, false);
        return onEventFired(e);
    }, {
        passive
    });
    useEventListener("blur", reset, {
        passive: true
    });
    useEventListener("focus", reset, {
        passive: true
    });
    const proxy = new Proxy(refs, {
        get (target2, prop, rec) {
            if (typeof prop !== "string") return Reflect.get(target2, prop, rec);
            prop = prop.toLowerCase();
            if (prop in aliasMap) prop = aliasMap[prop];
            if (!(prop in refs)) {
                if (/[+_-]/.test(prop)) {
                    const keys = prop.split(/[+_-]/g).map((i)=>i.trim());
                    refs[prop] = (0, _vueDemi.computed)(()=>keys.every((key)=>(0, _shared.toValue)(proxy[key])));
                } else refs[prop] = (0, _vueDemi.ref)(false);
            }
            const r = Reflect.get(target2, prop, rec);
            return useReactive ? (0, _shared.toValue)(r) : r;
        }
    });
    return proxy;
}
function usingElRef(source, cb) {
    if ((0, _shared.toValue)(source)) cb((0, _shared.toValue)(source));
}
function timeRangeToArray(timeRanges) {
    let ranges = [];
    for(let i = 0; i < timeRanges.length; ++i)ranges = [
        ...ranges,
        [
            timeRanges.start(i),
            timeRanges.end(i)
        ]
    ];
    return ranges;
}
function tracksToArray(tracks) {
    return Array.from(tracks).map(({ label , kind , language , mode , activeCues , cues , inBandMetadataTrackDispatchType  }, id)=>({
            id,
            label,
            kind,
            language,
            mode,
            activeCues,
            cues,
            inBandMetadataTrackDispatchType
        }));
}
const defaultOptions = {
    src: "",
    tracks: []
};
function useMediaControls(target, options = {}) {
    target = (0, _shared.toRef)(target);
    options = {
        ...defaultOptions,
        ...options
    };
    const { document: document1 = defaultDocument  } = options;
    const currentTime = (0, _vueDemi.ref)(0);
    const duration = (0, _vueDemi.ref)(0);
    const seeking = (0, _vueDemi.ref)(false);
    const volume = (0, _vueDemi.ref)(1);
    const waiting = (0, _vueDemi.ref)(false);
    const ended = (0, _vueDemi.ref)(false);
    const playing = (0, _vueDemi.ref)(false);
    const rate = (0, _vueDemi.ref)(1);
    const stalled = (0, _vueDemi.ref)(false);
    const buffered = (0, _vueDemi.ref)([]);
    const tracks = (0, _vueDemi.ref)([]);
    const selectedTrack = (0, _vueDemi.ref)(-1);
    const isPictureInPicture = (0, _vueDemi.ref)(false);
    const muted = (0, _vueDemi.ref)(false);
    const supportsPictureInPicture = document1 && "pictureInPictureEnabled" in document1;
    const sourceErrorEvent = (0, _shared.createEventHook)();
    const disableTrack = (track)=>{
        usingElRef(target, (el)=>{
            if (track) {
                const id = typeof track === "number" ? track : track.id;
                el.textTracks[id].mode = "disabled";
            } else for(let i = 0; i < el.textTracks.length; ++i)el.textTracks[i].mode = "disabled";
            selectedTrack.value = -1;
        });
    };
    const enableTrack = (track, disableTracks = true)=>{
        usingElRef(target, (el)=>{
            const id = typeof track === "number" ? track : track.id;
            if (disableTracks) disableTrack();
            el.textTracks[id].mode = "showing";
            selectedTrack.value = id;
        });
    };
    const togglePictureInPicture = ()=>{
        return new Promise((resolve, reject)=>{
            usingElRef(target, async (el)=>{
                if (supportsPictureInPicture) {
                    if (!isPictureInPicture.value) el.requestPictureInPicture().then(resolve).catch(reject);
                    else document1.exitPictureInPicture().then(resolve).catch(reject);
                }
            });
        });
    };
    (0, _vueDemi.watchEffect)(()=>{
        if (!document1) return;
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        const src = (0, _shared.toValue)(options.src);
        let sources = [];
        if (!src) return;
        if (typeof src === "string") sources = [
            {
                src
            }
        ];
        else if (Array.isArray(src)) sources = src;
        else if ((0, _shared.isObject)(src)) sources = [
            src
        ];
        el.querySelectorAll("source").forEach((e)=>{
            e.removeEventListener("error", sourceErrorEvent.trigger);
            e.remove();
        });
        sources.forEach(({ src: src2 , type  })=>{
            const source = document1.createElement("source");
            source.setAttribute("src", src2);
            source.setAttribute("type", type || "");
            source.addEventListener("error", sourceErrorEvent.trigger);
            el.appendChild(source);
        });
        el.load();
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        el.querySelectorAll("source").forEach((e)=>e.removeEventListener("error", sourceErrorEvent.trigger));
    });
    (0, _vueDemi.watch)([
        target,
        volume
    ], ()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        el.volume = volume.value;
    });
    (0, _vueDemi.watch)([
        target,
        muted
    ], ()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        el.muted = muted.value;
    });
    (0, _vueDemi.watch)([
        target,
        rate
    ], ()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        el.playbackRate = rate.value;
    });
    (0, _vueDemi.watchEffect)(()=>{
        if (!document1) return;
        const textTracks = (0, _shared.toValue)(options.tracks);
        const el = (0, _shared.toValue)(target);
        if (!textTracks || !textTracks.length || !el) return;
        el.querySelectorAll("track").forEach((e)=>e.remove());
        textTracks.forEach(({ default: isDefault , kind , label , src , srcLang  }, i)=>{
            const track = document1.createElement("track");
            track.default = isDefault || false;
            track.kind = kind;
            track.label = label;
            track.src = src;
            track.srclang = srcLang;
            if (track.default) selectedTrack.value = i;
            el.appendChild(track);
        });
    });
    const { ignoreUpdates: ignoreCurrentTimeUpdates  } = (0, _shared.watchIgnorable)(currentTime, (time)=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        el.currentTime = time;
    });
    const { ignoreUpdates: ignorePlayingUpdates  } = (0, _shared.watchIgnorable)(playing, (isPlaying)=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        isPlaying ? el.play() : el.pause();
    });
    useEventListener(target, "timeupdate", ()=>ignoreCurrentTimeUpdates(()=>currentTime.value = (0, _shared.toValue)(target).currentTime));
    useEventListener(target, "durationchange", ()=>duration.value = (0, _shared.toValue)(target).duration);
    useEventListener(target, "progress", ()=>buffered.value = timeRangeToArray((0, _shared.toValue)(target).buffered));
    useEventListener(target, "seeking", ()=>seeking.value = true);
    useEventListener(target, "seeked", ()=>seeking.value = false);
    useEventListener(target, [
        "waiting",
        "loadstart"
    ], ()=>{
        waiting.value = true;
        ignorePlayingUpdates(()=>playing.value = false);
    });
    useEventListener(target, "loadeddata", ()=>waiting.value = false);
    useEventListener(target, "playing", ()=>{
        waiting.value = false;
        ended.value = false;
        ignorePlayingUpdates(()=>playing.value = true);
    });
    useEventListener(target, "ratechange", ()=>rate.value = (0, _shared.toValue)(target).playbackRate);
    useEventListener(target, "stalled", ()=>stalled.value = true);
    useEventListener(target, "ended", ()=>ended.value = true);
    useEventListener(target, "pause", ()=>ignorePlayingUpdates(()=>playing.value = false));
    useEventListener(target, "play", ()=>ignorePlayingUpdates(()=>playing.value = true));
    useEventListener(target, "enterpictureinpicture", ()=>isPictureInPicture.value = true);
    useEventListener(target, "leavepictureinpicture", ()=>isPictureInPicture.value = false);
    useEventListener(target, "volumechange", ()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        volume.value = el.volume;
        muted.value = el.muted;
    });
    const listeners = [];
    const stop = (0, _vueDemi.watch)([
        target
    ], ()=>{
        const el = (0, _shared.toValue)(target);
        if (!el) return;
        stop();
        listeners[0] = useEventListener(el.textTracks, "addtrack", ()=>tracks.value = tracksToArray(el.textTracks));
        listeners[1] = useEventListener(el.textTracks, "removetrack", ()=>tracks.value = tracksToArray(el.textTracks));
        listeners[2] = useEventListener(el.textTracks, "change", ()=>tracks.value = tracksToArray(el.textTracks));
    });
    (0, _shared.tryOnScopeDispose)(()=>listeners.forEach((listener)=>listener()));
    return {
        currentTime,
        duration,
        waiting,
        seeking,
        ended,
        stalled,
        buffered,
        playing,
        rate,
        // Volume
        volume,
        muted,
        // Tracks
        tracks,
        selectedTrack,
        enableTrack,
        disableTrack,
        // Picture in Picture
        supportsPictureInPicture,
        togglePictureInPicture,
        isPictureInPicture,
        // Events
        onSourceError: sourceErrorEvent.on
    };
}
function getMapVue2Compat() {
    const data = (0, _vueDemi.shallowReactive)({});
    return {
        get: (key)=>data[key],
        set: (key, value)=>(0, _vueDemi.set)(data, key, value),
        has: (key)=>(0, _shared.hasOwn)(data, key),
        delete: (key)=>(0, _vueDemi.del)(data, key),
        clear: ()=>{
            Object.keys(data).forEach((key)=>{
                (0, _vueDemi.del)(data, key);
            });
        }
    };
}
function useMemoize(resolver, options) {
    const initCache = ()=>{
        if (options == null ? void 0 : options.cache) return (0, _vueDemi.shallowReactive)(options.cache);
        if (0, _vueDemi.isVue2) return getMapVue2Compat();
        return (0, _vueDemi.shallowReactive)(/* @__PURE__ */ new Map());
    };
    const cache = initCache();
    const generateKey = (...args)=>(options == null ? void 0 : options.getKey) ? options.getKey(...args) : JSON.stringify(args);
    const _loadData = (key, ...args)=>{
        cache.set(key, resolver(...args));
        return cache.get(key);
    };
    const loadData = (...args)=>_loadData(generateKey(...args), ...args);
    const deleteData = (...args)=>{
        cache.delete(generateKey(...args));
    };
    const clearData = ()=>{
        cache.clear();
    };
    const memoized = (...args)=>{
        const key = generateKey(...args);
        if (cache.has(key)) return cache.get(key);
        return _loadData(key, ...args);
    };
    memoized.load = loadData;
    memoized.delete = deleteData;
    memoized.clear = clearData;
    memoized.generateKey = generateKey;
    memoized.cache = cache;
    return memoized;
}
function useMemory(options = {}) {
    const memory = (0, _vueDemi.ref)();
    const isSupported = useSupported(()=>typeof performance !== "undefined" && "memory" in performance);
    if (isSupported.value) {
        const { interval =1e3  } = options;
        (0, _shared.useIntervalFn)(()=>{
            memory.value = performance.memory;
        }, interval, {
            immediate: options.immediate,
            immediateCallback: options.immediateCallback
        });
    }
    return {
        isSupported,
        memory
    };
}
const UseMouseBuiltinExtractors = {
    page: (event)=>[
            event.pageX,
            event.pageY
        ],
    client: (event)=>[
            event.clientX,
            event.clientY
        ],
    screen: (event)=>[
            event.screenX,
            event.screenY
        ],
    movement: (event)=>event instanceof Touch ? null : [
            event.movementX,
            event.movementY
        ]
};
function useMouse(options = {}) {
    const { type ="page" , touch =true , resetOnTouchEnds =false , initialValue ={
        x: 0,
        y: 0
    } , window: window1 = defaultWindow , target =window1 , scroll =true , eventFilter  } = options;
    let _prevMouseEvent = null;
    const x = (0, _vueDemi.ref)(initialValue.x);
    const y = (0, _vueDemi.ref)(initialValue.y);
    const sourceType = (0, _vueDemi.ref)(null);
    const extractor = typeof type === "function" ? type : UseMouseBuiltinExtractors[type];
    const mouseHandler = (event)=>{
        const result = extractor(event);
        _prevMouseEvent = event;
        if (result) {
            [x.value, y.value] = result;
            sourceType.value = "mouse";
        }
    };
    const touchHandler = (event)=>{
        if (event.touches.length > 0) {
            const result = extractor(event.touches[0]);
            if (result) {
                [x.value, y.value] = result;
                sourceType.value = "touch";
            }
        }
    };
    const scrollHandler = ()=>{
        if (!_prevMouseEvent || !window1) return;
        const pos = extractor(_prevMouseEvent);
        if (_prevMouseEvent instanceof MouseEvent && pos) {
            x.value = pos[0] + window1.scrollX;
            y.value = pos[1] + window1.scrollY;
        }
    };
    const reset = ()=>{
        x.value = initialValue.x;
        y.value = initialValue.y;
    };
    const mouseHandlerWrapper = eventFilter ? (event)=>eventFilter(()=>mouseHandler(event), {}) : (event)=>mouseHandler(event);
    const touchHandlerWrapper = eventFilter ? (event)=>eventFilter(()=>touchHandler(event), {}) : (event)=>touchHandler(event);
    const scrollHandlerWrapper = eventFilter ? ()=>eventFilter(()=>scrollHandler(), {}) : ()=>scrollHandler();
    if (target) {
        const listenerOptions = {
            passive: true
        };
        useEventListener(target, [
            "mousemove",
            "dragover"
        ], mouseHandlerWrapper, listenerOptions);
        if (touch && type !== "movement") {
            useEventListener(target, [
                "touchstart",
                "touchmove"
            ], touchHandlerWrapper, listenerOptions);
            if (resetOnTouchEnds) useEventListener(target, "touchend", reset, listenerOptions);
        }
        if (scroll && type === "page") useEventListener(window1, "scroll", scrollHandlerWrapper, {
            passive: true
        });
    }
    return {
        x,
        y,
        sourceType
    };
}
function useMouseInElement(target, options = {}) {
    const { handleOutside =true , window: window1 = defaultWindow  } = options;
    const type = options.type || "page";
    const { x , y , sourceType  } = useMouse(options);
    const targetRef = (0, _vueDemi.ref)(target != null ? target : window1 == null ? void 0 : window1.document.body);
    const elementX = (0, _vueDemi.ref)(0);
    const elementY = (0, _vueDemi.ref)(0);
    const elementPositionX = (0, _vueDemi.ref)(0);
    const elementPositionY = (0, _vueDemi.ref)(0);
    const elementHeight = (0, _vueDemi.ref)(0);
    const elementWidth = (0, _vueDemi.ref)(0);
    const isOutside = (0, _vueDemi.ref)(true);
    let stop = ()=>{};
    if (window1) {
        stop = (0, _vueDemi.watch)([
            targetRef,
            x,
            y
        ], ()=>{
            const el = unrefElement(targetRef);
            if (!el) return;
            const { left , top , width , height  } = el.getBoundingClientRect();
            elementPositionX.value = left + (type === "page" ? window1.pageXOffset : 0);
            elementPositionY.value = top + (type === "page" ? window1.pageYOffset : 0);
            elementHeight.value = height;
            elementWidth.value = width;
            const elX = x.value - elementPositionX.value;
            const elY = y.value - elementPositionY.value;
            isOutside.value = width === 0 || height === 0 || elX < 0 || elY < 0 || elX > width || elY > height;
            if (handleOutside || !isOutside.value) {
                elementX.value = elX;
                elementY.value = elY;
            }
        }, {
            immediate: true
        });
        useEventListener(document, "mouseleave", ()=>{
            isOutside.value = true;
        });
    }
    return {
        x,
        y,
        sourceType,
        elementX,
        elementY,
        elementPositionX,
        elementPositionY,
        elementHeight,
        elementWidth,
        isOutside,
        stop
    };
}
function useMousePressed(options = {}) {
    const { touch =true , drag =true , capture =false , initialValue =false , window: window1 = defaultWindow  } = options;
    const pressed = (0, _vueDemi.ref)(initialValue);
    const sourceType = (0, _vueDemi.ref)(null);
    if (!window1) return {
        pressed,
        sourceType
    };
    const onPressed = (srcType)=>()=>{
            pressed.value = true;
            sourceType.value = srcType;
        };
    const onReleased = ()=>{
        pressed.value = false;
        sourceType.value = null;
    };
    const target = (0, _vueDemi.computed)(()=>unrefElement(options.target) || window1);
    useEventListener(target, "mousedown", onPressed("mouse"), {
        passive: true,
        capture
    });
    useEventListener(window1, "mouseleave", onReleased, {
        passive: true,
        capture
    });
    useEventListener(window1, "mouseup", onReleased, {
        passive: true,
        capture
    });
    if (drag) {
        useEventListener(target, "dragstart", onPressed("mouse"), {
            passive: true,
            capture
        });
        useEventListener(window1, "drop", onReleased, {
            passive: true,
            capture
        });
        useEventListener(window1, "dragend", onReleased, {
            passive: true,
            capture
        });
    }
    if (touch) {
        useEventListener(target, "touchstart", onPressed("touch"), {
            passive: true,
            capture
        });
        useEventListener(window1, "touchend", onReleased, {
            passive: true,
            capture
        });
        useEventListener(window1, "touchcancel", onReleased, {
            passive: true,
            capture
        });
    }
    return {
        pressed,
        sourceType
    };
}
function useNavigatorLanguage(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const navigator = window1 == null ? void 0 : window1.navigator;
    const isSupported = useSupported(()=>navigator && "language" in navigator);
    const language = (0, _vueDemi.ref)(navigator == null ? void 0 : navigator.language);
    useEventListener(window1, "languagechange", ()=>{
        if (navigator) language.value = navigator.language;
    });
    return {
        isSupported,
        language
    };
}
function useNetwork(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const navigator = window1 == null ? void 0 : window1.navigator;
    const isSupported = useSupported(()=>navigator && "connection" in navigator);
    const isOnline = (0, _vueDemi.ref)(true);
    const saveData = (0, _vueDemi.ref)(false);
    const offlineAt = (0, _vueDemi.ref)(void 0);
    const onlineAt = (0, _vueDemi.ref)(void 0);
    const downlink = (0, _vueDemi.ref)(void 0);
    const downlinkMax = (0, _vueDemi.ref)(void 0);
    const rtt = (0, _vueDemi.ref)(void 0);
    const effectiveType = (0, _vueDemi.ref)(void 0);
    const type = (0, _vueDemi.ref)("unknown");
    const connection = isSupported.value && navigator.connection;
    function updateNetworkInformation() {
        if (!navigator) return;
        isOnline.value = navigator.onLine;
        offlineAt.value = isOnline.value ? void 0 : Date.now();
        onlineAt.value = isOnline.value ? Date.now() : void 0;
        if (connection) {
            downlink.value = connection.downlink;
            downlinkMax.value = connection.downlinkMax;
            effectiveType.value = connection.effectiveType;
            rtt.value = connection.rtt;
            saveData.value = connection.saveData;
            type.value = connection.type;
        }
    }
    if (window1) {
        useEventListener(window1, "offline", ()=>{
            isOnline.value = false;
            offlineAt.value = Date.now();
        });
        useEventListener(window1, "online", ()=>{
            isOnline.value = true;
            onlineAt.value = Date.now();
        });
    }
    if (connection) useEventListener(connection, "change", updateNetworkInformation, false);
    updateNetworkInformation();
    return {
        isSupported,
        isOnline,
        saveData,
        offlineAt,
        onlineAt,
        downlink,
        downlinkMax,
        effectiveType,
        rtt,
        type
    };
}
function useNow(options = {}) {
    const { controls: exposeControls = false , interval ="requestAnimationFrame"  } = options;
    const now = (0, _vueDemi.ref)(/* @__PURE__ */ new Date());
    const update = ()=>now.value = /* @__PURE__ */ new Date();
    const controls = interval === "requestAnimationFrame" ? useRafFn(update, {
        immediate: true
    }) : (0, _shared.useIntervalFn)(update, interval, {
        immediate: true
    });
    if (exposeControls) return {
        now,
        ...controls
    };
    else return now;
}
function useObjectUrl(object) {
    const url = (0, _vueDemi.ref)();
    const release = ()=>{
        if (url.value) URL.revokeObjectURL(url.value);
        url.value = void 0;
    };
    (0, _vueDemi.watch)(()=>(0, _shared.toValue)(object), (newObject)=>{
        release();
        if (newObject) url.value = URL.createObjectURL(newObject);
    }, {
        immediate: true
    });
    (0, _shared.tryOnScopeDispose)(release);
    return (0, _vueDemi.readonly)(url);
}
function useClamp(value, min, max) {
    if (typeof value === "function" || (0, _vueDemi.isReadonly)(value)) return (0, _vueDemi.computed)(()=>(0, _shared.clamp)((0, _shared.toValue)(value), (0, _shared.toValue)(min), (0, _shared.toValue)(max)));
    const _value = (0, _vueDemi.ref)(value);
    return (0, _vueDemi.computed)({
        get () {
            return _value.value = (0, _shared.clamp)(_value.value, (0, _shared.toValue)(min), (0, _shared.toValue)(max));
        },
        set (value2) {
            _value.value = (0, _shared.clamp)(value2, (0, _shared.toValue)(min), (0, _shared.toValue)(max));
        }
    });
}
function useOffsetPagination(options) {
    const { total =Number.POSITIVE_INFINITY , pageSize =10 , page =1 , onPageChange =(0, _shared.noop) , onPageSizeChange =(0, _shared.noop) , onPageCountChange =(0, _shared.noop)  } = options;
    const currentPageSize = useClamp(pageSize, 1, Number.POSITIVE_INFINITY);
    const pageCount = (0, _vueDemi.computed)(()=>Math.max(1, Math.ceil((0, _shared.toValue)(total) / (0, _shared.toValue)(currentPageSize))));
    const currentPage = useClamp(page, 1, pageCount);
    const isFirstPage = (0, _vueDemi.computed)(()=>currentPage.value === 1);
    const isLastPage = (0, _vueDemi.computed)(()=>currentPage.value === pageCount.value);
    if ((0, _vueDemi.isRef)(page)) (0, _shared.syncRef)(page, currentPage, {
        direction: (0, _vueDemi.isReadonly)(page) ? "ltr" : "both"
    });
    if ((0, _vueDemi.isRef)(pageSize)) (0, _shared.syncRef)(pageSize, currentPageSize, {
        direction: (0, _vueDemi.isReadonly)(pageSize) ? "ltr" : "both"
    });
    function prev() {
        currentPage.value--;
    }
    function next() {
        currentPage.value++;
    }
    const returnValue = {
        currentPage,
        currentPageSize,
        pageCount,
        isFirstPage,
        isLastPage,
        prev,
        next
    };
    (0, _vueDemi.watch)(currentPage, ()=>{
        onPageChange((0, _vueDemi.reactive)(returnValue));
    });
    (0, _vueDemi.watch)(currentPageSize, ()=>{
        onPageSizeChange((0, _vueDemi.reactive)(returnValue));
    });
    (0, _vueDemi.watch)(pageCount, ()=>{
        onPageCountChange((0, _vueDemi.reactive)(returnValue));
    });
    return returnValue;
}
function useOnline(options = {}) {
    const { isOnline  } = useNetwork(options);
    return isOnline;
}
function usePageLeave(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const isLeft = (0, _vueDemi.ref)(false);
    const handler = (event)=>{
        if (!window1) return;
        event = event || window1.event;
        const from = event.relatedTarget || event.toElement;
        isLeft.value = !from;
    };
    if (window1) {
        useEventListener(window1, "mouseout", handler, {
            passive: true
        });
        useEventListener(window1.document, "mouseleave", handler, {
            passive: true
        });
        useEventListener(window1.document, "mouseenter", handler, {
            passive: true
        });
    }
    return isLeft;
}
function useScreenOrientation(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const isSupported = useSupported(()=>window1 && "screen" in window1 && "orientation" in window1.screen);
    const screenOrientation = isSupported.value ? window1.screen.orientation : {};
    const orientation = (0, _vueDemi.ref)(screenOrientation.type);
    const angle = (0, _vueDemi.ref)(screenOrientation.angle || 0);
    if (isSupported.value) useEventListener(window1, "orientationchange", ()=>{
        orientation.value = screenOrientation.type;
        angle.value = screenOrientation.angle;
    });
    const lockOrientation = (type)=>{
        if (isSupported.value && typeof screenOrientation.lock === "function") return screenOrientation.lock(type);
        return Promise.reject(new Error("Not supported"));
    };
    const unlockOrientation = ()=>{
        if (isSupported.value && typeof screenOrientation.unlock === "function") screenOrientation.unlock();
    };
    return {
        isSupported,
        orientation,
        angle,
        lockOrientation,
        unlockOrientation
    };
}
function useParallax(target, options = {}) {
    const { deviceOrientationTiltAdjust =(i)=>i , deviceOrientationRollAdjust =(i)=>i , mouseTiltAdjust =(i)=>i , mouseRollAdjust =(i)=>i , window: window1 = defaultWindow  } = options;
    const orientation = (0, _vueDemi.reactive)(useDeviceOrientation({
        window: window1
    }));
    const screenOrientation = (0, _vueDemi.reactive)(useScreenOrientation({
        window: window1
    }));
    const { elementX: x , elementY: y , elementWidth: width , elementHeight: height  } = useMouseInElement(target, {
        handleOutside: false,
        window: window1
    });
    const source = (0, _vueDemi.computed)(()=>{
        if (orientation.isSupported && (orientation.alpha != null && orientation.alpha !== 0 || orientation.gamma != null && orientation.gamma !== 0)) return "deviceOrientation";
        return "mouse";
    });
    const roll = (0, _vueDemi.computed)(()=>{
        if (source.value === "deviceOrientation") {
            let value;
            switch(screenOrientation.orientation){
                case "landscape-primary":
                    value = orientation.gamma / 90;
                    break;
                case "landscape-secondary":
                    value = -orientation.gamma / 90;
                    break;
                case "portrait-primary":
                    value = -orientation.beta / 90;
                    break;
                case "portrait-secondary":
                    value = orientation.beta / 90;
                    break;
                default:
                    value = -orientation.beta / 90;
            }
            return deviceOrientationRollAdjust(value);
        } else {
            const value = -(y.value - height.value / 2) / height.value;
            return mouseRollAdjust(value);
        }
    });
    const tilt = (0, _vueDemi.computed)(()=>{
        if (source.value === "deviceOrientation") {
            let value;
            switch(screenOrientation.orientation){
                case "landscape-primary":
                    value = orientation.beta / 90;
                    break;
                case "landscape-secondary":
                    value = -orientation.beta / 90;
                    break;
                case "portrait-primary":
                    value = orientation.gamma / 90;
                    break;
                case "portrait-secondary":
                    value = -orientation.gamma / 90;
                    break;
                default:
                    value = orientation.gamma / 90;
            }
            return deviceOrientationTiltAdjust(value);
        } else {
            const value = (x.value - width.value / 2) / width.value;
            return mouseTiltAdjust(value);
        }
    });
    return {
        roll,
        tilt,
        source
    };
}
function useParentElement(element = useCurrentElement()) {
    const parentElement = (0, _vueDemi.shallowRef)();
    const update = ()=>{
        const el = unrefElement(element);
        if (el) parentElement.value = el.parentElement;
    };
    (0, _shared.tryOnMounted)(update);
    (0, _vueDemi.watch)(()=>(0, _shared.toValue)(element), update);
    return parentElement;
}
function usePerformanceObserver(options, callback) {
    const { window: window1 = defaultWindow , immediate =true , ...performanceOptions } = options;
    const isSupported = useSupported(()=>window1 && "PerformanceObserver" in window1);
    let observer;
    const stop = ()=>{
        observer == null || observer.disconnect();
    };
    const start = ()=>{
        if (isSupported.value) {
            stop();
            observer = new PerformanceObserver(callback);
            observer.observe(performanceOptions);
        }
    };
    (0, _shared.tryOnScopeDispose)(stop);
    if (immediate) start();
    return {
        isSupported,
        start,
        stop
    };
}
const defaultState = {
    x: 0,
    y: 0,
    pointerId: 0,
    pressure: 0,
    tiltX: 0,
    tiltY: 0,
    width: 0,
    height: 0,
    twist: 0,
    pointerType: null
};
const keys = /* @__PURE__ */ Object.keys(defaultState);
function usePointer(options = {}) {
    const { target =defaultWindow  } = options;
    const isInside = (0, _vueDemi.ref)(false);
    const state = (0, _vueDemi.ref)(options.initialValue || {});
    Object.assign(state.value, defaultState, state.value);
    const handler = (event)=>{
        isInside.value = true;
        if (options.pointerTypes && !options.pointerTypes.includes(event.pointerType)) return;
        state.value = (0, _shared.objectPick)(event, keys, false);
    };
    if (target) {
        const listenerOptions = {
            passive: true
        };
        useEventListener(target, [
            "pointerdown",
            "pointermove",
            "pointerup"
        ], handler, listenerOptions);
        useEventListener(target, "pointerleave", ()=>isInside.value = false, listenerOptions);
    }
    return {
        ...(0, _shared.toRefs)(state),
        isInside
    };
}
function usePointerLock(target, options = {}) {
    const { document: document1 = defaultDocument  } = options;
    const isSupported = useSupported(()=>document1 && "pointerLockElement" in document1);
    const element = (0, _vueDemi.ref)();
    const triggerElement = (0, _vueDemi.ref)();
    let targetElement;
    if (isSupported.value) {
        useEventListener(document1, "pointerlockchange", ()=>{
            var _a;
            const currentElement = (_a = document1.pointerLockElement) != null ? _a : element.value;
            if (targetElement && currentElement === targetElement) {
                element.value = document1.pointerLockElement;
                if (!element.value) targetElement = triggerElement.value = null;
            }
        });
        useEventListener(document1, "pointerlockerror", ()=>{
            var _a;
            const currentElement = (_a = document1.pointerLockElement) != null ? _a : element.value;
            if (targetElement && currentElement === targetElement) {
                const action = document1.pointerLockElement ? "release" : "acquire";
                throw new Error(`Failed to ${action} pointer lock.`);
            }
        });
    }
    async function lock(e) {
        var _a;
        if (!isSupported.value) throw new Error("Pointer Lock API is not supported by your browser.");
        triggerElement.value = e instanceof Event ? e.currentTarget : null;
        targetElement = e instanceof Event ? (_a = unrefElement(target)) != null ? _a : triggerElement.value : unrefElement(e);
        if (!targetElement) throw new Error("Target element undefined.");
        targetElement.requestPointerLock();
        return await (0, _shared.until)(element).toBe(targetElement);
    }
    async function unlock() {
        if (!element.value) return false;
        document1.exitPointerLock();
        await (0, _shared.until)(element).toBeNull();
        return true;
    }
    return {
        isSupported,
        element,
        triggerElement,
        lock,
        unlock
    };
}
function usePointerSwipe(target, options = {}) {
    const targetRef = (0, _shared.toRef)(target);
    const { threshold =50 , onSwipe , onSwipeEnd , onSwipeStart , disableTextSelect =false  } = options;
    const posStart = (0, _vueDemi.reactive)({
        x: 0,
        y: 0
    });
    const updatePosStart = (x, y)=>{
        posStart.x = x;
        posStart.y = y;
    };
    const posEnd = (0, _vueDemi.reactive)({
        x: 0,
        y: 0
    });
    const updatePosEnd = (x, y)=>{
        posEnd.x = x;
        posEnd.y = y;
    };
    const distanceX = (0, _vueDemi.computed)(()=>posStart.x - posEnd.x);
    const distanceY = (0, _vueDemi.computed)(()=>posStart.y - posEnd.y);
    const { max , abs  } = Math;
    const isThresholdExceeded = (0, _vueDemi.computed)(()=>max(abs(distanceX.value), abs(distanceY.value)) >= threshold);
    const isSwiping = (0, _vueDemi.ref)(false);
    const isPointerDown = (0, _vueDemi.ref)(false);
    const direction = (0, _vueDemi.computed)(()=>{
        if (!isThresholdExceeded.value) return "none";
        if (abs(distanceX.value) > abs(distanceY.value)) return distanceX.value > 0 ? "left" : "right";
        else return distanceY.value > 0 ? "up" : "down";
    });
    const eventIsAllowed = (e)=>{
        var _a, _b, _c;
        const isReleasingButton = e.buttons === 0;
        const isPrimaryButton = e.buttons === 1;
        return (_c = (_b = (_a = options.pointerTypes) == null ? void 0 : _a.includes(e.pointerType)) != null ? _b : isReleasingButton || isPrimaryButton) != null ? _c : true;
    };
    const stops = [
        useEventListener(target, "pointerdown", (e)=>{
            if (!eventIsAllowed(e)) return;
            isPointerDown.value = true;
            const eventTarget = e.target;
            eventTarget == null || eventTarget.setPointerCapture(e.pointerId);
            const { clientX: x , clientY: y  } = e;
            updatePosStart(x, y);
            updatePosEnd(x, y);
            onSwipeStart == null || onSwipeStart(e);
        }),
        useEventListener(target, "pointermove", (e)=>{
            if (!eventIsAllowed(e)) return;
            if (!isPointerDown.value) return;
            const { clientX: x , clientY: y  } = e;
            updatePosEnd(x, y);
            if (!isSwiping.value && isThresholdExceeded.value) isSwiping.value = true;
            if (isSwiping.value) onSwipe == null || onSwipe(e);
        }),
        useEventListener(target, "pointerup", (e)=>{
            if (!eventIsAllowed(e)) return;
            if (isSwiping.value) onSwipeEnd == null || onSwipeEnd(e, direction.value);
            isPointerDown.value = false;
            isSwiping.value = false;
        })
    ];
    (0, _shared.tryOnMounted)(()=>{
        var _a, _b, _c, _d, _e, _f, _g, _h;
        (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null || _b.setProperty("touch-action", "none");
        if (disableTextSelect) {
            (_d = (_c = targetRef.value) == null ? void 0 : _c.style) == null || _d.setProperty("-webkit-user-select", "none");
            (_f = (_e = targetRef.value) == null ? void 0 : _e.style) == null || _f.setProperty("-ms-user-select", "none");
            (_h = (_g = targetRef.value) == null ? void 0 : _g.style) == null || _h.setProperty("user-select", "none");
        }
    });
    const stop = ()=>stops.forEach((s)=>s());
    return {
        isSwiping: (0, _vueDemi.readonly)(isSwiping),
        direction: (0, _vueDemi.readonly)(direction),
        posStart: (0, _vueDemi.readonly)(posStart),
        posEnd: (0, _vueDemi.readonly)(posEnd),
        distanceX,
        distanceY,
        stop
    };
}
function usePreferredColorScheme(options) {
    const isLight = useMediaQuery("(prefers-color-scheme: light)", options);
    const isDark = useMediaQuery("(prefers-color-scheme: dark)", options);
    return (0, _vueDemi.computed)(()=>{
        if (isDark.value) return "dark";
        if (isLight.value) return "light";
        return "no-preference";
    });
}
function usePreferredContrast(options) {
    const isMore = useMediaQuery("(prefers-contrast: more)", options);
    const isLess = useMediaQuery("(prefers-contrast: less)", options);
    const isCustom = useMediaQuery("(prefers-contrast: custom)", options);
    return (0, _vueDemi.computed)(()=>{
        if (isMore.value) return "more";
        if (isLess.value) return "less";
        if (isCustom.value) return "custom";
        return "no-preference";
    });
}
function usePreferredLanguages(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    if (!window1) return (0, _vueDemi.ref)([
        "en"
    ]);
    const navigator = window1.navigator;
    const value = (0, _vueDemi.ref)(navigator.languages);
    useEventListener(window1, "languagechange", ()=>{
        value.value = navigator.languages;
    });
    return value;
}
function usePreferredReducedMotion(options) {
    const isReduced = useMediaQuery("(prefers-reduced-motion: reduce)", options);
    return (0, _vueDemi.computed)(()=>{
        if (isReduced.value) return "reduce";
        return "no-preference";
    });
}
function usePrevious(value, initialValue) {
    const previous = (0, _vueDemi.shallowRef)(initialValue);
    (0, _vueDemi.watch)((0, _shared.toRef)(value), (_, oldValue)=>{
        previous.value = oldValue;
    }, {
        flush: "sync"
    });
    return (0, _vueDemi.readonly)(previous);
}
const topVarName = "--vueuse-safe-area-top";
const rightVarName = "--vueuse-safe-area-right";
const bottomVarName = "--vueuse-safe-area-bottom";
const leftVarName = "--vueuse-safe-area-left";
function useScreenSafeArea() {
    const top = (0, _vueDemi.ref)("");
    const right = (0, _vueDemi.ref)("");
    const bottom = (0, _vueDemi.ref)("");
    const left = (0, _vueDemi.ref)("");
    if (0, _shared.isClient) {
        const topCssVar = useCssVar(topVarName);
        const rightCssVar = useCssVar(rightVarName);
        const bottomCssVar = useCssVar(bottomVarName);
        const leftCssVar = useCssVar(leftVarName);
        topCssVar.value = "env(safe-area-inset-top, 0px)";
        rightCssVar.value = "env(safe-area-inset-right, 0px)";
        bottomCssVar.value = "env(safe-area-inset-bottom, 0px)";
        leftCssVar.value = "env(safe-area-inset-left, 0px)";
        update();
        useEventListener("resize", (0, _shared.useDebounceFn)(update));
    }
    function update() {
        top.value = getValue(topVarName);
        right.value = getValue(rightVarName);
        bottom.value = getValue(bottomVarName);
        left.value = getValue(leftVarName);
    }
    return {
        top,
        right,
        bottom,
        left,
        update
    };
}
function getValue(position) {
    return getComputedStyle(document.documentElement).getPropertyValue(position);
}
function useScriptTag(src, onLoaded = (0, _shared.noop), options = {}) {
    const { immediate =true , manual =false , type ="text/javascript" , async =true , crossOrigin , referrerPolicy , noModule , defer , document: document1 = defaultDocument , attrs ={}  } = options;
    const scriptTag = (0, _vueDemi.ref)(null);
    let _promise = null;
    const loadScript = (waitForScriptLoad)=>new Promise((resolve, reject)=>{
            const resolveWithElement = (el2)=>{
                scriptTag.value = el2;
                resolve(el2);
                return el2;
            };
            if (!document1) {
                resolve(false);
                return;
            }
            let shouldAppend = false;
            let el = document1.querySelector(`script[src="${(0, _shared.toValue)(src)}"]`);
            if (!el) {
                el = document1.createElement("script");
                el.type = type;
                el.async = async;
                el.src = (0, _shared.toValue)(src);
                if (defer) el.defer = defer;
                if (crossOrigin) el.crossOrigin = crossOrigin;
                if (noModule) el.noModule = noModule;
                if (referrerPolicy) el.referrerPolicy = referrerPolicy;
                Object.entries(attrs).forEach(([name, value])=>el == null ? void 0 : el.setAttribute(name, value));
                shouldAppend = true;
            } else if (el.hasAttribute("data-loaded")) resolveWithElement(el);
            el.addEventListener("error", (event)=>reject(event));
            el.addEventListener("abort", (event)=>reject(event));
            el.addEventListener("load", ()=>{
                el.setAttribute("data-loaded", "true");
                onLoaded(el);
                resolveWithElement(el);
            });
            if (shouldAppend) el = document1.head.appendChild(el);
            if (!waitForScriptLoad) resolveWithElement(el);
        });
    const load = (waitForScriptLoad = true)=>{
        if (!_promise) _promise = loadScript(waitForScriptLoad);
        return _promise;
    };
    const unload = ()=>{
        if (!document1) return;
        _promise = null;
        if (scriptTag.value) scriptTag.value = null;
        const el = document1.querySelector(`script[src="${(0, _shared.toValue)(src)}"]`);
        if (el) document1.head.removeChild(el);
    };
    if (immediate && !manual) (0, _shared.tryOnMounted)(load);
    if (!manual) (0, _shared.tryOnUnmounted)(unload);
    return {
        scriptTag,
        load,
        unload
    };
}
function checkOverflowScroll(ele) {
    const style = window.getComputedStyle(ele);
    if (style.overflowX === "scroll" || style.overflowY === "scroll" || style.overflowX === "auto" && ele.clientWidth < ele.scrollWidth || style.overflowY === "auto" && ele.clientHeight < ele.scrollHeight) return true;
    else {
        const parent = ele.parentNode;
        if (!parent || parent.tagName === "BODY") return false;
        return checkOverflowScroll(parent);
    }
}
function preventDefault(rawEvent) {
    const e = rawEvent || window.event;
    const _target = e.target;
    if (checkOverflowScroll(_target)) return false;
    if (e.touches.length > 1) return true;
    if (e.preventDefault) e.preventDefault();
    return false;
}
const elInitialOverflow = /* @__PURE__ */ new WeakMap();
function useScrollLock(element, initialState = false) {
    const isLocked = (0, _vueDemi.ref)(initialState);
    let stopTouchMoveListener = null;
    let initialOverflow = "";
    (0, _vueDemi.watch)((0, _shared.toRef)(element), (el)=>{
        const target = resolveElement((0, _shared.toValue)(el));
        if (target) {
            const ele = target;
            if (!elInitialOverflow.get(ele)) elInitialOverflow.set(ele, ele.style.overflow);
            if (ele.style.overflow !== "hidden") initialOverflow = ele.style.overflow;
            if (ele.style.overflow === "hidden") return isLocked.value = true;
            if (isLocked.value) return ele.style.overflow = "hidden";
        }
    }, {
        immediate: true
    });
    const lock = ()=>{
        const el = resolveElement((0, _shared.toValue)(element));
        if (!el || isLocked.value) return;
        if (0, _shared.isIOS) stopTouchMoveListener = useEventListener(el, "touchmove", (e)=>{
            preventDefault(e);
        }, {
            passive: false
        });
        el.style.overflow = "hidden";
        isLocked.value = true;
    };
    const unlock = ()=>{
        const el = resolveElement((0, _shared.toValue)(element));
        if (!el || !isLocked.value) return;
        (0, _shared.isIOS) && (stopTouchMoveListener == null || stopTouchMoveListener());
        el.style.overflow = initialOverflow;
        elInitialOverflow.delete(el);
        isLocked.value = false;
    };
    (0, _shared.tryOnScopeDispose)(unlock);
    return (0, _vueDemi.computed)({
        get () {
            return isLocked.value;
        },
        set (v) {
            if (v) lock();
            else unlock();
        }
    });
}
function useSessionStorage(key, initialValue, options = {}) {
    const { window: window1 = defaultWindow  } = options;
    return useStorage(key, initialValue, window1 == null ? void 0 : window1.sessionStorage, options);
}
function useShare(shareOptions = {}, options = {}) {
    const { navigator =defaultNavigator  } = options;
    const _navigator = navigator;
    const isSupported = useSupported(()=>_navigator && "canShare" in _navigator);
    const share = async (overrideOptions = {})=>{
        if (isSupported.value) {
            const data = {
                ...(0, _shared.toValue)(shareOptions),
                ...(0, _shared.toValue)(overrideOptions)
            };
            let granted = true;
            if (data.files && _navigator.canShare) granted = _navigator.canShare({
                files: data.files
            });
            if (granted) return _navigator.share(data);
        }
    };
    return {
        isSupported,
        share
    };
}
const defaultSortFn = (source, compareFn)=>source.sort(compareFn);
const defaultCompare = (a, b)=>a - b;
function useSorted(...args) {
    var _a, _b, _c, _d;
    const [source] = args;
    let compareFn = defaultCompare;
    let options = {};
    if (args.length === 2) {
        if (typeof args[1] === "object") {
            options = args[1];
            compareFn = (_a = options.compareFn) != null ? _a : defaultCompare;
        } else compareFn = (_b = args[1]) != null ? _b : defaultCompare;
    } else if (args.length > 2) {
        compareFn = (_c = args[1]) != null ? _c : defaultCompare;
        options = (_d = args[2]) != null ? _d : {};
    }
    const { dirty =false , sortFn =defaultSortFn  } = options;
    if (!dirty) return (0, _vueDemi.computed)(()=>sortFn([
            ...(0, _shared.toValue)(source)
        ], compareFn));
    (0, _vueDemi.watchEffect)(()=>{
        const result = sortFn((0, _shared.toValue)(source), compareFn);
        if ((0, _vueDemi.isRef)(source)) source.value = result;
        else source.splice(0, source.length, ...result);
    });
    return source;
}
function useSpeechRecognition(options = {}) {
    const { interimResults =true , continuous =true , window: window1 = defaultWindow  } = options;
    const lang = (0, _shared.toRef)(options.lang || "en-US");
    const isListening = (0, _vueDemi.ref)(false);
    const isFinal = (0, _vueDemi.ref)(false);
    const result = (0, _vueDemi.ref)("");
    const error = (0, _vueDemi.shallowRef)(void 0);
    const toggle = (value = !isListening.value)=>{
        isListening.value = value;
    };
    const start = ()=>{
        isListening.value = true;
    };
    const stop = ()=>{
        isListening.value = false;
    };
    const SpeechRecognition = window1 && (window1.SpeechRecognition || window1.webkitSpeechRecognition);
    const isSupported = useSupported(()=>SpeechRecognition);
    let recognition;
    if (isSupported.value) {
        recognition = new SpeechRecognition();
        recognition.continuous = continuous;
        recognition.interimResults = interimResults;
        recognition.lang = (0, _shared.toValue)(lang);
        recognition.onstart = ()=>{
            isFinal.value = false;
        };
        (0, _vueDemi.watch)(lang, (lang2)=>{
            if (recognition && !isListening.value) recognition.lang = lang2;
        });
        recognition.onresult = (event)=>{
            const currentResult = event.results[event.resultIndex];
            const { transcript  } = currentResult[0];
            isFinal.value = currentResult.isFinal;
            result.value = transcript;
            error.value = void 0;
        };
        recognition.onerror = (event)=>{
            error.value = event;
        };
        recognition.onend = ()=>{
            isListening.value = false;
            recognition.lang = (0, _shared.toValue)(lang);
        };
        (0, _vueDemi.watch)(isListening, ()=>{
            if (isListening.value) recognition.start();
            else recognition.stop();
        });
    }
    (0, _shared.tryOnScopeDispose)(()=>{
        isListening.value = false;
    });
    return {
        isSupported,
        isListening,
        isFinal,
        recognition,
        result,
        error,
        toggle,
        start,
        stop
    };
}
function useSpeechSynthesis(text, options = {}) {
    const { pitch =1 , rate =1 , volume =1 , window: window1 = defaultWindow  } = options;
    const synth = window1 && window1.speechSynthesis;
    const isSupported = useSupported(()=>synth);
    const isPlaying = (0, _vueDemi.ref)(false);
    const status = (0, _vueDemi.ref)("init");
    const spokenText = (0, _shared.toRef)(text || "");
    const lang = (0, _shared.toRef)(options.lang || "en-US");
    const error = (0, _vueDemi.shallowRef)(void 0);
    const toggle = (value = !isPlaying.value)=>{
        isPlaying.value = value;
    };
    const bindEventsForUtterance = (utterance2)=>{
        utterance2.lang = (0, _shared.toValue)(lang);
        utterance2.voice = (0, _shared.toValue)(options.voice) || null;
        utterance2.pitch = (0, _shared.toValue)(pitch);
        utterance2.rate = (0, _shared.toValue)(rate);
        utterance2.volume = volume;
        utterance2.onstart = ()=>{
            isPlaying.value = true;
            status.value = "play";
        };
        utterance2.onpause = ()=>{
            isPlaying.value = false;
            status.value = "pause";
        };
        utterance2.onresume = ()=>{
            isPlaying.value = true;
            status.value = "play";
        };
        utterance2.onend = ()=>{
            isPlaying.value = false;
            status.value = "end";
        };
        utterance2.onerror = (event)=>{
            error.value = event;
        };
    };
    const utterance = (0, _vueDemi.computed)(()=>{
        isPlaying.value = false;
        status.value = "init";
        const newUtterance = new SpeechSynthesisUtterance(spokenText.value);
        bindEventsForUtterance(newUtterance);
        return newUtterance;
    });
    const speak = ()=>{
        synth.cancel();
        utterance && synth.speak(utterance.value);
    };
    const stop = ()=>{
        synth.cancel();
        isPlaying.value = false;
    };
    if (isSupported.value) {
        bindEventsForUtterance(utterance.value);
        (0, _vueDemi.watch)(lang, (lang2)=>{
            if (utterance.value && !isPlaying.value) utterance.value.lang = lang2;
        });
        if (options.voice) (0, _vueDemi.watch)(options.voice, ()=>{
            synth.cancel();
        });
        (0, _vueDemi.watch)(isPlaying, ()=>{
            if (isPlaying.value) synth.resume();
            else synth.pause();
        });
    }
    (0, _shared.tryOnScopeDispose)(()=>{
        isPlaying.value = false;
    });
    return {
        isSupported,
        isPlaying,
        status,
        utterance,
        error,
        stop,
        toggle,
        speak
    };
}
function useStepper(steps, initialStep) {
    const stepsRef = (0, _vueDemi.ref)(steps);
    const stepNames = (0, _vueDemi.computed)(()=>Array.isArray(stepsRef.value) ? stepsRef.value : Object.keys(stepsRef.value));
    const index = (0, _vueDemi.ref)(stepNames.value.indexOf(initialStep != null ? initialStep : stepNames.value[0]));
    const current = (0, _vueDemi.computed)(()=>at(index.value));
    const isFirst = (0, _vueDemi.computed)(()=>index.value === 0);
    const isLast = (0, _vueDemi.computed)(()=>index.value === stepNames.value.length - 1);
    const next = (0, _vueDemi.computed)(()=>stepNames.value[index.value + 1]);
    const previous = (0, _vueDemi.computed)(()=>stepNames.value[index.value - 1]);
    function at(index2) {
        if (Array.isArray(stepsRef.value)) return stepsRef.value[index2];
        return stepsRef.value[stepNames.value[index2]];
    }
    function get(step) {
        if (!stepNames.value.includes(step)) return;
        return at(stepNames.value.indexOf(step));
    }
    function goTo(step) {
        if (stepNames.value.includes(step)) index.value = stepNames.value.indexOf(step);
    }
    function goToNext() {
        if (isLast.value) return;
        index.value++;
    }
    function goToPrevious() {
        if (isFirst.value) return;
        index.value--;
    }
    function goBackTo(step) {
        if (isAfter(step)) goTo(step);
    }
    function isNext(step) {
        return stepNames.value.indexOf(step) === index.value + 1;
    }
    function isPrevious(step) {
        return stepNames.value.indexOf(step) === index.value - 1;
    }
    function isCurrent(step) {
        return stepNames.value.indexOf(step) === index.value;
    }
    function isBefore(step) {
        return index.value < stepNames.value.indexOf(step);
    }
    function isAfter(step) {
        return index.value > stepNames.value.indexOf(step);
    }
    return {
        steps: stepsRef,
        stepNames,
        index,
        current,
        next,
        previous,
        isFirst,
        isLast,
        at,
        get,
        goTo,
        goToNext,
        goToPrevious,
        goBackTo,
        isNext,
        isPrevious,
        isCurrent,
        isBefore,
        isAfter
    };
}
function useStorageAsync(key, initialValue, storage, options = {}) {
    var _a;
    const { flush ="pre" , deep =true , listenToStorageChanges =true , writeDefaults =true , mergeDefaults =false , shallow , window: window1 = defaultWindow , eventFilter , onError =(e)=>{
        console.error(e);
    }  } = options;
    const rawInit = (0, _shared.toValue)(initialValue);
    const type = guessSerializerType(rawInit);
    const data = (shallow ? (0, _vueDemi.shallowRef) : (0, _vueDemi.ref))(initialValue);
    const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];
    if (!storage) try {
        storage = getSSRHandler("getDefaultStorageAsync", ()=>{
            var _a2;
            return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;
        })();
    } catch (e) {
        onError(e);
    }
    async function read(event) {
        if (!storage || event && event.key !== key) return;
        try {
            const rawValue = event ? event.newValue : await storage.getItem(key);
            if (rawValue == null) {
                data.value = rawInit;
                if (writeDefaults && rawInit !== null) await storage.setItem(key, await serializer.write(rawInit));
            } else if (mergeDefaults) {
                const value = await serializer.read(rawValue);
                if (typeof mergeDefaults === "function") data.value = mergeDefaults(value, rawInit);
                else if (type === "object" && !Array.isArray(value)) data.value = {
                    ...rawInit,
                    ...value
                };
                else data.value = value;
            } else data.value = await serializer.read(rawValue);
        } catch (e) {
            onError(e);
        }
    }
    read();
    if (window1 && listenToStorageChanges) useEventListener(window1, "storage", (e)=>Promise.resolve().then(()=>read(e)));
    if (storage) (0, _shared.watchWithFilter)(data, async ()=>{
        try {
            if (data.value == null) await storage.removeItem(key);
            else await storage.setItem(key, await serializer.write(data.value));
        } catch (e) {
            onError(e);
        }
    }, {
        flush,
        deep,
        eventFilter
    });
    return data;
}
let _id = 0;
function useStyleTag(css, options = {}) {
    const isLoaded = (0, _vueDemi.ref)(false);
    const { document: document1 = defaultDocument , immediate =true , manual =false , id =`vueuse_styletag_${++_id}`  } = options;
    const cssRef = (0, _vueDemi.ref)(css);
    let stop = ()=>{};
    const load = ()=>{
        if (!document1) return;
        const el = document1.getElementById(id) || document1.createElement("style");
        if (!el.isConnected) {
            el.id = id;
            if (options.media) el.media = options.media;
            document1.head.appendChild(el);
        }
        if (isLoaded.value) return;
        stop = (0, _vueDemi.watch)(cssRef, (value)=>{
            el.textContent = value;
        }, {
            immediate: true
        });
        isLoaded.value = true;
    };
    const unload = ()=>{
        if (!document1 || !isLoaded.value) return;
        stop();
        document1.head.removeChild(document1.getElementById(id));
        isLoaded.value = false;
    };
    if (immediate && !manual) (0, _shared.tryOnMounted)(load);
    if (!manual) (0, _shared.tryOnScopeDispose)(unload);
    return {
        id,
        css: cssRef,
        unload,
        load,
        isLoaded: (0, _vueDemi.readonly)(isLoaded)
    };
}
function useSwipe(target, options = {}) {
    const { threshold =50 , onSwipe , onSwipeEnd , onSwipeStart , passive =true , window: window1 = defaultWindow  } = options;
    const coordsStart = (0, _vueDemi.reactive)({
        x: 0,
        y: 0
    });
    const coordsEnd = (0, _vueDemi.reactive)({
        x: 0,
        y: 0
    });
    const diffX = (0, _vueDemi.computed)(()=>coordsStart.x - coordsEnd.x);
    const diffY = (0, _vueDemi.computed)(()=>coordsStart.y - coordsEnd.y);
    const { max , abs  } = Math;
    const isThresholdExceeded = (0, _vueDemi.computed)(()=>max(abs(diffX.value), abs(diffY.value)) >= threshold);
    const isSwiping = (0, _vueDemi.ref)(false);
    const direction = (0, _vueDemi.computed)(()=>{
        if (!isThresholdExceeded.value) return "none";
        if (abs(diffX.value) > abs(diffY.value)) return diffX.value > 0 ? "left" : "right";
        else return diffY.value > 0 ? "up" : "down";
    });
    const getTouchEventCoords = (e)=>[
            e.touches[0].clientX,
            e.touches[0].clientY
        ];
    const updateCoordsStart = (x, y)=>{
        coordsStart.x = x;
        coordsStart.y = y;
    };
    const updateCoordsEnd = (x, y)=>{
        coordsEnd.x = x;
        coordsEnd.y = y;
    };
    let listenerOptions;
    const isPassiveEventSupported = checkPassiveEventSupport(window1 == null ? void 0 : window1.document);
    if (!passive) listenerOptions = isPassiveEventSupported ? {
        passive: false,
        capture: true
    } : {
        capture: true
    };
    else listenerOptions = isPassiveEventSupported ? {
        passive: true
    } : {
        capture: false
    };
    const onTouchEnd = (e)=>{
        if (isSwiping.value) onSwipeEnd == null || onSwipeEnd(e, direction.value);
        isSwiping.value = false;
    };
    const stops = [
        useEventListener(target, "touchstart", (e)=>{
            if (e.touches.length !== 1) return;
            if (listenerOptions.capture && !listenerOptions.passive) e.preventDefault();
            const [x, y] = getTouchEventCoords(e);
            updateCoordsStart(x, y);
            updateCoordsEnd(x, y);
            onSwipeStart == null || onSwipeStart(e);
        }, listenerOptions),
        useEventListener(target, "touchmove", (e)=>{
            if (e.touches.length !== 1) return;
            const [x, y] = getTouchEventCoords(e);
            updateCoordsEnd(x, y);
            if (!isSwiping.value && isThresholdExceeded.value) isSwiping.value = true;
            if (isSwiping.value) onSwipe == null || onSwipe(e);
        }, listenerOptions),
        useEventListener(target, [
            "touchend",
            "touchcancel"
        ], onTouchEnd, listenerOptions)
    ];
    const stop = ()=>stops.forEach((s)=>s());
    return {
        isPassiveEventSupported,
        isSwiping,
        direction,
        coordsStart,
        coordsEnd,
        lengthX: diffX,
        lengthY: diffY,
        stop
    };
}
function checkPassiveEventSupport(document1) {
    if (!document1) return false;
    let supportsPassive = false;
    const optionsBlock = {
        get passive () {
            supportsPassive = true;
            return false;
        }
    };
    document1.addEventListener("x", (0, _shared.noop), optionsBlock);
    document1.removeEventListener("x", (0, _shared.noop));
    return supportsPassive;
}
function useTemplateRefsList() {
    const refs = (0, _vueDemi.ref)([]);
    refs.value.set = (el)=>{
        if (el) refs.value.push(el);
    };
    (0, _vueDemi.onBeforeUpdate)(()=>{
        refs.value.length = 0;
    });
    return refs;
}
function useTextDirection(options = {}) {
    const { document: document1 = defaultDocument , selector ="html" , observe =false , initialValue ="ltr"  } = options;
    function getValue() {
        var _a, _b;
        return (_b = (_a = document1 == null ? void 0 : document1.querySelector(selector)) == null ? void 0 : _a.getAttribute("dir")) != null ? _b : initialValue;
    }
    const dir = (0, _vueDemi.ref)(getValue());
    (0, _shared.tryOnMounted)(()=>dir.value = getValue());
    if (observe && document1) useMutationObserver(document1.querySelector(selector), ()=>dir.value = getValue(), {
        attributes: true
    });
    return (0, _vueDemi.computed)({
        get () {
            return dir.value;
        },
        set (v) {
            var _a, _b;
            dir.value = v;
            if (!document1) return;
            if (dir.value) (_a = document1.querySelector(selector)) == null || _a.setAttribute("dir", dir.value);
            else (_b = document1.querySelector(selector)) == null || _b.removeAttribute("dir");
        }
    });
}
function getRangesFromSelection(selection) {
    var _a;
    const rangeCount = (_a = selection.rangeCount) != null ? _a : 0;
    return Array.from({
        length: rangeCount
    }, (_, i)=>selection.getRangeAt(i));
}
function useTextSelection(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    const selection = (0, _vueDemi.ref)(null);
    const text = (0, _vueDemi.computed)(()=>{
        var _a, _b;
        return (_b = (_a = selection.value) == null ? void 0 : _a.toString()) != null ? _b : "";
    });
    const ranges = (0, _vueDemi.computed)(()=>selection.value ? getRangesFromSelection(selection.value) : []);
    const rects = (0, _vueDemi.computed)(()=>ranges.value.map((range)=>range.getBoundingClientRect()));
    function onSelectionChange() {
        selection.value = null;
        if (window1) selection.value = window1.getSelection();
    }
    if (window1) useEventListener(window1.document, "selectionchange", onSelectionChange);
    return {
        text,
        rects,
        ranges,
        selection
    };
}
function useTextareaAutosize(options) {
    var _a;
    const textarea = (0, _vueDemi.ref)(options == null ? void 0 : options.element);
    const input = (0, _vueDemi.ref)(options == null ? void 0 : options.input);
    const styleProp = (_a = options == null ? void 0 : options.styleProp) != null ? _a : "height";
    const textareaScrollHeight = (0, _vueDemi.ref)(1);
    function triggerResize() {
        var _a2;
        if (!textarea.value) return;
        let height = "";
        textarea.value.style[styleProp] = "1px";
        textareaScrollHeight.value = (_a2 = textarea.value) == null ? void 0 : _a2.scrollHeight;
        if (options == null ? void 0 : options.styleTarget) (0, _shared.toValue)(options.styleTarget).style[styleProp] = `${textareaScrollHeight.value}px`;
        else height = `${textareaScrollHeight.value}px`;
        textarea.value.style[styleProp] = height;
    }
    (0, _vueDemi.watch)([
        input,
        textarea
    ], ()=>(0, _vueDemi.nextTick)(triggerResize), {
        immediate: true
    });
    (0, _vueDemi.watch)(textareaScrollHeight, ()=>{
        var _a2;
        return (_a2 = options == null ? void 0 : options.onResize) == null ? void 0 : _a2.call(options);
    });
    useResizeObserver(textarea, ()=>triggerResize());
    if (options == null ? void 0 : options.watch) (0, _vueDemi.watch)(options.watch, triggerResize, {
        immediate: true,
        deep: true
    });
    return {
        textarea,
        input,
        triggerResize
    };
}
function useThrottledRefHistory(source, options = {}) {
    const { throttle =200 , trailing =true  } = options;
    const filter = (0, _shared.throttleFilter)(throttle, trailing);
    const history = useRefHistory(source, {
        ...options,
        eventFilter: filter
    });
    return {
        ...history
    };
}
const DEFAULT_UNITS = [
    {
        max: 6e4,
        value: 1e3,
        name: "second"
    },
    {
        max: 276e4,
        value: 6e4,
        name: "minute"
    },
    {
        max: 72e6,
        value: 36e5,
        name: "hour"
    },
    {
        max: 5184e5,
        value: 864e5,
        name: "day"
    },
    {
        max: 24192e5,
        value: 6048e5,
        name: "week"
    },
    {
        max: 28512e6,
        value: 2592e6,
        name: "month"
    },
    {
        max: Number.POSITIVE_INFINITY,
        value: 31536e6,
        name: "year"
    }
];
const DEFAULT_MESSAGES = {
    justNow: "just now",
    past: (n)=>n.match(/\d/) ? `${n} ago` : n,
    future: (n)=>n.match(/\d/) ? `in ${n}` : n,
    month: (n, past)=>n === 1 ? past ? "last month" : "next month" : `${n} month${n > 1 ? "s" : ""}`,
    year: (n, past)=>n === 1 ? past ? "last year" : "next year" : `${n} year${n > 1 ? "s" : ""}`,
    day: (n, past)=>n === 1 ? past ? "yesterday" : "tomorrow" : `${n} day${n > 1 ? "s" : ""}`,
    week: (n, past)=>n === 1 ? past ? "last week" : "next week" : `${n} week${n > 1 ? "s" : ""}`,
    hour: (n)=>`${n} hour${n > 1 ? "s" : ""}`,
    minute: (n)=>`${n} minute${n > 1 ? "s" : ""}`,
    second: (n)=>`${n} second${n > 1 ? "s" : ""}`,
    invalid: ""
};
function DEFAULT_FORMATTER(date) {
    return date.toISOString().slice(0, 10);
}
function useTimeAgo(time, options = {}) {
    const { controls: exposeControls = false , updateInterval =3e4  } = options;
    const { now , ...controls } = useNow({
        interval: updateInterval,
        controls: true
    });
    const timeAgo = (0, _vueDemi.computed)(()=>formatTimeAgo(new Date((0, _shared.toValue)(time)), options, (0, _shared.toValue)(now)));
    if (exposeControls) return {
        timeAgo,
        ...controls
    };
    else return timeAgo;
}
function formatTimeAgo(from, options = {}, now = Date.now()) {
    var _a;
    const { max , messages =DEFAULT_MESSAGES , fullDateFormatter =DEFAULT_FORMATTER , units =DEFAULT_UNITS , showSecond =false , rounding ="round"  } = options;
    const roundFn = typeof rounding === "number" ? (n)=>+n.toFixed(rounding) : Math[rounding];
    const diff = +now - +from;
    const absDiff = Math.abs(diff);
    function getValue(diff2, unit) {
        return roundFn(Math.abs(diff2) / unit.value);
    }
    function format(diff2, unit) {
        const val = getValue(diff2, unit);
        const past = diff2 > 0;
        const str = applyFormat(unit.name, val, past);
        return applyFormat(past ? "past" : "future", str, past);
    }
    function applyFormat(name, val, isPast) {
        const formatter = messages[name];
        if (typeof formatter === "function") return formatter(val, isPast);
        return formatter.replace("{0}", val.toString());
    }
    if (absDiff < 6e4 && !showSecond) return messages.justNow;
    if (typeof max === "number" && absDiff > max) return fullDateFormatter(new Date(from));
    if (typeof max === "string") {
        const unitMax = (_a = units.find((i)=>i.name === max)) == null ? void 0 : _a.max;
        if (unitMax && absDiff > unitMax) return fullDateFormatter(new Date(from));
    }
    for (const [idx, unit] of units.entries()){
        const val = getValue(diff, unit);
        if (val <= 0 && units[idx - 1]) return format(diff, units[idx - 1]);
        if (absDiff < unit.max) return format(diff, unit);
    }
    return messages.invalid;
}
function useTimeoutPoll(fn, interval, timeoutPollOptions) {
    const { start  } = (0, _shared.useTimeoutFn)(loop, interval, {
        immediate: false
    });
    const isActive = (0, _vueDemi.ref)(false);
    async function loop() {
        if (!isActive.value) return;
        await fn();
        start();
    }
    function resume() {
        if (!isActive.value) {
            isActive.value = true;
            loop();
        }
    }
    function pause() {
        isActive.value = false;
    }
    if (timeoutPollOptions == null ? void 0 : timeoutPollOptions.immediate) resume();
    (0, _shared.tryOnScopeDispose)(pause);
    return {
        isActive,
        pause,
        resume
    };
}
function useTimestamp(options = {}) {
    const { controls: exposeControls = false , offset =0 , immediate =true , interval ="requestAnimationFrame" , callback  } = options;
    const ts = (0, _vueDemi.ref)((0, _shared.timestamp)() + offset);
    const update = ()=>ts.value = (0, _shared.timestamp)() + offset;
    const cb = callback ? ()=>{
        update();
        callback(ts.value);
    } : update;
    const controls = interval === "requestAnimationFrame" ? useRafFn(cb, {
        immediate
    }) : (0, _shared.useIntervalFn)(cb, interval, {
        immediate
    });
    if (exposeControls) return {
        timestamp: ts,
        ...controls
    };
    else return ts;
}
function useTitle(newTitle = null, options = {}) {
    var _a, _b, _c;
    const { document: document1 = defaultDocument , restoreOnUnmount =(t)=>t  } = options;
    const originalTitle = (_a = document1 == null ? void 0 : document1.title) != null ? _a : "";
    const title = (0, _shared.toRef)((_b = newTitle != null ? newTitle : document1 == null ? void 0 : document1.title) != null ? _b : null);
    const isReadonly = newTitle && typeof newTitle === "function";
    function format(t) {
        if (!("titleTemplate" in options)) return t;
        const template = options.titleTemplate || "%s";
        return typeof template === "function" ? template(t) : (0, _shared.toValue)(template).replace(/%s/g, t);
    }
    (0, _vueDemi.watch)(title, (t, o)=>{
        if (t !== o && document1) document1.title = format(typeof t === "string" ? t : "");
    }, {
        immediate: true
    });
    if (options.observe && !options.titleTemplate && document1 && !isReadonly) useMutationObserver((_c = document1.head) == null ? void 0 : _c.querySelector("title"), ()=>{
        if (document1 && document1.title !== title.value) title.value = format(document1.title);
    }, {
        childList: true
    });
    (0, _shared.tryOnBeforeUnmount)(()=>{
        if (restoreOnUnmount) {
            const restoredTitle = restoreOnUnmount(originalTitle, title.value || "");
            if (restoredTitle != null && document1) document1.title = restoredTitle;
        }
    });
    return title;
}
const _TransitionPresets = {
    easeInSine: [
        0.12,
        0,
        0.39,
        0
    ],
    easeOutSine: [
        0.61,
        1,
        0.88,
        1
    ],
    easeInOutSine: [
        0.37,
        0,
        0.63,
        1
    ],
    easeInQuad: [
        0.11,
        0,
        0.5,
        0
    ],
    easeOutQuad: [
        0.5,
        1,
        0.89,
        1
    ],
    easeInOutQuad: [
        0.45,
        0,
        0.55,
        1
    ],
    easeInCubic: [
        0.32,
        0,
        0.67,
        0
    ],
    easeOutCubic: [
        0.33,
        1,
        0.68,
        1
    ],
    easeInOutCubic: [
        0.65,
        0,
        0.35,
        1
    ],
    easeInQuart: [
        0.5,
        0,
        0.75,
        0
    ],
    easeOutQuart: [
        0.25,
        1,
        0.5,
        1
    ],
    easeInOutQuart: [
        0.76,
        0,
        0.24,
        1
    ],
    easeInQuint: [
        0.64,
        0,
        0.78,
        0
    ],
    easeOutQuint: [
        0.22,
        1,
        0.36,
        1
    ],
    easeInOutQuint: [
        0.83,
        0,
        0.17,
        1
    ],
    easeInExpo: [
        0.7,
        0,
        0.84,
        0
    ],
    easeOutExpo: [
        0.16,
        1,
        0.3,
        1
    ],
    easeInOutExpo: [
        0.87,
        0,
        0.13,
        1
    ],
    easeInCirc: [
        0.55,
        0,
        1,
        0.45
    ],
    easeOutCirc: [
        0,
        0.55,
        0.45,
        1
    ],
    easeInOutCirc: [
        0.85,
        0,
        0.15,
        1
    ],
    easeInBack: [
        0.36,
        0,
        0.66,
        -0.56
    ],
    easeOutBack: [
        0.34,
        1.56,
        0.64,
        1
    ],
    easeInOutBack: [
        0.68,
        -0.6,
        0.32,
        1.6
    ]
};
const TransitionPresets = /* @__PURE__ */ Object.assign({}, {
    linear: (0, _shared.identity)
}, _TransitionPresets);
function createEasingFunction([p0, p1, p2, p3]) {
    const a = (a1, a2)=>1 - 3 * a2 + 3 * a1;
    const b = (a1, a2)=>3 * a2 - 6 * a1;
    const c = (a1)=>3 * a1;
    const calcBezier = (t, a1, a2)=>((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
    const getSlope = (t, a1, a2)=>3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
    const getTforX = (x)=>{
        let aGuessT = x;
        for(let i = 0; i < 4; ++i){
            const currentSlope = getSlope(aGuessT, p0, p2);
            if (currentSlope === 0) return aGuessT;
            const currentX = calcBezier(aGuessT, p0, p2) - x;
            aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
    };
    return (x)=>p0 === p1 && p2 === p3 ? x : calcBezier(getTforX(x), p1, p3);
}
function lerp(a, b, alpha) {
    return a + alpha * (b - a);
}
function toVec(t) {
    return (typeof t === "number" ? [
        t
    ] : t) || [];
}
function executeTransition(source, from, to, options = {}) {
    var _a, _b;
    const fromVal = (0, _shared.toValue)(from);
    const toVal = (0, _shared.toValue)(to);
    const v1 = toVec(fromVal);
    const v2 = toVec(toVal);
    const duration = (_a = (0, _shared.toValue)(options.duration)) != null ? _a : 1e3;
    const startedAt = Date.now();
    const endAt = Date.now() + duration;
    const trans = typeof options.transition === "function" ? options.transition : (_b = (0, _shared.toValue)(options.transition)) != null ? _b : (0, _shared.identity);
    const ease = typeof trans === "function" ? trans : createEasingFunction(trans);
    return new Promise((resolve)=>{
        source.value = fromVal;
        const tick = ()=>{
            var _a2;
            if ((_a2 = options.abort) == null ? void 0 : _a2.call(options)) {
                resolve();
                return;
            }
            const now = Date.now();
            const alpha = ease((now - startedAt) / duration);
            const arr = toVec(source.value).map((n, i)=>lerp(v1[i], v2[i], alpha));
            if (Array.isArray(source.value)) source.value = arr.map((n, i)=>{
                var _a3, _b2;
                return lerp((_a3 = v1[i]) != null ? _a3 : 0, (_b2 = v2[i]) != null ? _b2 : 0, alpha);
            });
            else if (typeof source.value === "number") source.value = arr[0];
            if (now < endAt) requestAnimationFrame(tick);
            else {
                source.value = toVal;
                resolve();
            }
        };
        tick();
    });
}
function useTransition(source, options = {}) {
    let currentId = 0;
    const sourceVal = ()=>{
        const v = (0, _shared.toValue)(source);
        return typeof v === "number" ? v : v.map((0, _shared.toValue));
    };
    const outputRef = (0, _vueDemi.ref)(sourceVal());
    (0, _vueDemi.watch)(sourceVal, async (to)=>{
        var _a, _b;
        if ((0, _shared.toValue)(options.disabled)) return;
        const id = ++currentId;
        if (options.delay) await (0, _shared.promiseTimeout)((0, _shared.toValue)(options.delay));
        if (id !== currentId) return;
        const toVal = Array.isArray(to) ? to.map((0, _shared.toValue)) : (0, _shared.toValue)(to);
        (_a = options.onStarted) == null || _a.call(options);
        await executeTransition(outputRef, outputRef.value, toVal, {
            ...options,
            abort: ()=>{
                var _a2;
                return id !== currentId || ((_a2 = options.abort) == null ? void 0 : _a2.call(options));
            }
        });
        (_b = options.onFinished) == null || _b.call(options);
    }, {
        deep: true
    });
    (0, _vueDemi.watch)(()=>(0, _shared.toValue)(options.disabled), (disabled)=>{
        if (disabled) {
            currentId++;
            outputRef.value = sourceVal();
        }
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        currentId++;
    });
    return (0, _vueDemi.computed)(()=>(0, _shared.toValue)(options.disabled) ? sourceVal() : outputRef.value);
}
function useUrlSearchParams(mode = "history", options = {}) {
    const { initialValue ={} , removeNullishValues =true , removeFalsyValues =false , write: enableWrite = true , window: window1 = defaultWindow  } = options;
    if (!window1) return (0, _vueDemi.reactive)(initialValue);
    const state = (0, _vueDemi.reactive)({});
    function getRawParams() {
        if (mode === "history") return window1.location.search || "";
        else if (mode === "hash") {
            const hash = window1.location.hash || "";
            const index = hash.indexOf("?");
            return index > 0 ? hash.slice(index) : "";
        } else return (window1.location.hash || "").replace(/^#/, "");
    }
    function constructQuery(params) {
        const stringified = params.toString();
        if (mode === "history") return `${stringified ? `?${stringified}` : ""}${window1.location.hash || ""}`;
        if (mode === "hash-params") return `${window1.location.search || ""}${stringified ? `#${stringified}` : ""}`;
        const hash = window1.location.hash || "#";
        const index = hash.indexOf("?");
        if (index > 0) return `${hash.slice(0, index)}${stringified ? `?${stringified}` : ""}`;
        return `${hash}${stringified ? `?${stringified}` : ""}`;
    }
    function read() {
        return new URLSearchParams(getRawParams());
    }
    function updateState(params) {
        const unusedKeys = new Set(Object.keys(state));
        for (const key of params.keys()){
            const paramsForKey = params.getAll(key);
            state[key] = paramsForKey.length > 1 ? paramsForKey : params.get(key) || "";
            unusedKeys.delete(key);
        }
        Array.from(unusedKeys).forEach((key)=>delete state[key]);
    }
    const { pause , resume  } = (0, _shared.pausableWatch)(state, ()=>{
        const params = new URLSearchParams("");
        Object.keys(state).forEach((key)=>{
            const mapEntry = state[key];
            if (Array.isArray(mapEntry)) mapEntry.forEach((value)=>params.append(key, value));
            else if (removeNullishValues && mapEntry == null) params.delete(key);
            else if (removeFalsyValues && !mapEntry) params.delete(key);
            else params.set(key, mapEntry);
        });
        write(params);
    }, {
        deep: true
    });
    function write(params, shouldUpdate) {
        pause();
        if (shouldUpdate) updateState(params);
        window1.history.replaceState(window1.history.state, window1.document.title, window1.location.pathname + constructQuery(params));
        resume();
    }
    function onChanged() {
        if (!enableWrite) return;
        write(read(), true);
    }
    useEventListener(window1, "popstate", onChanged, false);
    if (mode !== "history") useEventListener(window1, "hashchange", onChanged, false);
    const initial = read();
    if (initial.keys().next().value) updateState(initial);
    else Object.assign(state, initialValue);
    return state;
}
function useUserMedia(options = {}) {
    var _a, _b;
    const enabled = (0, _vueDemi.ref)((_a = options.enabled) != null ? _a : false);
    const autoSwitch = (0, _vueDemi.ref)((_b = options.autoSwitch) != null ? _b : true);
    const constraints = (0, _vueDemi.ref)(options.constraints);
    const { navigator =defaultNavigator  } = options;
    const isSupported = useSupported(()=>{
        var _a2;
        return (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.getUserMedia;
    });
    const stream = (0, _vueDemi.shallowRef)();
    function getDeviceOptions(type) {
        switch(type){
            case "video":
                if (constraints.value) return constraints.value.video || false;
                break;
            case "audio":
                if (constraints.value) return constraints.value.audio || false;
                break;
        }
    }
    async function _start() {
        if (!isSupported.value || stream.value) return;
        stream.value = await navigator.mediaDevices.getUserMedia({
            video: getDeviceOptions("video"),
            audio: getDeviceOptions("audio")
        });
        return stream.value;
    }
    function _stop() {
        var _a2;
        (_a2 = stream.value) == null || _a2.getTracks().forEach((t)=>t.stop());
        stream.value = void 0;
    }
    function stop() {
        _stop();
        enabled.value = false;
    }
    async function start() {
        await _start();
        if (stream.value) enabled.value = true;
        return stream.value;
    }
    async function restart() {
        _stop();
        return await start();
    }
    (0, _vueDemi.watch)(enabled, (v)=>{
        if (v) _start();
        else _stop();
    }, {
        immediate: true
    });
    (0, _vueDemi.watch)(constraints, ()=>{
        if (autoSwitch.value && stream.value) restart();
    }, {
        immediate: true
    });
    (0, _shared.tryOnScopeDispose)(()=>{
        stop();
    });
    return {
        isSupported,
        stream,
        start,
        stop,
        restart,
        constraints,
        enabled,
        autoSwitch
    };
}
function useVModel(props, key, emit, options = {}) {
    var _a, _b, _c, _d, _e;
    const { clone =false , passive =false , eventName , deep =false , defaultValue , shouldEmit  } = options;
    const vm = (0, _vueDemi.getCurrentInstance)();
    const _emit = emit || (vm == null ? void 0 : vm.emit) || ((_a = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));
    let event = eventName;
    if (!key) {
        if (0, _vueDemi.isVue2) {
            const modelOptions = (_e = (_d = vm == null ? void 0 : vm.proxy) == null ? void 0 : _d.$options) == null ? void 0 : _e.model;
            key = (modelOptions == null ? void 0 : modelOptions.value) || "value";
            if (!eventName) event = (modelOptions == null ? void 0 : modelOptions.event) || "input";
        } else key = "modelValue";
    }
    event = event || `update:${key.toString()}`;
    const cloneFn = (val)=>!clone ? val : typeof clone === "function" ? clone(val) : cloneFnJSON(val);
    const getValue = ()=>(0, _shared.isDef)(props[key]) ? cloneFn(props[key]) : defaultValue;
    const triggerEmit = (value)=>{
        if (shouldEmit) {
            if (shouldEmit(value)) _emit(event, value);
        } else _emit(event, value);
    };
    if (passive) {
        const initialValue = getValue();
        const proxy = (0, _vueDemi.ref)(initialValue);
        let isUpdating = false;
        (0, _vueDemi.watch)(()=>props[key], (v)=>{
            if (!isUpdating) {
                isUpdating = true;
                proxy.value = cloneFn(v);
                (0, _vueDemi.nextTick)(()=>isUpdating = false);
            }
        });
        (0, _vueDemi.watch)(proxy, (v)=>{
            if (!isUpdating && (v !== props[key] || deep)) triggerEmit(v);
        }, {
            deep
        });
        return proxy;
    } else return (0, _vueDemi.computed)({
        get () {
            return getValue();
        },
        set (value) {
            triggerEmit(value);
        }
    });
}
function useVModels(props, emit, options = {}) {
    const ret = {};
    for(const key in props)ret[key] = useVModel(props, key, emit, options);
    return ret;
}
function useVibrate(options) {
    const { pattern =[] , interval =0 , navigator =defaultNavigator  } = options || {};
    const isSupported = useSupported(()=>typeof navigator !== "undefined" && "vibrate" in navigator);
    const patternRef = (0, _shared.toRef)(pattern);
    let intervalControls;
    const vibrate = (pattern2 = patternRef.value)=>{
        if (isSupported.value) navigator.vibrate(pattern2);
    };
    const stop = ()=>{
        if (isSupported.value) navigator.vibrate(0);
        intervalControls == null || intervalControls.pause();
    };
    if (interval > 0) intervalControls = (0, _shared.useIntervalFn)(vibrate, interval, {
        immediate: false,
        immediateCallback: false
    });
    return {
        isSupported,
        pattern,
        intervalControls,
        vibrate,
        stop
    };
}
function useVirtualList(list, options) {
    const { containerStyle , wrapperProps , scrollTo: scrollTo1 , calculateRange , currentList , containerRef  } = "itemHeight" in options ? useVerticalVirtualList(options, list) : useHorizontalVirtualList(options, list);
    return {
        list: currentList,
        scrollTo: scrollTo1,
        containerProps: {
            ref: containerRef,
            onScroll: ()=>{
                calculateRange();
            },
            style: containerStyle
        },
        wrapperProps
    };
}
function useVirtualListResources(list) {
    const containerRef = (0, _vueDemi.ref)(null);
    const size = useElementSize(containerRef);
    const currentList = (0, _vueDemi.ref)([]);
    const source = (0, _vueDemi.shallowRef)(list);
    const state = (0, _vueDemi.ref)({
        start: 0,
        end: 10
    });
    return {
        state,
        source,
        currentList,
        size,
        containerRef
    };
}
function createGetViewCapacity(state, source, itemSize) {
    return (containerSize)=>{
        if (typeof itemSize === "number") return Math.ceil(containerSize / itemSize);
        const { start =0  } = state.value;
        let sum = 0;
        let capacity = 0;
        for(let i = start; i < source.value.length; i++){
            const size = itemSize(i);
            sum += size;
            capacity = i;
            if (sum > containerSize) break;
        }
        return capacity - start;
    };
}
function createGetOffset(source, itemSize) {
    return (scrollDirection)=>{
        if (typeof itemSize === "number") return Math.floor(scrollDirection / itemSize) + 1;
        let sum = 0;
        let offset = 0;
        for(let i = 0; i < source.value.length; i++){
            const size = itemSize(i);
            sum += size;
            if (sum >= scrollDirection) {
                offset = i;
                break;
            }
        }
        return offset + 1;
    };
}
function createCalculateRange(type, overscan, getOffset, getViewCapacity, { containerRef , state , currentList , source  }) {
    return ()=>{
        const element = containerRef.value;
        if (element) {
            const offset = getOffset(type === "vertical" ? element.scrollTop : element.scrollLeft);
            const viewCapacity = getViewCapacity(type === "vertical" ? element.clientHeight : element.clientWidth);
            const from = offset - overscan;
            const to = offset + viewCapacity + overscan;
            state.value = {
                start: from < 0 ? 0 : from,
                end: to > source.value.length ? source.value.length : to
            };
            currentList.value = source.value.slice(state.value.start, state.value.end).map((ele, index)=>({
                    data: ele,
                    index: index + state.value.start
                }));
        }
    };
}
function createGetDistance(itemSize, source) {
    return (index)=>{
        if (typeof itemSize === "number") {
            const size2 = index * itemSize;
            return size2;
        }
        const size = source.value.slice(0, index).reduce((sum, _, i)=>sum + itemSize(i), 0);
        return size;
    };
}
function useWatchForSizes(size, list, containerRef, calculateRange) {
    (0, _vueDemi.watch)([
        size.width,
        size.height,
        list,
        containerRef
    ], ()=>{
        calculateRange();
    });
}
function createComputedTotalSize(itemSize, source) {
    return (0, _vueDemi.computed)(()=>{
        if (typeof itemSize === "number") return source.value.length * itemSize;
        return source.value.reduce((sum, _, index)=>sum + itemSize(index), 0);
    });
}
const scrollToDictionaryForElementScrollKey = {
    horizontal: "scrollLeft",
    vertical: "scrollTop"
};
function createScrollTo(type, calculateRange, getDistance, containerRef) {
    return (index)=>{
        if (containerRef.value) {
            containerRef.value[scrollToDictionaryForElementScrollKey[type]] = getDistance(index);
            calculateRange();
        }
    };
}
function useHorizontalVirtualList(options, list) {
    const resources = useVirtualListResources(list);
    const { state , source , currentList , size , containerRef  } = resources;
    const containerStyle = {
        overflowX: "auto"
    };
    const { itemWidth , overscan =5  } = options;
    const getViewCapacity = createGetViewCapacity(state, source, itemWidth);
    const getOffset = createGetOffset(source, itemWidth);
    const calculateRange = createCalculateRange("horizontal", overscan, getOffset, getViewCapacity, resources);
    const getDistanceLeft = createGetDistance(itemWidth, source);
    const offsetLeft = (0, _vueDemi.computed)(()=>getDistanceLeft(state.value.start));
    const totalWidth = createComputedTotalSize(itemWidth, source);
    useWatchForSizes(size, list, containerRef, calculateRange);
    const scrollTo1 = createScrollTo("horizontal", calculateRange, getDistanceLeft, containerRef);
    const wrapperProps = (0, _vueDemi.computed)(()=>{
        return {
            style: {
                height: "100%",
                width: `${totalWidth.value - offsetLeft.value}px`,
                marginLeft: `${offsetLeft.value}px`,
                display: "flex"
            }
        };
    });
    return {
        scrollTo: scrollTo1,
        calculateRange,
        wrapperProps,
        containerStyle,
        currentList,
        containerRef
    };
}
function useVerticalVirtualList(options, list) {
    const resources = useVirtualListResources(list);
    const { state , source , currentList , size , containerRef  } = resources;
    const containerStyle = {
        overflowY: "auto"
    };
    const { itemHeight , overscan =5  } = options;
    const getViewCapacity = createGetViewCapacity(state, source, itemHeight);
    const getOffset = createGetOffset(source, itemHeight);
    const calculateRange = createCalculateRange("vertical", overscan, getOffset, getViewCapacity, resources);
    const getDistanceTop = createGetDistance(itemHeight, source);
    const offsetTop = (0, _vueDemi.computed)(()=>getDistanceTop(state.value.start));
    const totalHeight = createComputedTotalSize(itemHeight, source);
    useWatchForSizes(size, list, containerRef, calculateRange);
    const scrollTo1 = createScrollTo("vertical", calculateRange, getDistanceTop, containerRef);
    const wrapperProps = (0, _vueDemi.computed)(()=>{
        return {
            style: {
                width: "100%",
                height: `${totalHeight.value - offsetTop.value}px`,
                marginTop: `${offsetTop.value}px`
            }
        };
    });
    return {
        calculateRange,
        scrollTo: scrollTo1,
        containerStyle,
        wrapperProps,
        currentList,
        containerRef
    };
}
function useWakeLock(options = {}) {
    const { navigator =defaultNavigator , document: document1 = defaultDocument  } = options;
    let wakeLock;
    const isSupported = useSupported(()=>navigator && "wakeLock" in navigator);
    const isActive = (0, _vueDemi.ref)(false);
    async function onVisibilityChange() {
        if (!isSupported.value || !wakeLock) return;
        if (document1 && document1.visibilityState === "visible") wakeLock = await navigator.wakeLock.request("screen");
        isActive.value = !wakeLock.released;
    }
    if (document1) useEventListener(document1, "visibilitychange", onVisibilityChange, {
        passive: true
    });
    async function request(type) {
        if (!isSupported.value) return;
        wakeLock = await navigator.wakeLock.request(type);
        isActive.value = !wakeLock.released;
    }
    async function release() {
        if (!isSupported.value || !wakeLock) return;
        await wakeLock.release();
        isActive.value = !wakeLock.released;
        wakeLock = null;
    }
    return {
        isSupported,
        isActive,
        request,
        release
    };
}
function useWebNotification(options = {}) {
    const { window: window1 = defaultWindow , requestPermissions: _requestForPermissions = true  } = options;
    const defaultWebNotificationOptions = options;
    const isSupported = useSupported(()=>{
        if (!window1 || !("Notification" in window1)) return false;
        try {
            new Notification("");
        } catch (e) {
            return false;
        }
        return true;
    });
    const permissionGranted = (0, _vueDemi.ref)(isSupported.value && "permission" in Notification && Notification.permission === "granted");
    const notification = (0, _vueDemi.ref)(null);
    const ensurePermissions = async ()=>{
        if (!isSupported.value) return;
        if (!permissionGranted.value && Notification.permission !== "denied") {
            const result = await Notification.requestPermission();
            if (result === "granted") permissionGranted.value = true;
        }
        return permissionGranted.value;
    };
    const { on: onClick , trigger: clickTrigger  } = (0, _shared.createEventHook)();
    const { on: onShow , trigger: showTrigger  } = (0, _shared.createEventHook)();
    const { on: onError , trigger: errorTrigger  } = (0, _shared.createEventHook)();
    const { on: onClose , trigger: closeTrigger  } = (0, _shared.createEventHook)();
    const show = async (overrides)=>{
        if (!isSupported.value || !permissionGranted.value) return;
        const options2 = Object.assign({}, defaultWebNotificationOptions, overrides);
        notification.value = new Notification(options2.title || "", options2);
        notification.value.onclick = clickTrigger;
        notification.value.onshow = showTrigger;
        notification.value.onerror = errorTrigger;
        notification.value.onclose = closeTrigger;
        return notification.value;
    };
    const close = ()=>{
        if (notification.value) notification.value.close();
        notification.value = null;
    };
    if (_requestForPermissions) (0, _shared.tryOnMounted)(ensurePermissions);
    (0, _shared.tryOnScopeDispose)(close);
    if (isSupported.value && window1) {
        const document1 = window1.document;
        useEventListener(document1, "visibilitychange", (e)=>{
            e.preventDefault();
            if (document1.visibilityState === "visible") close();
        });
    }
    return {
        isSupported,
        notification,
        ensurePermissions,
        permissionGranted,
        show,
        close,
        onClick,
        onShow,
        onError,
        onClose
    };
}
const DEFAULT_PING_MESSAGE = "ping";
function resolveNestedOptions(options) {
    if (options === true) return {};
    return options;
}
function useWebSocket(url, options = {}) {
    const { onConnected , onDisconnected , onError , onMessage , immediate =true , autoClose =true , protocols =[]  } = options;
    const data = (0, _vueDemi.ref)(null);
    const status = (0, _vueDemi.ref)("CLOSED");
    const wsRef = (0, _vueDemi.ref)();
    const urlRef = (0, _shared.toRef)(url);
    let heartbeatPause;
    let heartbeatResume;
    let explicitlyClosed = false;
    let retried = 0;
    let bufferedData = [];
    let pongTimeoutWait;
    const _sendBuffer = ()=>{
        if (bufferedData.length && wsRef.value && status.value === "OPEN") {
            for (const buffer of bufferedData)wsRef.value.send(buffer);
            bufferedData = [];
        }
    };
    const resetHeartbeat = ()=>{
        clearTimeout(pongTimeoutWait);
        pongTimeoutWait = void 0;
    };
    const close = (code = 1e3, reason)=>{
        if (!(0, _shared.isClient) || !wsRef.value) return;
        explicitlyClosed = true;
        resetHeartbeat();
        heartbeatPause == null || heartbeatPause();
        wsRef.value.close(code, reason);
        wsRef.value = void 0;
    };
    const send = (data2, useBuffer = true)=>{
        if (!wsRef.value || status.value !== "OPEN") {
            if (useBuffer) bufferedData.push(data2);
            return false;
        }
        _sendBuffer();
        wsRef.value.send(data2);
        return true;
    };
    const _init = ()=>{
        if (explicitlyClosed || typeof urlRef.value === "undefined") return;
        const ws = new WebSocket(urlRef.value, protocols);
        wsRef.value = ws;
        status.value = "CONNECTING";
        ws.onopen = ()=>{
            status.value = "OPEN";
            onConnected == null || onConnected(ws);
            heartbeatResume == null || heartbeatResume();
            _sendBuffer();
        };
        ws.onclose = (ev)=>{
            status.value = "CLOSED";
            onDisconnected == null || onDisconnected(ws, ev);
            if (!explicitlyClosed && options.autoReconnect) {
                const { retries =-1 , delay =1e3 , onFailed  } = resolveNestedOptions(options.autoReconnect);
                retried += 1;
                if (typeof retries === "number" && (retries < 0 || retried < retries)) setTimeout(_init, delay);
                else if (typeof retries === "function" && retries()) setTimeout(_init, delay);
                else onFailed == null || onFailed();
            }
        };
        ws.onerror = (e)=>{
            onError == null || onError(ws, e);
        };
        ws.onmessage = (e)=>{
            if (options.heartbeat) {
                resetHeartbeat();
                const { message =DEFAULT_PING_MESSAGE  } = resolveNestedOptions(options.heartbeat);
                if (e.data === message) return;
            }
            data.value = e.data;
            onMessage == null || onMessage(ws, e);
        };
    };
    if (options.heartbeat) {
        const { message =DEFAULT_PING_MESSAGE , interval =1e3 , pongTimeout =1e3  } = resolveNestedOptions(options.heartbeat);
        const { pause , resume  } = (0, _shared.useIntervalFn)(()=>{
            send(message, false);
            if (pongTimeoutWait != null) return;
            pongTimeoutWait = setTimeout(()=>{
                close();
                explicitlyClosed = false;
            }, pongTimeout);
        }, interval, {
            immediate: false
        });
        heartbeatPause = pause;
        heartbeatResume = resume;
    }
    if (autoClose) {
        if (0, _shared.isClient) useEventListener("beforeunload", ()=>close());
        (0, _shared.tryOnScopeDispose)(close);
    }
    const open = ()=>{
        if (!(0, _shared.isClient) && !(0, _shared.isWorker)) return;
        close();
        explicitlyClosed = false;
        retried = 0;
        _init();
    };
    if (immediate) open();
    (0, _vueDemi.watch)(urlRef, open);
    return {
        data,
        status,
        close,
        send,
        open,
        ws: wsRef
    };
}
function useWebWorker(arg0, workerOptions, options) {
    const { window: window1 = defaultWindow  } = options != null ? options : {};
    const data = (0, _vueDemi.ref)(null);
    const worker = (0, _vueDemi.shallowRef)();
    const post = (...args)=>{
        if (!worker.value) return;
        worker.value.postMessage(...args);
    };
    const terminate = function terminate2() {
        if (!worker.value) return;
        worker.value.terminate();
    };
    if (window1) {
        if (typeof arg0 === "string") worker.value = new Worker(arg0, workerOptions);
        else if (typeof arg0 === "function") worker.value = arg0();
        else worker.value = arg0;
        worker.value.onmessage = (e)=>{
            data.value = e.data;
        };
        (0, _shared.tryOnScopeDispose)(()=>{
            if (worker.value) worker.value.terminate();
        });
    }
    return {
        data,
        post,
        terminate,
        worker
    };
}
function jobRunner(userFunc) {
    return (e)=>{
        const userFuncArgs = e.data[0];
        return Promise.resolve(userFunc.apply(void 0, userFuncArgs)).then((result)=>{
            postMessage([
                "SUCCESS",
                result
            ]);
        }).catch((error)=>{
            postMessage([
                "ERROR",
                error
            ]);
        });
    };
}
function depsParser(deps, localDeps) {
    if (deps.length === 0 && localDeps.length === 0) return "";
    const depsString = deps.map((dep)=>`'${dep}'`).toString();
    const depsFunctionString = localDeps.filter((dep)=>typeof dep === "function").map((fn)=>{
        const str = fn.toString();
        if (str.trim().startsWith("function")) return str;
        else {
            const name = fn.name;
            return `const ${name} = ${str}`;
        }
    }).join(";");
    const importString = `importScripts(${depsString});`;
    return `${depsString.trim() === "" ? "" : importString} ${depsFunctionString}`;
}
function createWorkerBlobUrl(fn, deps, localDeps) {
    const blobCode = `${depsParser(deps, localDeps)}; onmessage=(${jobRunner})(${fn})`;
    const blob = new Blob([
        blobCode
    ], {
        type: "text/javascript"
    });
    const url = URL.createObjectURL(blob);
    return url;
}
function useWebWorkerFn(fn, options = {}) {
    const { dependencies =[] , localDependencies =[] , timeout , window: window1 = defaultWindow  } = options;
    const worker = (0, _vueDemi.ref)();
    const workerStatus = (0, _vueDemi.ref)("PENDING");
    const promise = (0, _vueDemi.ref)({});
    const timeoutId = (0, _vueDemi.ref)();
    const workerTerminate = (status = "PENDING")=>{
        if (worker.value && worker.value._url && window1) {
            worker.value.terminate();
            URL.revokeObjectURL(worker.value._url);
            promise.value = {};
            worker.value = void 0;
            window1.clearTimeout(timeoutId.value);
            workerStatus.value = status;
        }
    };
    workerTerminate();
    (0, _shared.tryOnScopeDispose)(workerTerminate);
    const generateWorker = ()=>{
        const blobUrl = createWorkerBlobUrl(fn, dependencies, localDependencies);
        const newWorker = new Worker(blobUrl);
        newWorker._url = blobUrl;
        newWorker.onmessage = (e)=>{
            const { resolve =()=>{} , reject =()=>{}  } = promise.value;
            const [status, result] = e.data;
            switch(status){
                case "SUCCESS":
                    resolve(result);
                    workerTerminate(status);
                    break;
                default:
                    reject(result);
                    workerTerminate("ERROR");
                    break;
            }
        };
        newWorker.onerror = (e)=>{
            const { reject =()=>{}  } = promise.value;
            e.preventDefault();
            reject(e);
            workerTerminate("ERROR");
        };
        if (timeout) timeoutId.value = setTimeout(()=>workerTerminate("TIMEOUT_EXPIRED"), timeout);
        return newWorker;
    };
    const callWorker = (...fnArgs)=>new Promise((resolve, reject)=>{
            promise.value = {
                resolve,
                reject
            };
            worker.value && worker.value.postMessage([
                [
                    ...fnArgs
                ]
            ]);
            workerStatus.value = "RUNNING";
        });
    const workerFn = (...fnArgs)=>{
        if (workerStatus.value === "RUNNING") {
            console.error("[useWebWorkerFn] You can only run one instance of the worker at a time.");
            return Promise.reject();
        }
        worker.value = generateWorker();
        return callWorker(...fnArgs);
    };
    return {
        workerFn,
        workerStatus,
        workerTerminate
    };
}
function useWindowFocus(options = {}) {
    const { window: window1 = defaultWindow  } = options;
    if (!window1) return (0, _vueDemi.ref)(false);
    const focused = (0, _vueDemi.ref)(window1.document.hasFocus());
    useEventListener(window1, "blur", ()=>{
        focused.value = false;
    });
    useEventListener(window1, "focus", ()=>{
        focused.value = true;
    });
    return focused;
}
function useWindowScroll(options = {}) {
    const { window: window1 = defaultWindow , behavior ="auto"  } = options;
    if (!window1) return {
        x: (0, _vueDemi.ref)(0),
        y: (0, _vueDemi.ref)(0)
    };
    const internalX = (0, _vueDemi.ref)(window1.scrollX);
    const internalY = (0, _vueDemi.ref)(window1.scrollY);
    const x = (0, _vueDemi.computed)({
        get () {
            return internalX.value;
        },
        set (x2) {
            scrollTo({
                left: x2,
                behavior
            });
        }
    });
    const y = (0, _vueDemi.computed)({
        get () {
            return internalY.value;
        },
        set (y2) {
            scrollTo({
                top: y2,
                behavior
            });
        }
    });
    useEventListener(window1, "scroll", ()=>{
        internalX.value = window1.scrollX;
        internalY.value = window1.scrollY;
    }, {
        capture: false,
        passive: true
    });
    return {
        x,
        y
    };
}
function useWindowSize(options = {}) {
    const { window: window1 = defaultWindow , initialWidth =Number.POSITIVE_INFINITY , initialHeight =Number.POSITIVE_INFINITY , listenOrientation =true , includeScrollbar =true  } = options;
    const width = (0, _vueDemi.ref)(initialWidth);
    const height = (0, _vueDemi.ref)(initialHeight);
    const update = ()=>{
        if (window1) {
            if (includeScrollbar) {
                width.value = window1.innerWidth;
                height.value = window1.innerHeight;
            } else {
                width.value = window1.document.documentElement.clientWidth;
                height.value = window1.document.documentElement.clientHeight;
            }
        }
    };
    update();
    (0, _shared.tryOnMounted)(update);
    useEventListener("resize", update, {
        passive: true
    });
    if (listenOrientation) {
        const matches = useMediaQuery("(orientation: portrait)");
        (0, _vueDemi.watch)(matches, ()=>update());
    }
    return {
        width,
        height
    };
}

},{"@vueuse/shared":"8BCR2","vue-demi":"1O62H","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"8BCR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "autoResetRef", ()=>refAutoReset);
parcelHelpers.export(exports, "bypassFilter", ()=>bypassFilter);
parcelHelpers.export(exports, "camelize", ()=>camelize);
parcelHelpers.export(exports, "clamp", ()=>clamp);
parcelHelpers.export(exports, "computedEager", ()=>computedEager);
parcelHelpers.export(exports, "computedWithControl", ()=>computedWithControl);
parcelHelpers.export(exports, "containsProp", ()=>containsProp);
parcelHelpers.export(exports, "controlledComputed", ()=>computedWithControl);
parcelHelpers.export(exports, "controlledRef", ()=>controlledRef);
parcelHelpers.export(exports, "createEventHook", ()=>createEventHook);
parcelHelpers.export(exports, "createFilterWrapper", ()=>createFilterWrapper);
parcelHelpers.export(exports, "createGlobalState", ()=>createGlobalState);
parcelHelpers.export(exports, "createInjectionState", ()=>createInjectionState);
parcelHelpers.export(exports, "createReactiveFn", ()=>reactify);
parcelHelpers.export(exports, "createSharedComposable", ()=>createSharedComposable);
parcelHelpers.export(exports, "createSingletonPromise", ()=>createSingletonPromise);
parcelHelpers.export(exports, "debounceFilter", ()=>debounceFilter);
parcelHelpers.export(exports, "debouncedRef", ()=>refDebounced);
parcelHelpers.export(exports, "debouncedWatch", ()=>watchDebounced);
parcelHelpers.export(exports, "directiveHooks", ()=>directiveHooks);
parcelHelpers.export(exports, "eagerComputed", ()=>computedEager);
parcelHelpers.export(exports, "extendRef", ()=>extendRef);
parcelHelpers.export(exports, "formatDate", ()=>formatDate);
parcelHelpers.export(exports, "get", ()=>get);
parcelHelpers.export(exports, "getLifeCycleTarget", ()=>getLifeCycleTarget);
parcelHelpers.export(exports, "hasOwn", ()=>hasOwn);
parcelHelpers.export(exports, "hyphenate", ()=>hyphenate);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "ignorableWatch", ()=>watchIgnorable);
parcelHelpers.export(exports, "increaseWithUnit", ()=>increaseWithUnit);
parcelHelpers.export(exports, "injectLocal", ()=>injectLocal);
parcelHelpers.export(exports, "invoke", ()=>invoke);
parcelHelpers.export(exports, "isClient", ()=>isClient);
parcelHelpers.export(exports, "isDef", ()=>isDef);
parcelHelpers.export(exports, "isDefined", ()=>isDefined);
parcelHelpers.export(exports, "isIOS", ()=>isIOS);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "isWorker", ()=>isWorker);
parcelHelpers.export(exports, "makeDestructurable", ()=>makeDestructurable);
parcelHelpers.export(exports, "noop", ()=>noop);
parcelHelpers.export(exports, "normalizeDate", ()=>normalizeDate);
parcelHelpers.export(exports, "notNullish", ()=>notNullish);
parcelHelpers.export(exports, "now", ()=>now);
parcelHelpers.export(exports, "objectEntries", ()=>objectEntries);
parcelHelpers.export(exports, "objectOmit", ()=>objectOmit);
parcelHelpers.export(exports, "objectPick", ()=>objectPick);
parcelHelpers.export(exports, "pausableFilter", ()=>pausableFilter);
parcelHelpers.export(exports, "pausableWatch", ()=>watchPausable);
parcelHelpers.export(exports, "promiseTimeout", ()=>promiseTimeout);
parcelHelpers.export(exports, "provideLocal", ()=>provideLocal);
parcelHelpers.export(exports, "rand", ()=>rand);
parcelHelpers.export(exports, "reactify", ()=>reactify);
parcelHelpers.export(exports, "reactifyObject", ()=>reactifyObject);
parcelHelpers.export(exports, "reactiveComputed", ()=>reactiveComputed);
parcelHelpers.export(exports, "reactiveOmit", ()=>reactiveOmit);
parcelHelpers.export(exports, "reactivePick", ()=>reactivePick);
parcelHelpers.export(exports, "refAutoReset", ()=>refAutoReset);
parcelHelpers.export(exports, "refDebounced", ()=>refDebounced);
parcelHelpers.export(exports, "refDefault", ()=>refDefault);
parcelHelpers.export(exports, "refThrottled", ()=>refThrottled);
parcelHelpers.export(exports, "refWithControl", ()=>refWithControl);
parcelHelpers.export(exports, "resolveRef", ()=>resolveRef);
parcelHelpers.export(exports, "resolveUnref", ()=>resolveUnref);
parcelHelpers.export(exports, "set", ()=>set);
parcelHelpers.export(exports, "syncRef", ()=>syncRef);
parcelHelpers.export(exports, "syncRefs", ()=>syncRefs);
parcelHelpers.export(exports, "throttleFilter", ()=>throttleFilter);
parcelHelpers.export(exports, "throttledRef", ()=>refThrottled);
parcelHelpers.export(exports, "throttledWatch", ()=>watchThrottled);
parcelHelpers.export(exports, "timestamp", ()=>timestamp);
parcelHelpers.export(exports, "toReactive", ()=>toReactive);
parcelHelpers.export(exports, "toRef", ()=>toRef);
parcelHelpers.export(exports, "toRefs", ()=>toRefs);
parcelHelpers.export(exports, "toValue", ()=>toValue);
parcelHelpers.export(exports, "tryOnBeforeMount", ()=>tryOnBeforeMount);
parcelHelpers.export(exports, "tryOnBeforeUnmount", ()=>tryOnBeforeUnmount);
parcelHelpers.export(exports, "tryOnMounted", ()=>tryOnMounted);
parcelHelpers.export(exports, "tryOnScopeDispose", ()=>tryOnScopeDispose);
parcelHelpers.export(exports, "tryOnUnmounted", ()=>tryOnUnmounted);
parcelHelpers.export(exports, "until", ()=>until);
parcelHelpers.export(exports, "useArrayDifference", ()=>useArrayDifference);
parcelHelpers.export(exports, "useArrayEvery", ()=>useArrayEvery);
parcelHelpers.export(exports, "useArrayFilter", ()=>useArrayFilter);
parcelHelpers.export(exports, "useArrayFind", ()=>useArrayFind);
parcelHelpers.export(exports, "useArrayFindIndex", ()=>useArrayFindIndex);
parcelHelpers.export(exports, "useArrayFindLast", ()=>useArrayFindLast);
parcelHelpers.export(exports, "useArrayIncludes", ()=>useArrayIncludes);
parcelHelpers.export(exports, "useArrayJoin", ()=>useArrayJoin);
parcelHelpers.export(exports, "useArrayMap", ()=>useArrayMap);
parcelHelpers.export(exports, "useArrayReduce", ()=>useArrayReduce);
parcelHelpers.export(exports, "useArraySome", ()=>useArraySome);
parcelHelpers.export(exports, "useArrayUnique", ()=>useArrayUnique);
parcelHelpers.export(exports, "useCounter", ()=>useCounter);
parcelHelpers.export(exports, "useDateFormat", ()=>useDateFormat);
parcelHelpers.export(exports, "useDebounce", ()=>refDebounced);
parcelHelpers.export(exports, "useDebounceFn", ()=>useDebounceFn);
parcelHelpers.export(exports, "useInterval", ()=>useInterval);
parcelHelpers.export(exports, "useIntervalFn", ()=>useIntervalFn);
parcelHelpers.export(exports, "useLastChanged", ()=>useLastChanged);
parcelHelpers.export(exports, "useThrottle", ()=>refThrottled);
parcelHelpers.export(exports, "useThrottleFn", ()=>useThrottleFn);
parcelHelpers.export(exports, "useTimeout", ()=>useTimeout);
parcelHelpers.export(exports, "useTimeoutFn", ()=>useTimeoutFn);
parcelHelpers.export(exports, "useToNumber", ()=>useToNumber);
parcelHelpers.export(exports, "useToString", ()=>useToString);
parcelHelpers.export(exports, "useToggle", ()=>useToggle);
parcelHelpers.export(exports, "watchArray", ()=>watchArray);
parcelHelpers.export(exports, "watchAtMost", ()=>watchAtMost);
parcelHelpers.export(exports, "watchDebounced", ()=>watchDebounced);
parcelHelpers.export(exports, "watchDeep", ()=>watchDeep);
parcelHelpers.export(exports, "watchIgnorable", ()=>watchIgnorable);
parcelHelpers.export(exports, "watchImmediate", ()=>watchImmediate);
parcelHelpers.export(exports, "watchOnce", ()=>watchOnce);
parcelHelpers.export(exports, "watchPausable", ()=>watchPausable);
parcelHelpers.export(exports, "watchThrottled", ()=>watchThrottled);
parcelHelpers.export(exports, "watchTriggerable", ()=>watchTriggerable);
parcelHelpers.export(exports, "watchWithFilter", ()=>watchWithFilter);
parcelHelpers.export(exports, "whenever", ()=>whenever);
var _vueDemi = require("vue-demi");
function computedEager(fn, options) {
    var _a;
    const result = (0, _vueDemi.shallowRef)();
    (0, _vueDemi.watchEffect)(()=>{
        result.value = fn();
    }, {
        ...options,
        flush: (_a = options == null ? void 0 : options.flush) != null ? _a : "sync"
    });
    return (0, _vueDemi.readonly)(result);
}
function computedWithControl(source, fn) {
    let v = void 0;
    let track;
    let trigger;
    const dirty = (0, _vueDemi.ref)(true);
    const update = ()=>{
        dirty.value = true;
        trigger();
    };
    (0, _vueDemi.watch)(source, update, {
        flush: "sync"
    });
    const get = typeof fn === "function" ? fn : fn.get;
    const set = typeof fn === "function" ? void 0 : fn.set;
    const result = (0, _vueDemi.customRef)((_track, _trigger)=>{
        track = _track;
        trigger = _trigger;
        return {
            get () {
                if (dirty.value) {
                    v = get();
                    dirty.value = false;
                }
                track();
                return v;
            },
            set (v2) {
                set == null || set(v2);
            }
        };
    });
    if (Object.isExtensible(result)) result.trigger = update;
    return result;
}
function tryOnScopeDispose(fn) {
    if ((0, _vueDemi.getCurrentScope)()) {
        (0, _vueDemi.onScopeDispose)(fn);
        return true;
    }
    return false;
}
function createEventHook() {
    const fns = /* @__PURE__ */ new Set();
    const off = (fn)=>{
        fns.delete(fn);
    };
    const on = (fn)=>{
        fns.add(fn);
        const offFn = ()=>off(fn);
        tryOnScopeDispose(offFn);
        return {
            off: offFn
        };
    };
    const trigger = (...args)=>{
        return Promise.all(Array.from(fns).map((fn)=>fn(...args)));
    };
    return {
        on,
        off,
        trigger
    };
}
function createGlobalState(stateFactory) {
    let initialized = false;
    let state;
    const scope = (0, _vueDemi.effectScope)(true);
    return (...args)=>{
        if (!initialized) {
            state = scope.run(()=>stateFactory(...args));
            initialized = true;
        }
        return state;
    };
}
const localProvidedStateMap = /* @__PURE__ */ new WeakMap();
const provideLocal = (key, value)=>{
    var _a;
    const instance = (_a = (0, _vueDemi.getCurrentInstance)()) == null ? void 0 : _a.proxy;
    if (instance == null) throw new Error("provideLocal must be called in setup");
    if (!localProvidedStateMap.has(instance)) localProvidedStateMap.set(instance, /* @__PURE__ */ Object.create(null));
    const localProvidedState = localProvidedStateMap.get(instance);
    localProvidedState[key] = value;
    (0, _vueDemi.provide)(key, value);
};
const injectLocal = (...args)=>{
    var _a;
    const key = args[0];
    const instance = (_a = (0, _vueDemi.getCurrentInstance)()) == null ? void 0 : _a.proxy;
    if (instance == null) throw new Error("injectLocal must be called in setup");
    if (localProvidedStateMap.has(instance) && key in localProvidedStateMap.get(instance)) return localProvidedStateMap.get(instance)[key];
    return (0, _vueDemi.inject)(...args);
};
function createInjectionState(composable, options) {
    const key = (options == null ? void 0 : options.injectionKey) || Symbol(composable.name || "InjectionState");
    const defaultValue = options == null ? void 0 : options.defaultValue;
    const useProvidingState = (...args)=>{
        const state = composable(...args);
        provideLocal(key, state);
        return state;
    };
    const useInjectedState = ()=>injectLocal(key, defaultValue);
    return [
        useProvidingState,
        useInjectedState
    ];
}
function createSharedComposable(composable) {
    let subscribers = 0;
    let state;
    let scope;
    const dispose = ()=>{
        subscribers -= 1;
        if (scope && subscribers <= 0) {
            scope.stop();
            state = void 0;
            scope = void 0;
        }
    };
    return (...args)=>{
        subscribers += 1;
        if (!state) {
            scope = (0, _vueDemi.effectScope)(true);
            state = scope.run(()=>composable(...args));
        }
        tryOnScopeDispose(dispose);
        return state;
    };
}
function extendRef(ref, extend, { enumerable =false , unwrap =true  } = {}) {
    if (!(0, _vueDemi.isVue3) && !(0, _vueDemi.version).startsWith("2.7.")) throw new Error("[VueUse] extendRef only works in Vue 2.7 or above.");
    for (const [key, value] of Object.entries(extend)){
        if (key === "value") continue;
        if ((0, _vueDemi.isRef)(value) && unwrap) Object.defineProperty(ref, key, {
            get () {
                return value.value;
            },
            set (v) {
                value.value = v;
            },
            enumerable
        });
        else Object.defineProperty(ref, key, {
            value,
            enumerable
        });
    }
    return ref;
}
function get(obj, key) {
    if (key == null) return (0, _vueDemi.unref)(obj);
    return (0, _vueDemi.unref)(obj)[key];
}
function isDefined(v) {
    return (0, _vueDemi.unref)(v) != null;
}
function makeDestructurable(obj, arr) {
    if (typeof Symbol !== "undefined") {
        const clone = {
            ...obj
        };
        Object.defineProperty(clone, Symbol.iterator, {
            enumerable: false,
            value () {
                let index = 0;
                return {
                    next: ()=>({
                            value: arr[index++],
                            done: index > arr.length
                        })
                };
            }
        });
        return clone;
    } else return Object.assign([
        ...arr
    ], obj);
}
function toValue(r) {
    return typeof r === "function" ? r() : (0, _vueDemi.unref)(r);
}
const resolveUnref = toValue;
function reactify(fn, options) {
    const unrefFn = (options == null ? void 0 : options.computedGetter) === false ? (0, _vueDemi.unref) : toValue;
    return function(...args) {
        return (0, _vueDemi.computed)(()=>fn.apply(this, args.map((i)=>unrefFn(i))));
    };
}
function reactifyObject(obj, optionsOrKeys = {}) {
    let keys = [];
    let options;
    if (Array.isArray(optionsOrKeys)) keys = optionsOrKeys;
    else {
        options = optionsOrKeys;
        const { includeOwnProperties =true  } = optionsOrKeys;
        keys.push(...Object.keys(obj));
        if (includeOwnProperties) keys.push(...Object.getOwnPropertyNames(obj));
    }
    return Object.fromEntries(keys.map((key)=>{
        const value = obj[key];
        return [
            key,
            typeof value === "function" ? reactify(value.bind(obj), options) : value
        ];
    }));
}
function toReactive(objectRef) {
    if (!(0, _vueDemi.isRef)(objectRef)) return (0, _vueDemi.reactive)(objectRef);
    const proxy = new Proxy({}, {
        get (_, p, receiver) {
            return (0, _vueDemi.unref)(Reflect.get(objectRef.value, p, receiver));
        },
        set (_, p, value) {
            if ((0, _vueDemi.isRef)(objectRef.value[p]) && !(0, _vueDemi.isRef)(value)) objectRef.value[p].value = value;
            else objectRef.value[p] = value;
            return true;
        },
        deleteProperty (_, p) {
            return Reflect.deleteProperty(objectRef.value, p);
        },
        has (_, p) {
            return Reflect.has(objectRef.value, p);
        },
        ownKeys () {
            return Object.keys(objectRef.value);
        },
        getOwnPropertyDescriptor () {
            return {
                enumerable: true,
                configurable: true
            };
        }
    });
    return (0, _vueDemi.reactive)(proxy);
}
function reactiveComputed(fn) {
    return toReactive((0, _vueDemi.computed)(fn));
}
function reactiveOmit(obj, ...keys) {
    const flatKeys = keys.flat();
    const predicate = flatKeys[0];
    return reactiveComputed(()=>typeof predicate === "function" ? Object.fromEntries(Object.entries((0, _vueDemi.toRefs)(obj)).filter(([k, v])=>!predicate(toValue(v), k))) : Object.fromEntries(Object.entries((0, _vueDemi.toRefs)(obj)).filter((e)=>!flatKeys.includes(e[0]))));
}
const isClient = typeof window !== "undefined" && typeof document !== "undefined";
const isWorker = typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope;
const isDef = (val)=>typeof val !== "undefined";
const notNullish = (val)=>val != null;
const assert = (condition, ...infos)=>{
    if (!condition) console.warn(...infos);
};
const toString = Object.prototype.toString;
const isObject = (val)=>toString.call(val) === "[object Object]";
const now = ()=>Date.now();
const timestamp = ()=>+Date.now();
const clamp = (n, min, max)=>Math.min(max, Math.max(min, n));
const noop = ()=>{};
const rand = (min, max)=>{
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
};
const hasOwn = (val, key)=>Object.prototype.hasOwnProperty.call(val, key);
const isIOS = /* @__PURE__ */ getIsIOS();
function getIsIOS() {
    var _a, _b;
    return isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || ((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.maxTouchPoints) > 2 && /iPad|Macintosh/.test(window == null ? void 0 : window.navigator.userAgent));
}
function createFilterWrapper(filter, fn) {
    function wrapper(...args) {
        return new Promise((resolve, reject)=>{
            Promise.resolve(filter(()=>fn.apply(this, args), {
                fn,
                thisArg: this,
                args
            })).then(resolve).catch(reject);
        });
    }
    return wrapper;
}
const bypassFilter = (invoke)=>{
    return invoke();
};
function debounceFilter(ms, options = {}) {
    let timer;
    let maxTimer;
    let lastRejector = noop;
    const _clearTimeout = (timer2)=>{
        clearTimeout(timer2);
        lastRejector();
        lastRejector = noop;
    };
    const filter = (invoke)=>{
        const duration = toValue(ms);
        const maxDuration = toValue(options.maxWait);
        if (timer) _clearTimeout(timer);
        if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
            if (maxTimer) {
                _clearTimeout(maxTimer);
                maxTimer = null;
            }
            return Promise.resolve(invoke());
        }
        return new Promise((resolve, reject)=>{
            lastRejector = options.rejectOnCancel ? reject : resolve;
            if (maxDuration && !maxTimer) maxTimer = setTimeout(()=>{
                if (timer) _clearTimeout(timer);
                maxTimer = null;
                resolve(invoke());
            }, maxDuration);
            timer = setTimeout(()=>{
                if (maxTimer) _clearTimeout(maxTimer);
                maxTimer = null;
                resolve(invoke());
            }, duration);
        });
    };
    return filter;
}
function throttleFilter(...args) {
    let lastExec = 0;
    let timer;
    let isLeading = true;
    let lastRejector = noop;
    let lastValue;
    let ms;
    let trailing;
    let leading;
    let rejectOnCancel;
    if (!(0, _vueDemi.isRef)(args[0]) && typeof args[0] === "object") ({ delay: ms , trailing =true , leading =true , rejectOnCancel =false  } = args[0]);
    else [ms, trailing = true, leading = true, rejectOnCancel = false] = args;
    const clear = ()=>{
        if (timer) {
            clearTimeout(timer);
            timer = void 0;
            lastRejector();
            lastRejector = noop;
        }
    };
    const filter = (_invoke)=>{
        const duration = toValue(ms);
        const elapsed = Date.now() - lastExec;
        const invoke = ()=>{
            return lastValue = _invoke();
        };
        clear();
        if (duration <= 0) {
            lastExec = Date.now();
            return invoke();
        }
        if (elapsed > duration && (leading || !isLeading)) {
            lastExec = Date.now();
            invoke();
        } else if (trailing) lastValue = new Promise((resolve, reject)=>{
            lastRejector = rejectOnCancel ? reject : resolve;
            timer = setTimeout(()=>{
                lastExec = Date.now();
                isLeading = true;
                resolve(invoke());
                clear();
            }, Math.max(0, duration - elapsed));
        });
        if (!leading && !timer) timer = setTimeout(()=>isLeading = true, duration);
        isLeading = false;
        return lastValue;
    };
    return filter;
}
function pausableFilter(extendFilter = bypassFilter) {
    const isActive = (0, _vueDemi.ref)(true);
    function pause() {
        isActive.value = false;
    }
    function resume() {
        isActive.value = true;
    }
    const eventFilter = (...args)=>{
        if (isActive.value) extendFilter(...args);
    };
    return {
        isActive: (0, _vueDemi.readonly)(isActive),
        pause,
        resume,
        eventFilter
    };
}
const directiveHooks = {
    mounted: (0, _vueDemi.isVue3) ? "mounted" : "inserted",
    updated: (0, _vueDemi.isVue3) ? "updated" : "componentUpdated",
    unmounted: (0, _vueDemi.isVue3) ? "unmounted" : "unbind"
};
function cacheStringFunction(fn) {
    const cache = /* @__PURE__ */ Object.create(null);
    return (str)=>{
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
    };
}
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str)=>str.replace(hyphenateRE, "-$1").toLowerCase());
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str)=>{
    return str.replace(camelizeRE, (_, c)=>c ? c.toUpperCase() : "");
});
function promiseTimeout(ms, throwOnTimeout = false, reason = "Timeout") {
    return new Promise((resolve, reject)=>{
        if (throwOnTimeout) setTimeout(()=>reject(reason), ms);
        else setTimeout(resolve, ms);
    });
}
function identity(arg) {
    return arg;
}
function createSingletonPromise(fn) {
    let _promise;
    function wrapper() {
        if (!_promise) _promise = fn();
        return _promise;
    }
    wrapper.reset = async ()=>{
        const _prev = _promise;
        _promise = void 0;
        if (_prev) await _prev;
    };
    return wrapper;
}
function invoke(fn) {
    return fn();
}
function containsProp(obj, ...props) {
    return props.some((k)=>k in obj);
}
function increaseWithUnit(target, delta) {
    var _a;
    if (typeof target === "number") return target + delta;
    const value = ((_a = target.match(/^-?\d+\.?\d*/)) == null ? void 0 : _a[0]) || "";
    const unit = target.slice(value.length);
    const result = Number.parseFloat(value) + delta;
    if (Number.isNaN(result)) return target;
    return result + unit;
}
function objectPick(obj, keys, omitUndefined = false) {
    return keys.reduce((n, k)=>{
        if (k in obj) {
            if (!omitUndefined || obj[k] !== void 0) n[k] = obj[k];
        }
        return n;
    }, {});
}
function objectOmit(obj, keys, omitUndefined = false) {
    return Object.fromEntries(Object.entries(obj).filter(([key, value])=>{
        return (!omitUndefined || value !== void 0) && !keys.includes(key);
    }));
}
function objectEntries(obj) {
    return Object.entries(obj);
}
function getLifeCycleTarget(target) {
    return target || (0, _vueDemi.getCurrentInstance)();
}
function toRef(...args) {
    if (args.length !== 1) return (0, _vueDemi.toRef)(...args);
    const r = args[0];
    return typeof r === "function" ? (0, _vueDemi.readonly)((0, _vueDemi.customRef)(()=>({
            get: r,
            set: noop
        }))) : (0, _vueDemi.ref)(r);
}
const resolveRef = toRef;
function reactivePick(obj, ...keys) {
    const flatKeys = keys.flat();
    const predicate = flatKeys[0];
    return reactiveComputed(()=>typeof predicate === "function" ? Object.fromEntries(Object.entries((0, _vueDemi.toRefs)(obj)).filter(([k, v])=>predicate(toValue(v), k))) : Object.fromEntries(flatKeys.map((k)=>[
                k,
                toRef(obj, k)
            ])));
}
function refAutoReset(defaultValue, afterMs = 1e4) {
    return (0, _vueDemi.customRef)((track, trigger)=>{
        let value = toValue(defaultValue);
        let timer;
        const resetAfter = ()=>setTimeout(()=>{
                value = toValue(defaultValue);
                trigger();
            }, toValue(afterMs));
        tryOnScopeDispose(()=>{
            clearTimeout(timer);
        });
        return {
            get () {
                track();
                return value;
            },
            set (newValue) {
                value = newValue;
                trigger();
                clearTimeout(timer);
                timer = resetAfter();
            }
        };
    });
}
function useDebounceFn(fn, ms = 200, options = {}) {
    return createFilterWrapper(debounceFilter(ms, options), fn);
}
function refDebounced(value, ms = 200, options = {}) {
    const debounced = (0, _vueDemi.ref)(value.value);
    const updater = useDebounceFn(()=>{
        debounced.value = value.value;
    }, ms, options);
    (0, _vueDemi.watch)(value, ()=>updater());
    return debounced;
}
function refDefault(source, defaultValue) {
    return (0, _vueDemi.computed)({
        get () {
            var _a;
            return (_a = source.value) != null ? _a : defaultValue;
        },
        set (value) {
            source.value = value;
        }
    });
}
function useThrottleFn(fn, ms = 200, trailing = false, leading = true, rejectOnCancel = false) {
    return createFilterWrapper(throttleFilter(ms, trailing, leading, rejectOnCancel), fn);
}
function refThrottled(value, delay = 200, trailing = true, leading = true) {
    if (delay <= 0) return value;
    const throttled = (0, _vueDemi.ref)(value.value);
    const updater = useThrottleFn(()=>{
        throttled.value = value.value;
    }, delay, trailing, leading);
    (0, _vueDemi.watch)(value, ()=>updater());
    return throttled;
}
function refWithControl(initial, options = {}) {
    let source = initial;
    let track;
    let trigger;
    const ref = (0, _vueDemi.customRef)((_track, _trigger)=>{
        track = _track;
        trigger = _trigger;
        return {
            get () {
                return get();
            },
            set (v) {
                set(v);
            }
        };
    });
    function get(tracking = true) {
        if (tracking) track();
        return source;
    }
    function set(value, triggering = true) {
        var _a, _b;
        if (value === source) return;
        const old = source;
        if (((_a = options.onBeforeChange) == null ? void 0 : _a.call(options, value, old)) === false) return;
        source = value;
        (_b = options.onChanged) == null || _b.call(options, value, old);
        if (triggering) trigger();
    }
    const untrackedGet = ()=>get(false);
    const silentSet = (v)=>set(v, false);
    const peek = ()=>get(false);
    const lay = (v)=>set(v, false);
    return extendRef(ref, {
        get,
        set,
        untrackedGet,
        silentSet,
        peek,
        lay
    }, {
        enumerable: true
    });
}
const controlledRef = refWithControl;
function set(...args) {
    if (args.length === 2) {
        const [ref, value] = args;
        ref.value = value;
    }
    if (args.length === 3) {
        if (0, _vueDemi.isVue2) (0, _vueDemi.set)(...args);
        else {
            const [target, key, value] = args;
            target[key] = value;
        }
    }
}
function watchWithFilter(source, cb, options = {}) {
    const { eventFilter =bypassFilter , ...watchOptions } = options;
    return (0, _vueDemi.watch)(source, createFilterWrapper(eventFilter, cb), watchOptions);
}
function watchPausable(source, cb, options = {}) {
    const { eventFilter: filter , ...watchOptions } = options;
    const { eventFilter , pause , resume , isActive  } = pausableFilter(filter);
    const stop = watchWithFilter(source, cb, {
        ...watchOptions,
        eventFilter
    });
    return {
        stop,
        pause,
        resume,
        isActive
    };
}
function syncRef(left, right, ...[options]) {
    const { flush ="sync" , deep =false , immediate =true , direction ="both" , transform ={}  } = options || {};
    const watchers = [];
    const transformLTR = "ltr" in transform && transform.ltr || ((v)=>v);
    const transformRTL = "rtl" in transform && transform.rtl || ((v)=>v);
    if (direction === "both" || direction === "ltr") watchers.push(watchPausable(left, (newValue)=>{
        watchers.forEach((w)=>w.pause());
        right.value = transformLTR(newValue);
        watchers.forEach((w)=>w.resume());
    }, {
        flush,
        deep,
        immediate
    }));
    if (direction === "both" || direction === "rtl") watchers.push(watchPausable(right, (newValue)=>{
        watchers.forEach((w)=>w.pause());
        left.value = transformRTL(newValue);
        watchers.forEach((w)=>w.resume());
    }, {
        flush,
        deep,
        immediate
    }));
    const stop = ()=>{
        watchers.forEach((w)=>w.stop());
    };
    return stop;
}
function syncRefs(source, targets, options = {}) {
    const { flush ="sync" , deep =false , immediate =true  } = options;
    if (!Array.isArray(targets)) targets = [
        targets
    ];
    return (0, _vueDemi.watch)(source, (newValue)=>targets.forEach((target)=>target.value = newValue), {
        flush,
        deep,
        immediate
    });
}
function toRefs(objectRef, options = {}) {
    if (!(0, _vueDemi.isRef)(objectRef)) return (0, _vueDemi.toRefs)(objectRef);
    const result = Array.isArray(objectRef.value) ? Array.from({
        length: objectRef.value.length
    }) : {};
    for(const key in objectRef.value)result[key] = (0, _vueDemi.customRef)(()=>({
            get () {
                return objectRef.value[key];
            },
            set (v) {
                var _a;
                const replaceRef = (_a = toValue(options.replaceRef)) != null ? _a : true;
                if (replaceRef) {
                    if (Array.isArray(objectRef.value)) {
                        const copy = [
                            ...objectRef.value
                        ];
                        copy[key] = v;
                        objectRef.value = copy;
                    } else {
                        const newObject = {
                            ...objectRef.value,
                            [key]: v
                        };
                        Object.setPrototypeOf(newObject, Object.getPrototypeOf(objectRef.value));
                        objectRef.value = newObject;
                    }
                } else objectRef.value[key] = v;
            }
        }));
    return result;
}
function tryOnBeforeMount(fn, sync = true, target) {
    const instance = getLifeCycleTarget(target);
    if (instance) (0, _vueDemi.onBeforeMount)(fn, target);
    else if (sync) fn();
    else (0, _vueDemi.nextTick)(fn);
}
function tryOnBeforeUnmount(fn, target) {
    const instance = getLifeCycleTarget(target);
    if (instance) (0, _vueDemi.onBeforeUnmount)(fn, target);
}
function tryOnMounted(fn, sync = true, target) {
    const instance = getLifeCycleTarget();
    if (instance) (0, _vueDemi.onMounted)(fn, target);
    else if (sync) fn();
    else (0, _vueDemi.nextTick)(fn);
}
function tryOnUnmounted(fn, target) {
    const instance = getLifeCycleTarget(target);
    if (instance) (0, _vueDemi.onUnmounted)(fn, target);
}
function createUntil(r, isNot = false) {
    function toMatch(condition, { flush ="sync" , deep =false , timeout , throwOnTimeout  } = {}) {
        let stop = null;
        const watcher = new Promise((resolve)=>{
            stop = (0, _vueDemi.watch)(r, (v)=>{
                if (condition(v) !== isNot) {
                    stop == null || stop();
                    resolve(v);
                }
            }, {
                flush,
                deep,
                immediate: true
            });
        });
        const promises = [
            watcher
        ];
        if (timeout != null) promises.push(promiseTimeout(timeout, throwOnTimeout).then(()=>toValue(r)).finally(()=>stop == null ? void 0 : stop()));
        return Promise.race(promises);
    }
    function toBe(value, options) {
        if (!(0, _vueDemi.isRef)(value)) return toMatch((v)=>v === value, options);
        const { flush ="sync" , deep =false , timeout , throwOnTimeout  } = options != null ? options : {};
        let stop = null;
        const watcher = new Promise((resolve)=>{
            stop = (0, _vueDemi.watch)([
                r,
                value
            ], ([v1, v2])=>{
                if (isNot !== (v1 === v2)) {
                    stop == null || stop();
                    resolve(v1);
                }
            }, {
                flush,
                deep,
                immediate: true
            });
        });
        const promises = [
            watcher
        ];
        if (timeout != null) promises.push(promiseTimeout(timeout, throwOnTimeout).then(()=>toValue(r)).finally(()=>{
            stop == null || stop();
            return toValue(r);
        }));
        return Promise.race(promises);
    }
    function toBeTruthy(options) {
        return toMatch((v)=>Boolean(v), options);
    }
    function toBeNull(options) {
        return toBe(null, options);
    }
    function toBeUndefined(options) {
        return toBe(void 0, options);
    }
    function toBeNaN(options) {
        return toMatch(Number.isNaN, options);
    }
    function toContains(value, options) {
        return toMatch((v)=>{
            const array = Array.from(v);
            return array.includes(value) || array.includes(toValue(value));
        }, options);
    }
    function changed(options) {
        return changedTimes(1, options);
    }
    function changedTimes(n = 1, options) {
        let count = -1;
        return toMatch(()=>{
            count += 1;
            return count >= n;
        }, options);
    }
    if (Array.isArray(toValue(r))) {
        const instance = {
            toMatch,
            toContains,
            changed,
            changedTimes,
            get not () {
                return createUntil(r, !isNot);
            }
        };
        return instance;
    } else {
        const instance = {
            toMatch,
            toBe,
            toBeTruthy,
            toBeNull,
            toBeNaN,
            toBeUndefined,
            changed,
            changedTimes,
            get not () {
                return createUntil(r, !isNot);
            }
        };
        return instance;
    }
}
function until(r) {
    return createUntil(r);
}
function defaultComparator(value, othVal) {
    return value === othVal;
}
function useArrayDifference(...args) {
    var _a;
    const list = args[0];
    const values = args[1];
    let compareFn = (_a = args[2]) != null ? _a : defaultComparator;
    if (typeof compareFn === "string") {
        const key = compareFn;
        compareFn = (value, othVal)=>value[key] === othVal[key];
    }
    return (0, _vueDemi.computed)(()=>toValue(list).filter((x)=>toValue(values).findIndex((y)=>compareFn(x, y)) === -1));
}
function useArrayEvery(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(list).every((element, index, array)=>fn(toValue(element), index, array)));
}
function useArrayFilter(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(list).map((i)=>toValue(i)).filter(fn));
}
function useArrayFind(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(toValue(list).find((element, index, array)=>fn(toValue(element), index, array))));
}
function useArrayFindIndex(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(list).findIndex((element, index, array)=>fn(toValue(element), index, array)));
}
function findLast(arr, cb) {
    let index = arr.length;
    while(index-- > 0){
        if (cb(arr[index], index, arr)) return arr[index];
    }
    return void 0;
}
function useArrayFindLast(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(!Array.prototype.findLast ? findLast(toValue(list), (element, index, array)=>fn(toValue(element), index, array)) : toValue(list).findLast((element, index, array)=>fn(toValue(element), index, array))));
}
function isArrayIncludesOptions(obj) {
    return isObject(obj) && containsProp(obj, "formIndex", "comparator");
}
function useArrayIncludes(...args) {
    var _a;
    const list = args[0];
    const value = args[1];
    let comparator = args[2];
    let formIndex = 0;
    if (isArrayIncludesOptions(comparator)) {
        formIndex = (_a = comparator.fromIndex) != null ? _a : 0;
        comparator = comparator.comparator;
    }
    if (typeof comparator === "string") {
        const key = comparator;
        comparator = (element, value2)=>element[key] === toValue(value2);
    }
    comparator = comparator != null ? comparator : (element, value2)=>element === toValue(value2);
    return (0, _vueDemi.computed)(()=>toValue(list).slice(formIndex).some((element, index, array)=>comparator(toValue(element), toValue(value), index, toValue(array))));
}
function useArrayJoin(list, separator) {
    return (0, _vueDemi.computed)(()=>toValue(list).map((i)=>toValue(i)).join(toValue(separator)));
}
function useArrayMap(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(list).map((i)=>toValue(i)).map(fn));
}
function useArrayReduce(list, reducer, ...args) {
    const reduceCallback = (sum, value, index)=>reducer(toValue(sum), toValue(value), index);
    return (0, _vueDemi.computed)(()=>{
        const resolved = toValue(list);
        return args.length ? resolved.reduce(reduceCallback, toValue(args[0])) : resolved.reduce(reduceCallback);
    });
}
function useArraySome(list, fn) {
    return (0, _vueDemi.computed)(()=>toValue(list).some((element, index, array)=>fn(toValue(element), index, array)));
}
function uniq(array) {
    return Array.from(new Set(array));
}
function uniqueElementsBy(array, fn) {
    return array.reduce((acc, v)=>{
        if (!acc.some((x)=>fn(v, x, array))) acc.push(v);
        return acc;
    }, []);
}
function useArrayUnique(list, compareFn) {
    return (0, _vueDemi.computed)(()=>{
        const resolvedList = toValue(list).map((element)=>toValue(element));
        return compareFn ? uniqueElementsBy(resolvedList, compareFn) : uniq(resolvedList);
    });
}
function useCounter(initialValue = 0, options = {}) {
    let _initialValue = (0, _vueDemi.unref)(initialValue);
    const count = (0, _vueDemi.ref)(initialValue);
    const { max =Number.POSITIVE_INFINITY , min =Number.NEGATIVE_INFINITY  } = options;
    const inc = (delta = 1)=>count.value = Math.max(Math.min(max, count.value + delta), min);
    const dec = (delta = 1)=>count.value = Math.min(Math.max(min, count.value - delta), max);
    const get = ()=>count.value;
    const set = (val)=>count.value = Math.max(min, Math.min(max, val));
    const reset = (val = _initialValue)=>{
        _initialValue = val;
        return set(val);
    };
    return {
        count,
        inc,
        dec,
        get,
        set,
        reset
    };
}
const REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[T\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/i;
const REGEX_FORMAT = /[YMDHhms]o|\[([^\]]+)\]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a{1,2}|A{1,2}|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
function defaultMeridiem(hours, minutes, isLowercase, hasPeriod) {
    let m = hours < 12 ? "AM" : "PM";
    if (hasPeriod) m = m.split("").reduce((acc, curr)=>acc += `${curr}.`, "");
    return isLowercase ? m.toLowerCase() : m;
}
function formatOrdinal(num) {
    const suffixes = [
        "th",
        "st",
        "nd",
        "rd"
    ];
    const v = num % 100;
    return num + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]);
}
function formatDate(date, formatStr, options = {}) {
    var _a;
    const years = date.getFullYear();
    const month = date.getMonth();
    const days = date.getDate();
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();
    const milliseconds = date.getMilliseconds();
    const day = date.getDay();
    const meridiem = (_a = options.customMeridiem) != null ? _a : defaultMeridiem;
    const matches = {
        Yo: ()=>formatOrdinal(years),
        YY: ()=>String(years).slice(-2),
        YYYY: ()=>years,
        M: ()=>month + 1,
        Mo: ()=>formatOrdinal(month + 1),
        MM: ()=>`${month + 1}`.padStart(2, "0"),
        MMM: ()=>date.toLocaleDateString(options.locales, {
                month: "short"
            }),
        MMMM: ()=>date.toLocaleDateString(options.locales, {
                month: "long"
            }),
        D: ()=>String(days),
        Do: ()=>formatOrdinal(days),
        DD: ()=>`${days}`.padStart(2, "0"),
        H: ()=>String(hours),
        Ho: ()=>formatOrdinal(hours),
        HH: ()=>`${hours}`.padStart(2, "0"),
        h: ()=>`${hours % 12 || 12}`.padStart(1, "0"),
        ho: ()=>formatOrdinal(hours % 12 || 12),
        hh: ()=>`${hours % 12 || 12}`.padStart(2, "0"),
        m: ()=>String(minutes),
        mo: ()=>formatOrdinal(minutes),
        mm: ()=>`${minutes}`.padStart(2, "0"),
        s: ()=>String(seconds),
        so: ()=>formatOrdinal(seconds),
        ss: ()=>`${seconds}`.padStart(2, "0"),
        SSS: ()=>`${milliseconds}`.padStart(3, "0"),
        d: ()=>day,
        dd: ()=>date.toLocaleDateString(options.locales, {
                weekday: "narrow"
            }),
        ddd: ()=>date.toLocaleDateString(options.locales, {
                weekday: "short"
            }),
        dddd: ()=>date.toLocaleDateString(options.locales, {
                weekday: "long"
            }),
        A: ()=>meridiem(hours, minutes),
        AA: ()=>meridiem(hours, minutes, false, true),
        a: ()=>meridiem(hours, minutes, true),
        aa: ()=>meridiem(hours, minutes, true, true)
    };
    return formatStr.replace(REGEX_FORMAT, (match, $1)=>{
        var _a2, _b;
        return (_b = $1 != null ? $1 : (_a2 = matches[match]) == null ? void 0 : _a2.call(matches)) != null ? _b : match;
    });
}
function normalizeDate(date) {
    if (date === null) return new Date(Number.NaN);
    if (date === void 0) return /* @__PURE__ */ new Date();
    if (date instanceof Date) return new Date(date);
    if (typeof date === "string" && !/Z$/i.test(date)) {
        const d = date.match(REGEX_PARSE);
        if (d) {
            const m = d[2] - 1 || 0;
            const ms = (d[7] || "0").substring(0, 3);
            return new Date(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms);
        }
    }
    return new Date(date);
}
function useDateFormat(date, formatStr = "HH:mm:ss", options = {}) {
    return (0, _vueDemi.computed)(()=>formatDate(normalizeDate(toValue(date)), toValue(formatStr), options));
}
function useIntervalFn(cb, interval = 1e3, options = {}) {
    const { immediate =true , immediateCallback =false  } = options;
    let timer = null;
    const isActive = (0, _vueDemi.ref)(false);
    function clean() {
        if (timer) {
            clearInterval(timer);
            timer = null;
        }
    }
    function pause() {
        isActive.value = false;
        clean();
    }
    function resume() {
        const intervalValue = toValue(interval);
        if (intervalValue <= 0) return;
        isActive.value = true;
        if (immediateCallback) cb();
        clean();
        timer = setInterval(cb, intervalValue);
    }
    if (immediate && isClient) resume();
    if ((0, _vueDemi.isRef)(interval) || typeof interval === "function") {
        const stopWatch = (0, _vueDemi.watch)(interval, ()=>{
            if (isActive.value && isClient) resume();
        });
        tryOnScopeDispose(stopWatch);
    }
    tryOnScopeDispose(pause);
    return {
        isActive,
        pause,
        resume
    };
}
function useInterval(interval = 1e3, options = {}) {
    const { controls: exposeControls = false , immediate =true , callback  } = options;
    const counter = (0, _vueDemi.ref)(0);
    const update = ()=>counter.value += 1;
    const reset = ()=>{
        counter.value = 0;
    };
    const controls = useIntervalFn(callback ? ()=>{
        update();
        callback(counter.value);
    } : update, interval, {
        immediate
    });
    if (exposeControls) return {
        counter,
        reset,
        ...controls
    };
    else return counter;
}
function useLastChanged(source, options = {}) {
    var _a;
    const ms = (0, _vueDemi.ref)((_a = options.initialValue) != null ? _a : null);
    (0, _vueDemi.watch)(source, ()=>ms.value = timestamp(), options);
    return ms;
}
function useTimeoutFn(cb, interval, options = {}) {
    const { immediate =true  } = options;
    const isPending = (0, _vueDemi.ref)(false);
    let timer = null;
    function clear() {
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    }
    function stop() {
        isPending.value = false;
        clear();
    }
    function start(...args) {
        clear();
        isPending.value = true;
        timer = setTimeout(()=>{
            isPending.value = false;
            timer = null;
            cb(...args);
        }, toValue(interval));
    }
    if (immediate) {
        isPending.value = true;
        if (isClient) start();
    }
    tryOnScopeDispose(stop);
    return {
        isPending: (0, _vueDemi.readonly)(isPending),
        start,
        stop
    };
}
function useTimeout(interval = 1e3, options = {}) {
    const { controls: exposeControls = false , callback  } = options;
    const controls = useTimeoutFn(callback != null ? callback : noop, interval, options);
    const ready = (0, _vueDemi.computed)(()=>!controls.isPending.value);
    if (exposeControls) return {
        ready,
        ...controls
    };
    else return ready;
}
function useToNumber(value, options = {}) {
    const { method ="parseFloat" , radix , nanToZero  } = options;
    return (0, _vueDemi.computed)(()=>{
        let resolved = toValue(value);
        if (typeof resolved === "string") resolved = Number[method](resolved, radix);
        if (nanToZero && Number.isNaN(resolved)) resolved = 0;
        return resolved;
    });
}
function useToString(value) {
    return (0, _vueDemi.computed)(()=>`${toValue(value)}`);
}
function useToggle(initialValue = false, options = {}) {
    const { truthyValue =true , falsyValue =false  } = options;
    const valueIsRef = (0, _vueDemi.isRef)(initialValue);
    const _value = (0, _vueDemi.ref)(initialValue);
    function toggle(value) {
        if (arguments.length) {
            _value.value = value;
            return _value.value;
        } else {
            const truthy = toValue(truthyValue);
            _value.value = _value.value === truthy ? toValue(falsyValue) : truthy;
            return _value.value;
        }
    }
    if (valueIsRef) return toggle;
    else return [
        _value,
        toggle
    ];
}
function watchArray(source, cb, options) {
    let oldList = (options == null ? void 0 : options.immediate) ? [] : [
        ...source instanceof Function ? source() : Array.isArray(source) ? source : toValue(source)
    ];
    return (0, _vueDemi.watch)(source, (newList, _, onCleanup)=>{
        const oldListRemains = Array.from({
            length: oldList.length
        });
        const added = [];
        for (const obj of newList){
            let found = false;
            for(let i = 0; i < oldList.length; i++)if (!oldListRemains[i] && obj === oldList[i]) {
                oldListRemains[i] = true;
                found = true;
                break;
            }
            if (!found) added.push(obj);
        }
        const removed = oldList.filter((_2, i)=>!oldListRemains[i]);
        cb(newList, oldList, added, removed, onCleanup);
        oldList = [
            ...newList
        ];
    }, options);
}
function watchAtMost(source, cb, options) {
    const { count , ...watchOptions } = options;
    const current = (0, _vueDemi.ref)(0);
    const stop = watchWithFilter(source, (...args)=>{
        current.value += 1;
        if (current.value >= toValue(count)) (0, _vueDemi.nextTick)(()=>stop());
        cb(...args);
    }, watchOptions);
    return {
        count: current,
        stop
    };
}
function watchDebounced(source, cb, options = {}) {
    const { debounce =0 , maxWait , ...watchOptions } = options;
    return watchWithFilter(source, cb, {
        ...watchOptions,
        eventFilter: debounceFilter(debounce, {
            maxWait
        })
    });
}
function watchDeep(source, cb, options) {
    return (0, _vueDemi.watch)(source, cb, {
        ...options,
        deep: true
    });
}
function watchIgnorable(source, cb, options = {}) {
    const { eventFilter =bypassFilter , ...watchOptions } = options;
    const filteredCb = createFilterWrapper(eventFilter, cb);
    let ignoreUpdates;
    let ignorePrevAsyncUpdates;
    let stop;
    if (watchOptions.flush === "sync") {
        const ignore = (0, _vueDemi.ref)(false);
        ignorePrevAsyncUpdates = ()=>{};
        ignoreUpdates = (updater)=>{
            ignore.value = true;
            updater();
            ignore.value = false;
        };
        stop = (0, _vueDemi.watch)(source, (...args)=>{
            if (!ignore.value) filteredCb(...args);
        }, watchOptions);
    } else {
        const disposables = [];
        const ignoreCounter = (0, _vueDemi.ref)(0);
        const syncCounter = (0, _vueDemi.ref)(0);
        ignorePrevAsyncUpdates = ()=>{
            ignoreCounter.value = syncCounter.value;
        };
        disposables.push((0, _vueDemi.watch)(source, ()=>{
            syncCounter.value++;
        }, {
            ...watchOptions,
            flush: "sync"
        }));
        ignoreUpdates = (updater)=>{
            const syncCounterPrev = syncCounter.value;
            updater();
            ignoreCounter.value += syncCounter.value - syncCounterPrev;
        };
        disposables.push((0, _vueDemi.watch)(source, (...args)=>{
            const ignore = ignoreCounter.value > 0 && ignoreCounter.value === syncCounter.value;
            ignoreCounter.value = 0;
            syncCounter.value = 0;
            if (ignore) return;
            filteredCb(...args);
        }, watchOptions));
        stop = ()=>{
            disposables.forEach((fn)=>fn());
        };
    }
    return {
        stop,
        ignoreUpdates,
        ignorePrevAsyncUpdates
    };
}
function watchImmediate(source, cb, options) {
    return (0, _vueDemi.watch)(source, cb, {
        ...options,
        immediate: true
    });
}
function watchOnce(source, cb, options) {
    const stop = (0, _vueDemi.watch)(source, (...args)=>{
        (0, _vueDemi.nextTick)(()=>stop());
        return cb(...args);
    }, options);
    return stop;
}
function watchThrottled(source, cb, options = {}) {
    const { throttle =0 , trailing =true , leading =true , ...watchOptions } = options;
    return watchWithFilter(source, cb, {
        ...watchOptions,
        eventFilter: throttleFilter(throttle, trailing, leading)
    });
}
function watchTriggerable(source, cb, options = {}) {
    let cleanupFn;
    function onEffect() {
        if (!cleanupFn) return;
        const fn = cleanupFn;
        cleanupFn = void 0;
        fn();
    }
    function onCleanup(callback) {
        cleanupFn = callback;
    }
    const _cb = (value, oldValue)=>{
        onEffect();
        return cb(value, oldValue, onCleanup);
    };
    const res = watchIgnorable(source, _cb, options);
    const { ignoreUpdates  } = res;
    const trigger = ()=>{
        let res2;
        ignoreUpdates(()=>{
            res2 = _cb(getWatchSources(source), getOldValue(source));
        });
        return res2;
    };
    return {
        ...res,
        trigger
    };
}
function getWatchSources(sources) {
    if ((0, _vueDemi.isReactive)(sources)) return sources;
    if (Array.isArray(sources)) return sources.map((item)=>toValue(item));
    return toValue(sources);
}
function getOldValue(source) {
    return Array.isArray(source) ? source.map(()=>void 0) : void 0;
}
function whenever(source, cb, options) {
    const stop = (0, _vueDemi.watch)(source, (v, ov, onInvalidate)=>{
        if (v) {
            if (options == null ? void 0 : options.once) (0, _vueDemi.nextTick)(()=>stop());
            cb(v, ov, onInvalidate);
        }
    }, {
        ...options,
        once: false
    });
    return stop;
}

},{"vue-demi":"1O62H","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"bpEe2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.type ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", {
        key: 0,
        ref: "node",
        class: (0, _vue.normalizeClass)([
            _ctx.$style.ico,
            {
                [_ctx.$style["ico--empty"]]: !$props.label
            },
            _ctx.$style[$setup.iconClassName]
        ]),
        style: (0, _vue.normalizeStyle)({
            fontSize: `${$props.size}px`
        })
    }, [
        $props.label ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("article", {
            key: 0,
            class: (0, _vue.normalizeClass)([
                _ctx.$style.txt,
                _ctx.$style[`txt-${$props.type}`],
                _ctx.$style[`txt-${$props.type}--${$setup.state}`]
            ])
        }, (0, _vue.toDisplayString)($props.label), 3 /* TEXT, CLASS */ )) : (0, _vue.createCommentVNode)("v-if", true)
    ], 6 /* CLASS, STYLE */ )) : (0, _vue.createCommentVNode)("v-if", true);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("c36ef3-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"9L6d4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _interactiveIconVue = require("template:./InteractiveIcon.vue");
let cssModules = {
    "$style": {
        "ico": "_ico_gr4tf_1",
        "ico--empty": "_ico--empty_gr4tf_10",
        "txt": "_txt_gr4tf_14",
        "txt-save": "_txt-save_gr4tf_25",
        "txt-save--click": "_txt-save--click_gr4tf_29",
        "txt-delete": "_txt-delete_gr4tf_33",
        "txt-delete--click": "_txt-delete--click_gr4tf_37",
        "img-close--click": "_img-close--click_gr4tf_51",
        "img-close--default": "_img-close--default_gr4tf_55",
        "img-close--disable": "_img-close--disable_gr4tf_59",
        "img-close--hover": "_img-close--hover_gr4tf_63",
        "img-collect--click": "_img-collect--click_gr4tf_67",
        "img-collect--default": "_img-collect--default_gr4tf_71",
        "img-collect--disable": "_img-collect--disable_gr4tf_75",
        "img-collect--hover": "_img-collect--hover_gr4tf_79",
        "img-copy--click": "_img-copy--click_gr4tf_83",
        "img-copy--default": "_img-copy--default_gr4tf_87",
        "img-copy--disable": "_img-copy--disable_gr4tf_91",
        "img-copy--hover": "_img-copy--hover_gr4tf_95",
        "img-delete--click": "_img-delete--click_gr4tf_99",
        "img-delete--default": "_img-delete--default_gr4tf_103",
        "img-delete--hover": "_img-delete--hover_gr4tf_107",
        "img-previous--click": "_img-previous--click_gr4tf_111",
        "img-previous--default": "_img-previous--default_gr4tf_115",
        "img-previous--disable": "_img-previous--disable_gr4tf_119",
        "img-previous--hover": "_img-previous--hover_gr4tf_123",
        "img-setting--click": "_img-setting--click_gr4tf_127",
        "img-setting--default": "_img-setting--default_gr4tf_131",
        "img-setting--disable": "_img-setting--disable_gr4tf_135",
        "img-setting--hover": "_img-setting--hover_gr4tf_139",
        "img-keep--click": "_img-keep--click_gr4tf_143",
        "img-keep--default": "_img-keep--default_gr4tf_147",
        "img-keep--hover": "_img-keep--hover_gr4tf_151",
        "img-save--click": "_img-save--click_gr4tf_155",
        "img-save--default": "_img-save--default_gr4tf_159",
        "img-save--hover": "_img-save--hover_gr4tf_163",
        "img-pencil--click": "_img-pencil--click_gr4tf_167",
        "img-pencil--default": "_img-pencil--default_gr4tf_171",
        "img-pencil--hover": "_img-pencil--hover_gr4tf_175",
        "img-send--default": "_img-send--default_gr4tf_179",
        "img-send--hover": "_img-send--hover_gr4tf_183",
        "img-send--click": "_img-send--click_gr4tf_187"
    }
};
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("c36ef3-hmr", (0, _interactiveIconVue.render));
});
exports.default = cssModules;

},{"template:./InteractiveIcon.vue":"bpEe2","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2BL3b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"6qnSn":[function(require,module,exports) {
module.exports = require("aa5607882416dbab").getBundleURL("ceSdd") + "icon.520a0ac5.png" + "?" + Date.now();

},{"aa5607882416dbab":"eCfaW"}],"eCfaW":[function(require,module,exports) {
"use strict";
var bundleURL = {};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ("" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return "/";
}
function getBaseURL(url) {
    return ("" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/, "$1") + "/";
}
// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ("" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^/]+/);
    if (!matches) throw new Error("Origin not found");
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}],"9NGvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = [
    "src"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", {
        class: (0, _vue.normalizeClass)(_ctx.$style.headerPanel)
    }, [
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)(_ctx.$style.headerLogos)
        }, [
            (0, _vue.createElementVNode)("img", {
                class: (0, _vue.normalizeClass)(_ctx.$style.logo),
                src: $setup.SamsungLogo
            }, null, 10 /* CLASS, PROPS */ , _hoisted_1),
            (0, _vue.createElementVNode)("span", {
                class: (0, _vue.normalizeClass)(_ctx.$style.headerText)
            }, "Samsung", 2 /* CLASS */ )
        ], 2 /* CLASS */ ),
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)(_ctx.$style.headerIcons)
        }, [
            (0, _vue.withDirectives)((0, _vue.createVNode)($setup["Popper"], {
                class: (0, _vue.normalizeClass)(_ctx.$style.popover),
                hover: "",
                "offset-distance": "8",
                placement: "top"
            }, {
                content: (0, _vue.withCtx)(()=>[
                        (0, _vue.createElementVNode)("span", {
                            class: (0, _vue.normalizeClass)(_ctx.$style.popoverText)
                        }, "Settings", 2 /* CLASS */ )
                    ]),
                default: (0, _vue.withCtx)(()=>[
                        (0, _vue.createVNode)($setup["InteractiveIcon"], {
                            class: (0, _vue.normalizeClass)(_ctx.$style.icon),
                            type: "setting",
                            onClick: $setup.openSettingPage
                        }, null, 8 /* PROPS */ , [
                            "class"
                        ])
                    ]),
                _: 1 /* STABLE */ 
            }, 8 /* PROPS */ , [
                "class"
            ]), [
                [
                    (0, _vue.vShow),
                    false
                ]
            ]),
            (0, _vue.createVNode)($setup["Popper"], {
                class: (0, _vue.normalizeClass)(_ctx.$style.popover),
                hover: "",
                "offset-distance": "8",
                placement: "top"
            }, {
                content: (0, _vue.withCtx)(()=>[
                        (0, _vue.createElementVNode)("span", {
                            class: (0, _vue.normalizeClass)(_ctx.$style.popoverText)
                        }, "Close", 2 /* CLASS */ )
                    ]),
                default: (0, _vue.withCtx)(()=>[
                        (0, _vue.createVNode)($setup["InteractiveIcon"], {
                            class: (0, _vue.normalizeClass)(_ctx.$style.icon),
                            type: "close",
                            onClick: $setup.closePopup
                        }, null, 8 /* PROPS */ , [
                            "class"
                        ])
                    ]),
                _: 1 /* STABLE */ 
            }, 8 /* PROPS */ , [
                "class"
            ])
        ], 2 /* CLASS */ )
    ], 2 /* CLASS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("f6fb50-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3IQCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _headerPanelVue = require("template:./HeaderPanel.vue");
let cssModules = {
    "$style": {
        "headerPanel": "_headerPanel_1r4be_1",
        "headerLogos": "_headerLogos_1r4be_8",
        "headerIcons": "_headerIcons_1r4be_15",
        "headerText": "_headerText_1r4be_22",
        "logo": "_logo_1r4be_30",
        "icon": "_icon_1r4be_37",
        "popoverText": "_popoverText_1r4be_50",
        "popover": "_popover_1r4be_50"
    }
};
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("f6fb50-hmr", (0, _headerPanelVue.render));
});
exports.default = cssModules;

},{"template:./HeaderPanel.vue":"9NGvj","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2hYoE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"iGRiO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("154f556e1e81b8d8");
    if (script.__esModule) script = script.default;
    script.render = require("bfb7bd6eb126dbdd").render;
    script.__cssModules = require("ce3b4def33759402").default;
    require("9f05fb1fa74984a8").default(script);
    script.__scopeId = "data-v-afc26c";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/WebpilotAlert.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "afc26c-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("afc26c-hmr", script)) __VUE_HMR_RUNTIME__.reload("afc26c-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"154f556e1e81b8d8":"lsOrj","bfb7bd6eb126dbdd":"2ftiI","ce3b4def33759402":"bxn67","9f05fb1fa74984a8":"5aQ16","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"lsOrj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _core = require("@vueuse/core");
var _iconAlertInfoVue = require("./icon/IconAlertInfo.vue");
var _iconAlertInfoVueDefault = parcelHelpers.interopDefault(_iconAlertInfoVue);
var _iconAlertErrorVue = require("./icon/IconAlertError.vue");
var _iconAlertErrorVueDefault = parcelHelpers.interopDefault(_iconAlertErrorVue);
var _iconAlertSuccessVue = require("./icon/IconAlertSuccess.vue");
var _iconAlertSuccessVueDefault = parcelHelpers.interopDefault(_iconAlertSuccessVue);
exports.default = {
    __name: "WebpilotAlert",
    props: {
        type: {
            type: String,
            required: true,
            default: ""
        },
        tips: {
            type: String,
            required: true
        },
        color: {
            type: String,
            default: "#585b58"
        },
        autoHide: {
            type: Boolean,
            default: false
        }
    },
    emits: [
        "onHide"
    ],
    setup (__props, { expose: __expose , emit: emits  }) {
        __expose();
        const props = __props;
        const refAlert = (0, _vue.ref)(null);
        (0, _core.onClickOutside)(refAlert, ()=>{
            if (props.autoHide) emits("onHide");
        });
        const ALERT_TYPE = {
            INFO: "info",
            ERROR: "error",
            SUCCESS: "success"
        };
        const __returned__ = {
            props,
            emits,
            refAlert,
            ALERT_TYPE,
            ref: (0, _vue.ref),
            get onClickOutside () {
                return 0, _core.onClickOutside;
            },
            IconAlertInfo: (0, _iconAlertInfoVueDefault.default),
            IconError: (0, _iconAlertErrorVueDefault.default),
            IconSuccess: (0, _iconAlertSuccessVueDefault.default)
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"vue":"dmrjI","@vueuse/core":"fa5y9","./icon/IconAlertInfo.vue":"jvDno","./icon/IconAlertError.vue":"3DwtW","./icon/IconAlertSuccess.vue":"jrWgh","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"jvDno":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = {};
    script.render = require("36a3b3982fc730e8").render;
    require("4f85252bccbb3dd7").default(script);
    script.__scopeId = "data-v-656d53";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/icon/IconAlertInfo.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "656d53-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("656d53-hmr", script)) __VUE_HMR_RUNTIME__.reload("656d53-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"36a3b3982fc730e8":"5UcO2","4f85252bccbb3dd7":"2D9OA","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"5UcO2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    fill: "none",
    height: "16",
    viewBox: "0 0 16 16",
    width: "16",
    xmlns: "http://www.w3.org/2000/svg"
};
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createElementVNode)("path", {
    "clip-rule": "evenodd",
    d: "M8 0C12.4183 0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0Z",
    fill: "#4F5AFF",
    "fill-rule": "evenodd"
}, null, -1 /* HOISTED */ );
const _hoisted_3 = /*#__PURE__*/ (0, _vue.createElementVNode)("path", {
    "clip-rule": "evenodd",
    d: "M8.00009 6.18182C8.60258 6.18182 9.091 5.6934 9.091 5.09091C9.091 4.48842 8.60258 4 8.00009 4C7.3976 4 6.90918 4.48842 6.90918 5.09091C6.90918 5.6934 7.3976 6.18182 8.00009 6.18182ZM8.90918 8C8.90918 7.49792 8.50217 7.09091 8.00009 7.09091C7.75898 7.09091 7.52775 7.18669 7.35726 7.35718C7.18678 7.52766 7.091 7.75889 7.091 8V10.9091C7.091 11.4112 7.49801 11.8182 8.00009 11.8182C8.50217 11.8182 8.90918 11.4112 8.90918 10.9091V8Z",
    fill: "white",
    "fill-rule": "evenodd"
}, null, -1 /* HOISTED */ );
const _hoisted_4 = [
    _hoisted_2,
    _hoisted_3
];
function render(_ctx, _cache) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("svg", _hoisted_1, _hoisted_4);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("656d53-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2D9OA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3DwtW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = {};
    script.render = require("ce42b52c76e51a5b").render;
    require("7c1e460111f9fb8").default(script);
    script.__scopeId = "data-v-1e8649";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/icon/IconAlertError.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "1e8649-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("1e8649-hmr", script)) __VUE_HMR_RUNTIME__.reload("1e8649-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"ce42b52c76e51a5b":"lfZ5V","7c1e460111f9fb8":"kpqP5","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"lfZ5V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    fill: "none",
    height: "16",
    viewBox: "0 0 16 16",
    width: "16",
    xmlns: "http://www.w3.org/2000/svg"
};
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createStaticVNode)('<g clip-path="url(#clip0_1747_3165)"><path clip-rule="evenodd" d="M16 8.00058C15.9992 8.19137 15.9235 8.3742 15.7891 8.50967L8.51636 15.7824C8.38031 15.9212 8.19436 15.9998 8 16.0006C7.80921 15.9998 7.62637 15.924 7.49091 15.7897L0.218182 8.51694C0.0793777 8.38089 0.000806854 8.19494 0 8.00058C0.000806854 7.80622 0.0793777 7.62027 0.218182 7.48421L7.49091 0.211486C7.77457 -0.0704952 8.2327 -0.0704952 8.51636 0.211486L15.7891 7.48421C15.9252 7.62146 16.0011 7.80727 16 8.00058Z" fill="#CC0000" fill-rule="evenodd"></path><path clip-rule="evenodd" d="M7.27246 8.00062C7.27246 8.40228 7.59807 8.72789 7.99973 8.72789C8.4014 8.72789 8.72701 8.40228 8.72701 8.00062V5.09153C8.72701 4.68987 8.4014 4.36426 7.99973 4.36426C7.59807 4.36426 7.27246 4.68987 7.27246 5.09153V8.00062ZM7.99973 10.9097C8.4014 10.9097 8.72701 10.5841 8.72701 10.1824C8.72701 9.78078 8.4014 9.45517 7.99973 9.45517C7.59807 9.45517 7.27246 9.78078 7.27246 10.1824C7.27246 10.5841 7.59807 10.9097 7.99973 10.9097Z" fill="white" fill-rule="evenodd"></path></g><defs><clipPath id="clip0_1747_3165"><rect fill="white" height="16" width="16"></rect></clipPath></defs>', 2);
const _hoisted_4 = [
    _hoisted_2
];
function render(_ctx, _cache) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("svg", _hoisted_1, _hoisted_4);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("1e8649-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"kpqP5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"jrWgh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = {};
    script.render = require("ec153fee9e044e86").render;
    require("14ac6f994fbcb482").default(script);
    script.__scopeId = "data-v-f5b589";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/icon/IconAlertSuccess.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "f5b589-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("f5b589-hmr", script)) __VUE_HMR_RUNTIME__.reload("f5b589-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"ec153fee9e044e86":"69EQh","14ac6f994fbcb482":"hxp9Q","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"69EQh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    fill: "none",
    height: "16",
    viewBox: "0 0 16 16",
    width: "16",
    xmlns: "http://www.w3.org/2000/svg"
};
const _hoisted_2 = /*#__PURE__*/ (0, _vue.createElementVNode)("path", {
    "clip-rule": "evenodd",
    d: "M8 0C12.4183 0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0Z",
    fill: "#318619",
    "fill-rule": "evenodd"
}, null, -1 /* HOISTED */ );
const _hoisted_3 = /*#__PURE__*/ (0, _vue.createElementVNode)("path", {
    "clip-rule": "evenodd",
    d: "M7.27243 11.2729C7.08017 11.274 6.87958 11.1479 6.74307 11.0128L4.57309 8.84795C4.38961 8.6649 4.31796 8.39811 4.38512 8.14806C4.45227 7.89801 4.64804 7.7027 4.89868 7.6357C5.14931 7.56871 5.41674 7.64019 5.60022 7.82324L7.1626 9.41803L10.2874 5.08828C10.4267 4.85358 10.6868 4.71731 10.9595 4.73609C11.2323 4.75488 11.4712 4.9255 11.5768 5.17707C11.6825 5.42864 11.637 5.71817 11.4592 5.92536L7.84253 10.9767C7.71983 11.1504 7.52665 11.2613 7.3145 11.2798L7.27243 11.2729Z",
    fill: "white",
    "fill-rule": "evenodd"
}, null, -1 /* HOISTED */ );
const _hoisted_4 = [
    _hoisted_2,
    _hoisted_3
];
function render(_ctx, _cache) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("svg", _hoisted_1, _hoisted_4);
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("f5b589-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"hxp9Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"2ftiI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", {
        ref: "refAlert",
        class: (0, _vue.normalizeClass)({
            [_ctx.$style.tips]: true,
            [_ctx.$style.tipsError]: $props.type === $setup.ALERT_TYPE.ERROR,
            [_ctx.$style.tipsSuccess]: $props.type === $setup.ALERT_TYPE.SUCCESS
        })
    }, [
        (0, _vue.renderSlot)(_ctx.$slots, "icon", {}, ()=>[
                (0, _vue.createElementVNode)("article", {
                    class: (0, _vue.normalizeClass)(_ctx.$style.icon)
                }, [
                    $props.type === $setup.ALERT_TYPE.INFO ? ((0, _vue.openBlock)(), (0, _vue.createBlock)($setup["IconAlertInfo"], {
                        key: 0
                    })) : (0, _vue.createCommentVNode)("v-if", true),
                    $props.type === $setup.ALERT_TYPE.SUCCESS ? ((0, _vue.openBlock)(), (0, _vue.createBlock)($setup["IconSuccess"], {
                        key: 1
                    })) : (0, _vue.createCommentVNode)("v-if", true),
                    $props.type === $setup.ALERT_TYPE.ERROR ? ((0, _vue.openBlock)(), (0, _vue.createBlock)($setup["IconError"], {
                        key: 2
                    })) : (0, _vue.createCommentVNode)("v-if", true)
                ], 2 /* CLASS */ )
            ]),
        (0, _vue.createTextVNode)(" " + (0, _vue.toDisplayString)($props.tips), 1 /* TEXT */ )
    ], 2 /* CLASS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("afc26c-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"bxn67":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webpilotAlertVue = require("template:./WebpilotAlert.vue");
let cssModules = {
    "$style": {
        "tips": "_tips_knbqx_1",
        "icon": "_icon_knbqx_16",
        "tipsSuccess": "_tipsSuccess_knbqx_20",
        "tipsError": "_tipsError_knbqx_24"
    }
};
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("afc26c-hmr", (0, _webpilotAlertVue.render));
});
exports.default = cssModules;

},{"template:./WebpilotAlert.vue":"2ftiI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"5aQ16":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"7dyjF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let script;
let initialize = ()=>{
    script = require("cbd9a6bbd77e0ff0");
    if (script.__esModule) script = script.default;
    script.render = require("b35836ee4f670c62").render;
    script.__cssModules = require("99ff2015f1e77751").default;
    require("f6d7ca54b3a86d40").default(script);
    script.__scopeId = "data-v-e7c2fc";
    script.__file = "/Users/mahbubislammahim/Desktop/Development/Webpilot/src/components/TipsShortcut.vue";
};
initialize();
if (module.hot) {
    script.__hmrId = "e7c2fc-hmr";
    module.hot.accept(()=>{
        setTimeout(()=>{
            initialize();
            if (!__VUE_HMR_RUNTIME__.createRecord("e7c2fc-hmr", script)) __VUE_HMR_RUNTIME__.reload("e7c2fc-hmr", script);
        }, 0);
    });
}
exports.default = script;

},{"cbd9a6bbd77e0ff0":"3Ka8O","b35836ee4f670c62":"30XXS","99ff2015f1e77751":"eiMpS","f6d7ca54b3a86d40":"lQTpB","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"3Ka8O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _vue = require("vue");
var _store = require("@/stores/store");
var _storeDefault = parcelHelpers.interopDefault(_store);
var _utils = require("@/utils");
exports.default = {
    __name: "TipsShortcut",
    setup (__props, { expose: __expose  }) {
        __expose();
        const store = (0, _storeDefault.default)();
        const shortcut = (0, _vue.computed)(()=>{
            return (0, _utils.formatShortcut)(store.config.customShortcut);
        });
        const __returned__ = {
            store,
            shortcut,
            computed: (0, _vue.computed),
            get useStore () {
                return 0, _storeDefault.default;
            },
            get formatShortcut () {
                return 0, _utils.formatShortcut;
            }
        };
        Object.defineProperty(__returned__, "__isScriptSetup", {
            enumerable: false,
            value: true
        });
        return __returned__;
    }
};

},{"vue":"dmrjI","@/stores/store":"6gHZ2","@/utils":"bP42X","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"bP42X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getOS", ()=>getOS);
parcelHelpers.export(exports, "formatShortcut", ()=>formatShortcut);
parcelHelpers.export(exports, "getRectFromInputAndTextarea", ()=>getRectFromInputAndTextarea);
parcelHelpers.export(exports, "getAllScrollableParents", ()=>getAllScrollableParents);
var global = arguments[3];
function getOS() {
    const { userAgent , platform  } = global.navigator;
    const macosPlatforms = [
        "Macintosh",
        "MacIntel",
        "MacPPC",
        "Mac68K"
    ];
    const windowsPlatforms = [
        "Win32",
        "Win64",
        "Windows",
        "WinCE"
    ];
    const iosPlatforms = [
        "iPhone",
        "iPad",
        "iPod"
    ];
    let os = null;
    if (macosPlatforms.indexOf(platform) !== -1) os = "Mac OS";
    else if (iosPlatforms.indexOf(platform) !== -1) os = "iOS";
    else if (windowsPlatforms.indexOf(platform) !== -1) os = "Windows";
    else if (/Android/.test(userAgent)) os = "Android";
    else if (!os && /Linux/.test(platform)) os = "Linux";
    return os;
}
function formatShortcut(keys) {
    let keyList = keys;
    keyList = keyList.map((item)=>{
        if (item === "Control") return "Ctrl";
        if (item === "Meta") return "Cmd";
        if (item === " " && (item.charCodeAt() === 160 || item.charCodeAt() === 32)) return "Space";
        // if (item === 'Meta') return '\u2318'
        return item.length === 1 ? item.toUpperCase() : item;
    });
    return keyList.join(" + ");
}
function getRectFromInputAndTextarea(target) {
    const { selectionEnd , selectionStart  } = target;
    const cloneElement = document.createElement("span");
    const { top , left  } = target.getBoundingClientRect();
    const style = window.getComputedStyle(target);
    cloneElement.textContent = target.value;
    cloneElement.style.whiteSpace = "pre-wrap";
    cloneElement.style.visibility = "hidden";
    cloneElement.style.position = "fixed";
    cloneElement.style.top = `${top}px`;
    cloneElement.style.left = `${left}px`;
    cloneElement.style.width = style.width;
    cloneElement.style.height = style.height;
    cloneElement.style.margin = style.margin;
    cloneElement.style.padding = style.padding;
    cloneElement.style.fontFamily = style.fontFamily;
    cloneElement.style.fontSize = style.fontSize;
    cloneElement.style.lineHeight = style.lineHeight;
    cloneElement.style.fontWeight = style.fontWeight;
    cloneElement.style.borderTop = style.borderTop;
    cloneElement.style.borderLeft = style.borderLeft;
    cloneElement.style.borderRight = style.borderRight;
    cloneElement.style.borderBottom = style.borderBottom;
    cloneElement.style.backgroundColor = "white";
    // add to document
    document.body.appendChild(cloneElement);
    // set selection content on cloneelement
    const range = new Range();
    range.setStart(cloneElement.firstChild, selectionStart);
    range.setEnd(cloneElement.firstChild, selectionEnd);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    // get rect
    const rect = selection.getRangeAt(0).getBoundingClientRect();
    // remove clone elemnt
    document.body.removeChild(cloneElement);
    // recovery textarear or input selection
    target.setSelectionRange(selectionStart, selectionEnd);
    return rect;
}
function getAllScrollableParents(element) {
    const scrollableElemetns = [];
    let tempElement = element;
    while(tempElement){
        const { scrollHeight , clientHeight  } = tempElement;
        const { overflowY  } = window.getComputedStyle(tempElement);
        if (scrollHeight > clientHeight && overflowY !== "hidden") // scroll event not works on HTML tag, replace it with window
        scrollableElemetns.push(tempElement.tagName === "HTML" ? window : tempElement);
        tempElement = tempElement?.parentElement;
    }
    return scrollableElemetns;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"30XXS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", {
        class: (0, _vue.normalizeClass)(_ctx.$style.shortcutWrap)
    }, [
        (0, _vue.createElementVNode)("span", {
            class: (0, _vue.normalizeClass)(_ctx.$style.shortcutText)
        }, "Shortcut:", 2 /* CLASS */ ),
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)(_ctx.$style.shortcutKeys)
        }, (0, _vue.toDisplayString)($setup.shortcut), 3 /* TEXT, CLASS */ )
    ], 2 /* CLASS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("e7c2fc-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"eiMpS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tipsShortcutVue = require("template:./TipsShortcut.vue");
let cssModules = {
    "$style": {
        "shortcutWrap": "_shortcutWrap_dq9o7_1",
        "shortcutText": "_shortcutText_dq9o7_7",
        "shortcutKeys": "_shortcutKeys_dq9o7_14"
    }
};
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("e7c2fc-hmr", (0, _tipsShortcutVue.render));
});
exports.default = cssModules;

},{"template:./TipsShortcut.vue":"30XXS","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"lQTpB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"eujuA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
const _hoisted_1 = {
    role: "list"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("section", {
        class: (0, _vue.normalizeClass)(_ctx.$style.notSupportPaeg)
    }, [
        (0, _vue.createVNode)($setup["HeaderPanel"], {
            onOnClose: $setup.closeWindow
        }),
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)(_ctx.$style.tipsWrap)
        }, [
            (0, _vue.createVNode)($setup["WebpilotAlert"], {
                tips: $setup.$gettext("Current Webpage Not Supported"),
                type: "error"
            }, null, 8 /* PROPS */ , [
                "tips"
            ])
        ], 2 /* CLASS */ ),
        (0, _vue.createElementVNode)("section", {
            class: (0, _vue.normalizeClass)(_ctx.$style.explain)
        }, [
            (0, _vue.createTextVNode)((0, _vue.toDisplayString)($setup.$gettext("Due to Chrome's constraints, Webpilot cannot be activated on the following webpages:")) + " ", 1 /* TEXT */ ),
            (0, _vue.createElementVNode)("ul", _hoisted_1, [
                (0, _vue.createElementVNode)("li", null, (0, _vue.toDisplayString)($setup.$gettext("Chrome's Settings, History, and Web Store pages")), 1 /* TEXT */ ),
                (0, _vue.createElementVNode)("li", null, (0, _vue.toDisplayString)($setup.$gettext("New tab and blank pages")), 1 /* TEXT */ )
            ])
        ], 2 /* CLASS */ ),
        (0, _vue.createVNode)($setup["TipsShortcut"], {
            class: (0, _vue.normalizeClass)(_ctx.$style.shortcut)
        }, null, 8 /* PROPS */ , [
            "class"
        ])
    ], 2 /* CLASS */ );
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("65f623-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"fV5z7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _webpilotPopupVue = require("template:./WebpilotPopup.vue");
let cssModules = {
    "$style": {
        "notSupportPaeg": "_notSupportPaeg_9a04i_1",
        "tipsWrap": "_tipsWrap_9a04i_9",
        "explain": "_explain_9a04i_13",
        "shortcut": "_shortcut_9a04i_28"
    }
};
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("65f623-hmr", (0, _webpilotPopupVue.render));
});
exports.default = cssModules;

},{"template:./WebpilotPopup.vue":"eujuA","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"a48Dg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"hJnhS":[function() {},{}],"3xB5O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "render", ()=>render);
var _vue = require("vue");
function render(_ctx, _cache, $props, $setup, $data, $options) {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div");
}
if (module.hot) module.hot.accept(()=>{
    __VUE_HMR_RUNTIME__.rerender("fa6ae5-hmr", render);
});

},{"vue":"dmrjI","@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}],"jRlsO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let NOOP = ()=>{};
exports.default = (script)=>{};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"boKlo"}]},["cQRzy","4z694"], "4z694", "parcelRequire3cd7")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
 globalThis.define=__define;  })(globalThis.define);